syntax = "proto3"

package datacore;

message TDF_APP_HEAD
{
	int32	nHeadSize = 1;         //本记录结构大小
	int32	nItemCount = 2;	   //记录条数
	int32	nItemSize = 3;         //记录大小
};
message TDF_MSG
{
	uint32		    sFlags = 1;			//16位 标识符.
	int32			nDataType = 2;		//16位 数据类型 见enum TDF_MSG_ID
	int32				    nDataLen = 3;		//32位 数据长度（不包括TDF_APP_HEAD的长度）
	int32				    nServerTime = 4;		//32位服务器时间戳（精确到毫秒HHMMSSmmm），对于原生压缩，就是本地时间
	int32				nOrder = 5;			//32位 流水号
	int32                     nConnectId = 6;         //连接ID，在TDF_Open是，配置里面设定的值
	TDF_APP_HEAD           pAppHead = 7;		//应用头
	void*                   pData;              //数据指针
};

/******************************************************************* 消息类型定义 *********************************************************************/
//消息类型对应的结构体见后面
enum TDF_MSG_ID
{
	MSG_INVALID = 0;
	//系统消息
	MSG_SYS_DISCONNECT_NETWORK = 1;     //网络断开事件; 相应的结构体为NULL
	MSG_SYS_CONNECT_RESULT = 2;         //主动发起连接的结果
	MSG_SYS_LOGIN_RESULT = 3;           //登陆应答
	MSG_SYS_CODETABLE_RESULT = 4;       //获取代码表结果
	MSG_SYS_QUOTATIONDATE_CHANGE = 5;   //行情日期变更通知
	MSG_SYS_MARKET_CLOSE = 0;           //闭市
	MSG_SYS_HEART_BEAT = 0;             //服务器心跳消息; 相应的结构体为NULL
	// = 0数据消息
	MSG_DATA_INDEX = 0;                 //指数数据
	MSG_DATA_MARKET = 0;                //行情数据
	MSG_DATA_FUTURE = 0;                //期货行情
	MSG_DATA_TRANSACTION = 0;           //逐笔成交
	MSG_DATA_ORDERQUEUE = 0;            //委托队列
	MSG_DATA_ORDER = 0;                 //逐笔委托
	MSG_DATA_BBQTRANSACTION = 0;        //BBQ现券成交数据
	MSG_DATA_BBQBID = 0;                //BBQ现券报价数据

	MSG_SYS_PACK_OVER   = 0;              //当前网络包解析完毕
};

/******************************************************************* 系统消息 *********************************************************************/
//MSG_SYS_PACK_OVER
message TDF_PACK_OVER
{
	int32 nDataNumber = 1;
	int32 nConID = 1;
};
//数据类型MSG_SYS_CONNECT_RESULT
message TDF_CONNECT_RESULT
{
	string szIp = 1;
	string szPort = 1;
	string szUser = 1;
	string szPwd = 1;

	fixed32 nConnResult = 1; //为0则表示连接失败，非0则表示连接成功
	int32 nConnectionID = 1;        //连接ID
};
//数据类型MSG_SYS_LOGIN_RESULT
message TDF_LOGIN_RESULT
{
	fixed32 nLoginResult = 1;//为0则表示登陆验证失败，非0则表示验证成功

	string szInfo = 1;       //登陆结果文本
	int32 nMarkets = 1;           //市场个数
	string szMarket = 1;  //市场代码 SZ, SH, CF, SHF, CZC, DCE
	//TODO: int32 nDynDate[256];      //动态数据日期
	int32 nDynDate = 1;      //动态数据日期
};
//数据类型MSG_SYS_CODETABLE_RESULT
message TDF_CODE_RESULT
{
	string szInfo[128];       //代码表结果文本
	int32 nMarkets;           //市场个数
	string szMarket[256][8];  //市场代码
	int32 nCodeCount[256];    //代码表项数
	int32 nCodeDate[256];     //代码表日期

};
//数据类型MSG_SYS_QUOTATIONDATE_CHANGE
message TDF_QUOTATIONDATE_CHANGE
{
	string szMarket[8];	    //市场代码
	int32 nOldDate;		//原行情日期
	int32 nNewDate;		//新行情日期
};
//数据类型MSG_SYS_MARKET_CLOSE
message TDF_MARKET_CLOSE
{
	string    szMarket[8];        //交易所名称
	int32		nTime;				//时间(HHMMSSmmm)
	string	chInfo[64];			//闭市信息
};

/******************************************************************* 代码表 *********************************************************************/
//使用TDF_GetCodeTable获取基本代码表，使用TDF_GetOptionCodeInfo获取期权代码表（期权含额外信息）
message TDF_CODE
{
	string szWindCode[32];    //Wind Code: AG1302.SHF
	string szMarket[8];       //market code: SHF
	string szCode[32];        //original code:ag1302
	string szENName[32];
	string szCNName[32];      //chinese name: 沪银1302
	int32 nType;
};
message TDF_OPTION_CODE
{
	TDF_CODE basicCode;

	string szContractID[32];// 期权合约代码
	string szUnderlyingSecurityID[32];//// 标的证券代码
	string chCallOrPut;               // 认购认沽C1        认购，则本字段为“C”；若为认沽，则本字段为“P”
	int32  nExerciseDate;             // 期权行权日，YYYYMMDD
	//扩充字段
	string chUnderlyingType;			// 标的证券类型C3    0-A股 1-ETF (EBS – ETF， ASH – A 股)
	string chOptionType;              // 欧式美式C1        若为欧式期权，则本字段为“E”；若为美式期权，则本字段为“A”

	string chPriceLimitType;          // 涨跌幅限制类型C1 ‘N’表示有涨跌幅限制类型, ‘R’表示无涨跌幅限制类型
	int32  nContractMultiplierUnit;	// 合约单位,         经过除权除息调整后的合约单位, 一定是整数
	int32  nExercisePrice;            // 期权行权价,       经过除权除息调整后的期权行权价，右对齐，精确到厘
	int32  nStartDate;                // 期权首个交易日,YYYYMMDD
	int32  nEndDate;                  // 期权最后交易日/行权日，YYYYMMDD
	int32  nExpireDate;               // 期权到期日，YYYYMMDD
};
union TD_EXCODE_INFO
{
	message TD_OptionCodeInfo            //futures options 专用 (nType >= 0x90 && nType <= 0x95),非期权下列字段无效
	{
		string chContractID[32];           // 期权合约代码C19
		string szUnderlyingSecurityID[32]; // 标的证券代码
		string chUnderlyingType;			 // 标的证券类型C3    0-A股 1-ETF (EBS – ETF， ASH – A 股)
		string chOptionType;               // 欧式美式C1        若为欧式期权，则本字段为“E”；若为美式期权，则本字段为“A”
		string chCallOrPut;                // 认购认沽C1        认购，则本字段为“C”；若为认沽，则本字段为“P”
		string chPriceLimitType;           // 涨跌幅限制类型C1 ‘N’表示有涨跌幅限制类型, ‘R’表示无涨跌幅限制类型
		int32  nContractMultiplierUnit;	 // 合约单位,         经过除权除息调整后的合约单位, 一定是整数
		int32  nExercisePrice;             // 期权行权价,       经过除权除息调整后的期权行权价，右对齐，精确到厘
		int32  nStartDate;                 // 期权首个交易日,YYYYMMDD
		int32  nEndDate;                   // 期权最后交易日/行权日，YYYYMMDD
		int32  nExerciseDate;              // 期权行权日，YYYYMMDD
		int32  nExpireDate;                // 期权到期日，YYYYMMDD
	}Option;
};
message TDF_CODE_INFO
{
	int32  nMarketID;           //交易所ID,定义如下
	int32  nDataLevel;          //数据Level
	int32  nFlag;               //数据来源
	int32  nType;					//证券类型
	string chCode[32];            //证券代码
	string chName[64];			//汉语证券名称
	TD_EXCODE_INFO exCodeInfo;
};

//交易所ID定义///////////////////////////////
#ifndef ID_MARKET_DEFINE
#define ID_MARKET_DEFINE
#define ID_MARKET_SZ	0	//深圳
#define ID_MARKET_SH	1	//上海
#define ID_MARKET_PT	2	//PT
#define ID_MARKET_HZ	3	//板块指数
#define ID_MARKET_SL	4	//自定义市场
#define ID_MARKET_MI	5	//自定义指数
#define ID_MARKET_HK	6	//港股
#define ID_MARKET_QH	7	//期货
#define ID_MARKET_FE	8	//外汇
#define ID_MARKET_KF	9	//外汇(港股)
#define ID_MARKET_CF	10	//中国金融指数

#define ID_MARKET_SHF	11	//上海金属商品交易所
#define ID_MARKET_CZC	12	//郑州商品
#define ID_MARKET_DCE	13	//大连商品
/////////////////////////////////////////////
#define ID_MARKET_CME	14  //芝加哥商业交易所
#define ID_MARKET_CBT	15  //芝加哥期货交易所
#define ID_MARKET_CMX	16  //纽约商品期货交易所
#define ID_MARKET_NYM	17  //纽约商品交易所
#define ID_MARKET_NYB	18  //纽约期货交易所
#define ID_MARKET_IPE	19	//伦敦国际石油交易所
#define ID_MARKET_LME	20	//伦敦金属交易所
#define ID_MARKET_N		21  //纽约交易所
#define ID_MARKET_O		22  //纳斯达克交易所
#define ID_MARKET_HKF	23  //香港交易所期货/期权
/////////////////////////////////////////////
#endif
/******************************************************************* 数据消息 *********************************************************************/
//数据类型MSG_DATA_BBQTRANSACTION,
message TDF_BBQTRANSACTION_DATA
{
	string        szWindCode[32];         //600001.SH
	int32         nActionDay;             //业务发生日(自然日)
	int32			nTime;					//时间(HHMMSSmmm)
	int32         nDoneID;                //成交报价编号
	int32			nPrice;				    //成交收益率(%)或价格 *10000
	string        chPriceStatus;          //收益率或价格标识	1：收益率	2：价格
	string        chStatus;               //收益率或价格标识	1：收益率	2：价格
	string        chDirection;            //成交方向	1：done	2：gvn		3：tkn		4：其他
	string        chSource;               //报价机构	1：国际 2：平安利顺 3：中诚 4：天津信唐	5：国利
	string        chSpecialFlag;          //标识报价是否是行权或到期	0无标记	1备注中包含到期		2备注中包含行权
};
//数据类MSG_DATA_BBQBID,
message TDF_BBQBID_DATA
{
	string        szWindCode[32];         //600001.SH
	int32         nActionDay;             //业务发生日(自然日)
	int32			nTime;					//时间(HHMMSSmmm)
	string        chSource;               //报价机构

	int32         nBidPrice;		       //买入收益率或价格 x10000
	int64         nBidVolume;		   //买入量 x10000
	string        chBidPriceStatus;      //收益率或价格标识	1：收益率	2：价格
	string        chIsBid;               //是否bid	0：不是bid（普通报价）	1：是bid（意向报价）
	string        chBidSpecialFlag;      //标识报价是否是行权或到期	0无标记	1备注中包含到期		2备注中包含行权
	string        chBidStatus;           //买入最优报价状态	0：正常报价	1：撤销报价

	int32         nOfrPrice;		       //卖出收益率或价格 x10000
	int64         nOfrVolume;		   //卖出量	所有量的加总，如2000+1000，就合并为3000；如字符串中含- - 则视为0. x10000
	string        chOfrPriceStatus;      //收益率或价格标识	1：收益率	2：价格
	string        chIsOfr;               //是否ofr	0：不是ofr（普通报价）	  1：是ofr（意向报价）
	string        chOfrSpecialFlag;      //标识报价是否是行权或到期	0无标记	1备注中包含到期		2备注中包含行权
	string        chOfrStatus;           //卖出最优报价状态	0：正常报价	1：撤销报价
};
//数据类型MSG_DATA_MARKET
message TDF_MARKET_DATA
{
	string        szWindCode[32];         //600001.SH
	string        szCode[32];             //原始Code
	int32         nActionDay;             //业务发生日(自然日)
	int32         nTradingDay;            //交易日
	int32			 nTime;					//时间(HHMMSSmmm)
	int32			 nStatus;				//状态
	fixed32 nPreClose;				//前收盘价
	fixed32 nOpen;					//开盘价
	fixed32 nHigh;					//最高价
	fixed32 nLow;					//最低价
	fixed32 nMatch;				//最新价
	fixed32 nAskPrice[10];			//申卖价
	fixed32 nAskVol[10];			//申卖量
	fixed32 nBidPrice[10];			//申买价
	fixed32 nBidVol[10];			//申买量
	fixed32 nNumTrades;			//成交笔数
	int64		 iVolume;				//成交总量
	int64		 iTurnover;				//成交总金额
	int64		 nTotalBidVol;			//委托买入总量
	int64		 nTotalAskVol;			//委托卖出总量
	fixed32 nWeightedAvgBidPrice;	//加权平均委买价格
	fixed32 nWeightedAvgAskPrice;  //加权平均委卖价格
	int32			 nIOPV;					//IOPV净值估值
	int32			 nYieldToMaturity;		//到期收益率
	fixed32 nHighLimited;			//涨停价
	fixed32 nLowLimited;			//跌停价
	string		 chPrefix[4];			//证券信息前缀
	int32			 nSyl1;					//市盈率1
	int32			 nSyl2;					//市盈率2
	int32			 nSD2;					//升跌2（对比上一笔）
	const TDF_CODE_INFO *  pCodeInfo;     //代码信息， TDF_Close，清盘重连后，此指针无效
};
//数据类型MSG_DATA_INDEX
message TDF_INDEX_DATA
{
	string        szWindCode[32];         //600001.SH
	string        szCode[32];             //原始Code
	int32         nActionDay;             //业务发生日(自然日)
	int32         nTradingDay;            //交易日
	int32         nTime;				//时间(HHMMSSmmm)
	int32		    nOpenIndex;			//今开盘指数
	int32		    nHighIndex;			//最高指数
	int32		    nLowIndex;			//最低指数
	int32		    nLastIndex;			//最新指数
	int64	    iTotalVolume;		//参与计算相应指数的交易数量
	int64	    iTurnover;			//参与计算相应指数的成交金额
	int32		    nPreCloseIndex;		//前盘指数
	const TDF_CODE_INFO *  pCodeInfo;   //代码信息， TDF_Close，清盘重连后，此指针无效
};
//数据类型MSG_DATA_FUTURE
message TDF_FUTURE_DATA
{
	string        szWindCode[32];         //600001.SH
	string        szCode[32];             //原始Code
	int32         nActionDay;             //业务发生日(自然日)
	int32         nTradingDay;            //交易日
	int32			 nTime;					//时间(HHMMSSmmm)
	int32			 nStatus;				//状态
	int64		 iPreOpenInterest;		//昨持仓
	fixed32 nPreClose;				//昨收盘价
	fixed32 nPreSettlePrice;		//昨结算
	fixed32 nOpen;					//开盘价
	fixed32 nHigh;					//最高价
	fixed32 nLow;					//最低价
	fixed32 nMatch;				//最新价
	int64		 iVolume;				//成交总量
	int64		 iTurnover;				//成交总金额
	int64		 iOpenInterest;			//持仓总量
	fixed32 nClose;				//今收盘
	fixed32 nSettlePrice;			//今结算
	fixed32 nHighLimited;			//涨停价
	fixed32 nLowLimited;			//跌停价
	int32			 nPreDelta;			    //昨虚实度
	int32			 nCurrDelta;            //今虚实度
	fixed32 nAskPrice[5];			//申卖价
	fixed32 nAskVol[5];			//申卖量
	fixed32 nBidPrice[5];			//申买价
	fixed32 nBidVol[5];			//申买量
	//Add 20140605
	int32	nAuctionPrice;			    //波动性中断参考价
	int32	nAuctionQty;			    //波动性中断集合竞价虚拟匹配量
	int32 nAvgPrice;                      //郑商所期货均价
	const TDF_CODE_INFO *  pCodeInfo;   //代码信息， TDF_Close，清盘重连后，此指针无效
};
//数据类型MSG_DATA_TRANSACTION
message TDF_TRANSACTION
{
	string    szWindCode[32];             //600001.SH
	string    szCode[32];                 //原始Code
	int32     nActionDay;                 //自然日
	int32		nTime;				//成交时间(HHMMSSmmm)
	int32		nIndex;				//成交编号
	int32		nPrice;				//成交价格
	int32		nVolume;			//成交数量
	int32		nTurnover;			//成交金额
	int32     nBSFlag;                    //买卖方向(买：'B', 卖：'S', 不明：' ')
	string    chOrderKind;                //成交类别
	string    chFunctionCode;             //成交代码
	int32	    nAskOrder;			//叫卖方委托序号
	int32	    nBidOrder;			//叫买方委托序号
	const TDF_CODE_INFO *  pCodeInfo;   //代码信息， TDF_Close，清盘重连后，此指针无效
};
//数据类型MSG_DATA_ORDER
message TDF_ORDER
{
	string    szWindCode[32]; //600001.SH
	string    szCode[32];     //原始Code
	int32	nActionDay;	    //委托日期(YYMMDD)
	int32	nTime;			//委托时间(HHMMSSmmm)
	int32	nOrder;		//委托号
	int32		nPrice;			//委托价格
	int32	nVolume;		//委托数量
	string    chOrderKind;	//委托类别
	string    chFunctionCode;	//委托代码('B','S','C')
	const TDF_CODE_INFO *  pCodeInfo;     //代码信息， TDF_Close，清盘重连后，此指针无效
};
//数据类型MSG_DATA_ORDERQUEUE
message TDF_ORDER_QUEUE
{
	string    szWindCode[32]; //600001.SH
	string    szCode[32];     //原始Code
	int32     nActionDay;     //自然日
	int32	nTime;			//时间(HHMMSSmmm)
	int32     nSide;			//买卖方向('B':Bid 'A':Ask)
	int32		nPrice;			//委托价格
	int32	nOrders;		//订单数量
	int32	nABItems;		//明细个数
	int32	nABVolume[200];	//订单明细
	const TDF_CODE_INFO *  pCodeInfo;     //代码信息， TDF_Close，清盘重连后，此指针无效
};
/******************************************************************* 订阅相关 *********************************************************************/
enum DATA_TYPE_FLAG
{
	DATA_TYPE_TRANSACTION = 0x2,           //逐笔成交
	DATA_TYPE_ORDER       = 0x4,           //逐笔委托
	DATA_TYPE_ORDERQUEUE  = 0x8,           //委托队列
	DATA_TYPE_NONE = 0,                    //只要行情，其他都不订阅；订阅多个类型DATA_TYPE_TRANSACTION | DATA_TYPE_ORDER | DATA_TYPE_ORDERQUEUE
};
enum SUBSCRIPTION_STYLE
{
	SUBSCRIPTION_FULL = 3,                //全市场订阅
	SUBSCRIPTION_SET=0,                   //设置为订阅列表中股票，
	SUBSCRIPTION_ADD=1,                   //增加订阅列表中股票
	SUBSCRIPTION_DEL=2,                   //删除列表中的订阅
};

/******************************************************************* 配置 *********************************************************************/
//环境设置，在调用TDF_Open之前设置k
enum TDF_ENVIRON_SETTING
{
	TDF_ENVIRON_HEART_BEAT_INTERVAL,       //Heart Beat间隔（秒数）, 若值为0则表示默认值10秒钟
	TDF_ENVIRON_MISSED_BEART_COUNT,        //如果没有收到心跳次数超过这个值，且没收到其他任何数据，则判断为掉线，若值0为默认次数2次
	TDF_ENVIRON_OPEN_TIME_OUT,             //在调TDF_Open期间，接收每一个数据包的超时时间（秒数，不是TDF_Open调用总的最大等待时间），若值为0则默认30秒
	TDF_ENVIRON_USE_PACK_OVER,
	TDF_ENVIRON_HEART_BEAT_FLAG,          ////心跳数据发送方式（0: 取消发送心跳包 1：没有数据发送的时候发送心跳数据，2：有规律发送心跳数据）
};
//单服务器配置（可用多服务器实现，保留单服务器配置以兼容旧API使用方法）
//相比旧API，少了：nReconnectCount、nReconnectGap、nProtocol，nDate
message TDF_OPEN_SETTING
{
	string szIp[32];
	string szPort[8];
	string szUser[64];
	string szPwd[64];
	//回调函数设置
	TDF_DataMsgHandler pfnMsgHandler;       //数据消息处理回调
	TDF_SystemMsgHandler pfnSysMsgNotify;   //系统消息通知回调

	//fixed32 nProtocol;                 //协议号，为0则为默认，或者0x6001
	//订阅设置
	const string* szMarkets;                  // 市场订阅！例如"SZ;SH;CF;SHF;DCE;SHF"，需要订阅的市场列表，以“;”分割,为空则订阅所有支持的市场
	const string* szSubScriptions;            // 代码订阅！例如"600000.sh;ag.shf;000001.sz"，需要订阅的股票，以“;”分割，为空则订阅全市场
	fixed32 nTypeFlags;                // 数据类型订阅！支持订阅3种类型TRANSACTION;ORDER;ORDERQUEUE。 ！注意：行情数据任何时候都发送，不需要订阅! 参见enum DATA_TYPE_FLAG

	fixed32 nTime;                     //为0则请求实时行情，为0xffffffff从头请求
	fixed32 nConnectionID;             //连接ID，连接回调消息的附加结构 TDF_CONNECT_RESULT中 会包含这个ID
};

//多服务器配置
message TDF_SERVER_INFO
{
	string szIp[32];
	string szPort[8];
	string szUser[64]; //TODO
	string szPwd[64];
};
message TDF_OPEN_SETTING_EXT
{
	//服务器设置
	TDF_SERVER_INFO	siServer[MAXSERVER];
	fixed32 nServerNum;
	//回调函数设置
	TDF_DataMsgHandler pfnMsgHandler;       //数据消息处理回调
	TDF_SystemMsgHandler pfnSysMsgNotify;   //系统消息通知回调

	//fixed32 nProtocol;                 //协议号，为0则为默认，或者0x6001
	//订阅设置
	const string* szMarkets;                  // 市场订阅！例如"SZ;SH;CF;SHF;DCE;SHF"，需要订阅的市场列表，以“;”分割,为空则订阅所有支持的市场
	const string* szSubScriptions;            // 代码订阅！例如"600000.sh;ag.shf;000001.sz"，需要订阅的股票，以“;”分割，为空则订阅全市场
	fixed32 nTypeFlags;                // 数据类型订阅！支持订阅3种类型TRANSACTION;ORDER;ORDERQUEUE。 ！注意：行情数据任何时候都发送，不需要订阅! 参见enum DATA_TYPE_FLAG

	fixed32 nTime;                     //为0则请求实时行情，为0xffffffff从头请求
	fixed32 nConnectionID;             //连接ID，连接回调消息的附加结构 TDF_CONNECT_RESULT中 会包含这个ID
};
//代理服务器设置
enum TDF_PROXY_TYPE
{
	TDF_PROXY_SOCK4 = 0;
	TDF_PROXY_SOCK4A = 0;
	TDF_PROXY_SOCK5 = 0;
	TDF_PROXY_HTTP11 = 0;
};
message TDF_PROXY_SETTING
{
	TDF_PROXY_TYPE nProxyType = 1;
	string szProxyHostIp = 1;
	string szProxyPort = 1;
	string szProxyUser = 1;
	string szProxyPwd = 1;
};
//总包，流量，连接次数，最后一次连接时间+日期
message ConStatInfo
{
	int64  iTotalPacks = 1;
	int64  iTotalTraffic = 1;
	int32      nToalConTimes = 1;
	int64  ilastConTime = 1;
};
