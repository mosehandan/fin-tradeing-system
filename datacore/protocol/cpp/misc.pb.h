
/***********************************************************************

Copyright 2017 quantOS-org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at:

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

***********************************************************************/
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc.proto

#ifndef PROTOBUF_misc_2eproto__INCLUDED
#define PROTOBUF_misc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace jzs {
namespace msg {
namespace misc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_misc_2eproto();
void protobuf_AssignDesc_misc_2eproto();
void protobuf_ShutdownFile_misc_2eproto();

class Code;
class CodeTable;
class LowHeartBeatReq;
class LowHeartBeatRsp;

// ===================================================================

class Code : public ::google::protobuf::Message {
 public:
  Code();
  virtual ~Code();

  Code(const Code& from);

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Code& default_instance();

  void Swap(Code* other);

  // implements Message ----------------------------------------------

  Code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Code& from);
  void MergeFrom(const Code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 jzcode = 1;
  inline bool has_jzcode() const;
  inline void clear_jzcode();
  static const int kJzcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 jzcode() const;
  inline void set_jzcode(::google::protobuf::uint32 value);

  // required string symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:jzs.msg.misc.Code)
 private:
  inline void set_has_jzcode();
  inline void clear_has_jzcode();
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::google::protobuf::uint32 jzcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_misc_2eproto();
  friend void protobuf_AssignDesc_misc_2eproto();
  friend void protobuf_ShutdownFile_misc_2eproto();

  void InitAsDefaultInstance();
  static Code* default_instance_;
};
// -------------------------------------------------------------------

class CodeTable : public ::google::protobuf::Message {
 public:
  CodeTable();
  virtual ~CodeTable();

  CodeTable(const CodeTable& from);

  inline CodeTable& operator=(const CodeTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeTable& default_instance();

  void Swap(CodeTable* other);

  // implements Message ----------------------------------------------

  CodeTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CodeTable& from);
  void MergeFrom(const CodeTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // repeated .jzs.msg.misc.Code codes = 2;
  inline int codes_size() const;
  inline void clear_codes();
  static const int kCodesFieldNumber = 2;
  inline const ::jzs::msg::misc::Code& codes(int index) const;
  inline ::jzs::msg::misc::Code* mutable_codes(int index);
  inline ::jzs::msg::misc::Code* add_codes();
  inline const ::google::protobuf::RepeatedPtrField< ::jzs::msg::misc::Code >&
      codes() const;
  inline ::google::protobuf::RepeatedPtrField< ::jzs::msg::misc::Code >*
      mutable_codes();

  // @@protoc_insertion_point(class_scope:jzs.msg.misc.CodeTable)
 private:
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::jzs::msg::misc::Code > codes_;
  ::google::protobuf::uint32 date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_misc_2eproto();
  friend void protobuf_AssignDesc_misc_2eproto();
  friend void protobuf_ShutdownFile_misc_2eproto();

  void InitAsDefaultInstance();
  static CodeTable* default_instance_;
};
// -------------------------------------------------------------------

class LowHeartBeatReq : public ::google::protobuf::Message {
 public:
  LowHeartBeatReq();
  virtual ~LowHeartBeatReq();

  LowHeartBeatReq(const LowHeartBeatReq& from);

  inline LowHeartBeatReq& operator=(const LowHeartBeatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LowHeartBeatReq& default_instance();

  void Swap(LowHeartBeatReq* other);

  // implements Message ----------------------------------------------

  LowHeartBeatReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LowHeartBeatReq& from);
  void MergeFrom(const LowHeartBeatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // required uint64 req_time = 2;
  inline bool has_req_time() const;
  inline void clear_req_time();
  static const int kReqTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 req_time() const;
  inline void set_req_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:jzs.msg.misc.LowHeartBeatReq)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_req_time();
  inline void clear_has_req_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 req_time_;
  ::google::protobuf::uint32 req_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_misc_2eproto();
  friend void protobuf_AssignDesc_misc_2eproto();
  friend void protobuf_ShutdownFile_misc_2eproto();

  void InitAsDefaultInstance();
  static LowHeartBeatReq* default_instance_;
};
// -------------------------------------------------------------------

class LowHeartBeatRsp : public ::google::protobuf::Message {
 public:
  LowHeartBeatRsp();
  virtual ~LowHeartBeatRsp();

  LowHeartBeatRsp(const LowHeartBeatRsp& from);

  inline LowHeartBeatRsp& operator=(const LowHeartBeatRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LowHeartBeatRsp& default_instance();

  void Swap(LowHeartBeatRsp* other);

  // implements Message ----------------------------------------------

  LowHeartBeatRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LowHeartBeatRsp& from);
  void MergeFrom(const LowHeartBeatRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // required uint64 req_time = 2;
  inline bool has_req_time() const;
  inline void clear_req_time();
  static const int kReqTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 req_time() const;
  inline void set_req_time(::google::protobuf::uint64 value);

  // required uint64 rsp_time = 3;
  inline bool has_rsp_time() const;
  inline void clear_rsp_time();
  static const int kRspTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 rsp_time() const;
  inline void set_rsp_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:jzs.msg.misc.LowHeartBeatRsp)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_req_time();
  inline void clear_has_req_time();
  inline void set_has_rsp_time();
  inline void clear_has_rsp_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 req_time_;
  ::google::protobuf::uint64 rsp_time_;
  ::google::protobuf::uint32 req_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_misc_2eproto();
  friend void protobuf_AssignDesc_misc_2eproto();
  friend void protobuf_ShutdownFile_misc_2eproto();

  void InitAsDefaultInstance();
  static LowHeartBeatRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// Code

// required uint32 jzcode = 1;
inline bool Code::has_jzcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Code::set_has_jzcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Code::clear_has_jzcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Code::clear_jzcode() {
  jzcode_ = 0u;
  clear_has_jzcode();
}
inline ::google::protobuf::uint32 Code::jzcode() const {
  return jzcode_;
}
inline void Code::set_jzcode(::google::protobuf::uint32 value) {
  set_has_jzcode();
  jzcode_ = value;
}

// required string symbol = 2;
inline bool Code::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Code::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Code::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Code::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Code::symbol() const {
  return *symbol_;
}
inline void Code::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Code::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Code::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Code::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* Code::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Code::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CodeTable

// required uint32 date = 1;
inline bool CodeTable::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CodeTable::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CodeTable::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CodeTable::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 CodeTable::date() const {
  return date_;
}
inline void CodeTable::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
}

// repeated .jzs.msg.misc.Code codes = 2;
inline int CodeTable::codes_size() const {
  return codes_.size();
}
inline void CodeTable::clear_codes() {
  codes_.Clear();
}
inline const ::jzs::msg::misc::Code& CodeTable::codes(int index) const {
  return codes_.Get(index);
}
inline ::jzs::msg::misc::Code* CodeTable::mutable_codes(int index) {
  return codes_.Mutable(index);
}
inline ::jzs::msg::misc::Code* CodeTable::add_codes() {
  return codes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jzs::msg::misc::Code >&
CodeTable::codes() const {
  return codes_;
}
inline ::google::protobuf::RepeatedPtrField< ::jzs::msg::misc::Code >*
CodeTable::mutable_codes() {
  return &codes_;
}

// -------------------------------------------------------------------

// LowHeartBeatReq

// required uint32 req_id = 1;
inline bool LowHeartBeatReq::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LowHeartBeatReq::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LowHeartBeatReq::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LowHeartBeatReq::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 LowHeartBeatReq::req_id() const {
  return req_id_;
}
inline void LowHeartBeatReq::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
}

// required uint64 req_time = 2;
inline bool LowHeartBeatReq::has_req_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LowHeartBeatReq::set_has_req_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LowHeartBeatReq::clear_has_req_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LowHeartBeatReq::clear_req_time() {
  req_time_ = GOOGLE_ULONGLONG(0);
  clear_has_req_time();
}
inline ::google::protobuf::uint64 LowHeartBeatReq::req_time() const {
  return req_time_;
}
inline void LowHeartBeatReq::set_req_time(::google::protobuf::uint64 value) {
  set_has_req_time();
  req_time_ = value;
}

// -------------------------------------------------------------------

// LowHeartBeatRsp

// required uint32 req_id = 1;
inline bool LowHeartBeatRsp::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LowHeartBeatRsp::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LowHeartBeatRsp::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LowHeartBeatRsp::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 LowHeartBeatRsp::req_id() const {
  return req_id_;
}
inline void LowHeartBeatRsp::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
}

// required uint64 req_time = 2;
inline bool LowHeartBeatRsp::has_req_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LowHeartBeatRsp::set_has_req_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LowHeartBeatRsp::clear_has_req_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LowHeartBeatRsp::clear_req_time() {
  req_time_ = GOOGLE_ULONGLONG(0);
  clear_has_req_time();
}
inline ::google::protobuf::uint64 LowHeartBeatRsp::req_time() const {
  return req_time_;
}
inline void LowHeartBeatRsp::set_req_time(::google::protobuf::uint64 value) {
  set_has_req_time();
  req_time_ = value;
}

// required uint64 rsp_time = 3;
inline bool LowHeartBeatRsp::has_rsp_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LowHeartBeatRsp::set_has_rsp_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LowHeartBeatRsp::clear_has_rsp_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LowHeartBeatRsp::clear_rsp_time() {
  rsp_time_ = GOOGLE_ULONGLONG(0);
  clear_has_rsp_time();
}
inline ::google::protobuf::uint64 LowHeartBeatRsp::rsp_time() const {
  return rsp_time_;
}
inline void LowHeartBeatRsp::set_rsp_time(::google::protobuf::uint64 value) {
  set_has_rsp_time();
  rsp_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace misc
}  // namespace msg
}  // namespace jzs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_misc_2eproto__INCLUDED
