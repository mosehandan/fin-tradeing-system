// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: md.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "md.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jzs {
namespace msg {
namespace md {

namespace {

const ::google::protobuf::Descriptor* AskBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuoteStatic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteStatic_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketQuoteExData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketQuoteExData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataInd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataInd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketDataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_md_2eproto() {
  protobuf_AddDesc_md_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "md.proto");
  GOOGLE_CHECK(file != NULL);
  AskBid_descriptor_ = file->message_type(0);
  static const int AskBid_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBid, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBid, bidvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBid, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBid, askvolume_),
  };
  AskBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskBid_descriptor_,
      AskBid::default_instance_,
      AskBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskBid));
  QuoteStatic_descriptor_ = file->message_type(1);
  static const int QuoteStatic_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, tradeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, uplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, downlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, preinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, presettle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, predelta_),
  };
  QuoteStatic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuoteStatic_descriptor_,
      QuoteStatic::default_instance_,
      QuoteStatic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteStatic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuoteStatic));
  MarketQuoteExData_descriptor_ = file->message_type(2);
  static const int MarketQuoteExData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteExData, rsi_turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteExData, rsi_roc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteExData, rop_found_),
  };
  MarketQuoteExData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketQuoteExData_descriptor_,
      MarketQuoteExData::default_instance_,
      MarketQuoteExData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteExData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteExData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketQuoteExData));
  MarketQuote_descriptor_ = file->message_type(3);
  static const int MarketQuote_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, jzcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, settle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, ab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, qs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, iopv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, avgbidpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, totbidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, avgaskpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, totaskvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, quoteage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, vwap_),
  };
  MarketQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketQuote_descriptor_,
      MarketQuote::default_instance_,
      MarketQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketQuote));
  MarketDataInd_descriptor_ = file->message_type(4);
  static const int MarketDataInd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataInd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataInd, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataInd, fut_),
  };
  MarketDataInd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataInd_descriptor_,
      MarketDataInd::default_instance_,
      MarketDataInd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataInd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataInd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataInd));
  MarketDataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_md_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskBid_descriptor_, &AskBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuoteStatic_descriptor_, &QuoteStatic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketQuoteExData_descriptor_, &MarketQuoteExData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketQuote_descriptor_, &MarketQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataInd_descriptor_, &MarketDataInd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_md_2eproto() {
  delete AskBid::default_instance_;
  delete AskBid_reflection_;
  delete QuoteStatic::default_instance_;
  delete QuoteStatic_reflection_;
  delete MarketQuoteExData::default_instance_;
  delete MarketQuoteExData_reflection_;
  delete MarketQuote::default_instance_;
  delete MarketQuote_reflection_;
  delete MarketDataInd::default_instance_;
  delete MarketDataInd_reflection_;
}

void protobuf_AddDesc_md_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010md.proto\022\njzs.msg.md\"R\n\006AskBid\022\020\n\010bidP"
    "rice\030\001 \003(\001\022\021\n\tbidVolume\030\002 \003(\r\022\020\n\010askPric"
    "e\030\003 \003(\001\022\021\n\taskVolume\030\004 \003(\r\"\235\001\n\013QuoteStat"
    "ic\022\014\n\004date\030\001 \002(\r\022\020\n\010tradeday\030\002 \002(\r\022\017\n\007up"
    "limit\030\003 \002(\001\022\021\n\tdownlimit\030\004 \002(\001\022\023\n\013preint"
    "erest\030\005 \002(\003\022\020\n\010preclose\030\006 \002(\001\022\021\n\tpresett"
    "le\030\007 \002(\001\022\020\n\010predelta\030\010 \002(\001\"M\n\021MarketQuot"
    "eExData\022\024\n\014rsi_turnover\030\001 \001(\001\022\017\n\007rsi_roc"
    "\030\002 \001(\001\022\021\n\trop_found\030\003 \001(\001\"\275\003\n\013MarketQuot"
    "e\022\016\n\006jzcode\030\001 \002(\r\022\016\n\006symbol\030\002 \001(\t\022\014\n\004tim"
    "e\030\003 \002(\r\022\014\n\004open\030\004 \002(\001\022\014\n\004high\030\005 \002(\001\022\013\n\003l"
    "ow\030\006 \002(\001\022\014\n\004last\030\007 \002(\001\022\016\n\006volume\030\010 \002(\003\022\020"
    "\n\010turnover\030\t \002(\001\022\020\n\010interest\030\n \002(\003\022\r\n\005cl"
    "ose\030\013 \002(\001\022\016\n\006settle\030\014 \002(\001\022\r\n\005delta\030\r \002(\001"
    "\022\036\n\002ab\030\016 \002(\0132\022.jzs.msg.md.AskBid\022#\n\002qs\030\017"
    " \002(\0132\027.jzs.msg.md.QuoteStatic\022\014\n\004iopv\030\020 "
    "\002(\001\022\020\n\010avgbidpx\030\021 \002(\001\022\021\n\ttotbidvol\030\022 \002(\003"
    "\022\020\n\010avgaskpx\030\023 \002(\001\022\021\n\ttotaskvol\030\024 \002(\003\022\020\n"
    "\010quoteage\030\025 \001(\005\022*\n\003ext\030\026 \001(\0132\035.jzs.msg.m"
    "d.MarketQuoteExData\022\014\n\004vwap\030\027 \001(\001\"\205\001\n\rMa"
    "rketDataInd\022(\n\004type\030\001 \002(\0162\032.jzs.msg.md.M"
    "arketDataType\022$\n\003stk\030\002 \001(\0132\027.jzs.msg.md."
    "MarketQuote\022$\n\003fut\030\003 \001(\0132\027.jzs.msg.md.Ma"
    "rketQuote*L\n\016MarketDataType\022\r\n\tMD_STK_L1"
    "\020\001\022\r\n\tMD_STK_L2\020\002\022\r\n\tMD_FUT_L1\020\003\022\r\n\tMD_F"
    "UT_L2\020\004", 1007);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "md.proto", &protobuf_RegisterTypes);
  AskBid::default_instance_ = new AskBid();
  QuoteStatic::default_instance_ = new QuoteStatic();
  MarketQuoteExData::default_instance_ = new MarketQuoteExData();
  MarketQuote::default_instance_ = new MarketQuote();
  MarketDataInd::default_instance_ = new MarketDataInd();
  AskBid::default_instance_->InitAsDefaultInstance();
  QuoteStatic::default_instance_->InitAsDefaultInstance();
  MarketQuoteExData::default_instance_->InitAsDefaultInstance();
  MarketQuote::default_instance_->InitAsDefaultInstance();
  MarketDataInd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_md_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_md_2eproto {
  StaticDescriptorInitializer_md_2eproto() {
    protobuf_AddDesc_md_2eproto();
  }
} static_descriptor_initializer_md_2eproto_;
const ::google::protobuf::EnumDescriptor* MarketDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataType_descriptor_;
}
bool MarketDataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AskBid::kBidPriceFieldNumber;
const int AskBid::kBidVolumeFieldNumber;
const int AskBid::kAskPriceFieldNumber;
const int AskBid::kAskVolumeFieldNumber;
#endif  // !_MSC_VER

AskBid::AskBid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskBid::InitAsDefaultInstance() {
}

AskBid::AskBid(const AskBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskBid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskBid::~AskBid() {
  SharedDtor();
}

void AskBid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskBid_descriptor_;
}

const AskBid& AskBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_md_2eproto();
  return *default_instance_;
}

AskBid* AskBid::default_instance_ = NULL;

AskBid* AskBid::New() const {
  return new AskBid;
}

void AskBid::Clear() {
  bidprice_.Clear();
  bidvolume_.Clear();
  askprice_.Clear();
  askvolume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double bidPrice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_bidprice())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bidprice())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_bidPrice;
        if (input->ExpectTag(16)) goto parse_bidVolume;
        break;
      }

      // repeated uint32 bidVolume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_bidvolume())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidvolume())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bidVolume;
        if (input->ExpectTag(25)) goto parse_askPrice;
        break;
      }

      // repeated double askPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_askPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_askprice())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_askprice())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_askPrice;
        if (input->ExpectTag(32)) goto parse_askVolume;
        break;
      }

      // repeated uint32 askVolume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_askvolume())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askvolume())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_askVolume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double bidPrice = 1;
  for (int i = 0; i < this->bidprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->bidprice(i), output);
  }

  // repeated uint32 bidVolume = 2;
  for (int i = 0; i < this->bidvolume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->bidvolume(i), output);
  }

  // repeated double askPrice = 3;
  for (int i = 0; i < this->askprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->askprice(i), output);
  }

  // repeated uint32 askVolume = 4;
  for (int i = 0; i < this->askvolume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->askvolume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double bidPrice = 1;
  for (int i = 0; i < this->bidprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->bidprice(i), target);
  }

  // repeated uint32 bidVolume = 2;
  for (int i = 0; i < this->bidvolume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->bidvolume(i), target);
  }

  // repeated double askPrice = 3;
  for (int i = 0; i < this->askprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->askprice(i), target);
  }

  // repeated uint32 askVolume = 4;
  for (int i = 0; i < this->askvolume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->askvolume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskBid::ByteSize() const {
  int total_size = 0;

  // repeated double bidPrice = 1;
  {
    int data_size = 0;
    data_size = 8 * this->bidprice_size();
    total_size += 1 * this->bidprice_size() + data_size;
  }

  // repeated uint32 bidVolume = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bidvolume_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidvolume(i));
    }
    total_size += 1 * this->bidvolume_size() + data_size;
  }

  // repeated double askPrice = 3;
  {
    int data_size = 0;
    data_size = 8 * this->askprice_size();
    total_size += 1 * this->askprice_size() + data_size;
  }

  // repeated uint32 askVolume = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->askvolume_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askvolume(i));
    }
    total_size += 1 * this->askvolume_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskBid::MergeFrom(const AskBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bidprice_.MergeFrom(from.bidprice_);
  bidvolume_.MergeFrom(from.bidvolume_);
  askprice_.MergeFrom(from.askprice_);
  askvolume_.MergeFrom(from.askvolume_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBid::CopyFrom(const AskBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskBid::IsInitialized() const {

  return true;
}

void AskBid::Swap(AskBid* other) {
  if (other != this) {
    bidprice_.Swap(&other->bidprice_);
    bidvolume_.Swap(&other->bidvolume_);
    askprice_.Swap(&other->askprice_);
    askvolume_.Swap(&other->askvolume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskBid_descriptor_;
  metadata.reflection = AskBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuoteStatic::kDateFieldNumber;
const int QuoteStatic::kTradedayFieldNumber;
const int QuoteStatic::kUplimitFieldNumber;
const int QuoteStatic::kDownlimitFieldNumber;
const int QuoteStatic::kPreinterestFieldNumber;
const int QuoteStatic::kPrecloseFieldNumber;
const int QuoteStatic::kPresettleFieldNumber;
const int QuoteStatic::kPredeltaFieldNumber;
#endif  // !_MSC_VER

QuoteStatic::QuoteStatic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuoteStatic::InitAsDefaultInstance() {
}

QuoteStatic::QuoteStatic(const QuoteStatic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuoteStatic::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0u;
  tradeday_ = 0u;
  uplimit_ = 0;
  downlimit_ = 0;
  preinterest_ = GOOGLE_LONGLONG(0);
  preclose_ = 0;
  presettle_ = 0;
  predelta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuoteStatic::~QuoteStatic() {
  SharedDtor();
}

void QuoteStatic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuoteStatic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteStatic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteStatic_descriptor_;
}

const QuoteStatic& QuoteStatic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_md_2eproto();
  return *default_instance_;
}

QuoteStatic* QuoteStatic::default_instance_ = NULL;

QuoteStatic* QuoteStatic::New() const {
  return new QuoteStatic;
}

void QuoteStatic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0u;
    tradeday_ = 0u;
    uplimit_ = 0;
    downlimit_ = 0;
    preinterest_ = GOOGLE_LONGLONG(0);
    preclose_ = 0;
    presettle_ = 0;
    predelta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuoteStatic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tradeday;
        break;
      }

      // required uint32 tradeday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradeday_)));
          set_has_tradeday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_uplimit;
        break;
      }

      // required double uplimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_uplimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uplimit_)));
          set_has_uplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_downlimit;
        break;
      }

      // required double downlimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downlimit_)));
          set_has_downlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_preinterest;
        break;
      }

      // required int64 preinterest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preinterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preinterest_)));
          set_has_preinterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_preclose;
        break;
      }

      // required double preclose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_preclose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_presettle;
        break;
      }

      // required double presettle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_presettle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettle_)));
          set_has_presettle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_predelta;
        break;
      }

      // required double predelta = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_predelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predelta_)));
          set_has_predelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuoteStatic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->date(), output);
  }

  // required uint32 tradeday = 2;
  if (has_tradeday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tradeday(), output);
  }

  // required double uplimit = 3;
  if (has_uplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->uplimit(), output);
  }

  // required double downlimit = 4;
  if (has_downlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->downlimit(), output);
  }

  // required int64 preinterest = 5;
  if (has_preinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->preinterest(), output);
  }

  // required double preclose = 6;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->preclose(), output);
  }

  // required double presettle = 7;
  if (has_presettle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->presettle(), output);
  }

  // required double predelta = 8;
  if (has_predelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->predelta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuoteStatic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->date(), target);
  }

  // required uint32 tradeday = 2;
  if (has_tradeday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tradeday(), target);
  }

  // required double uplimit = 3;
  if (has_uplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->uplimit(), target);
  }

  // required double downlimit = 4;
  if (has_downlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->downlimit(), target);
  }

  // required int64 preinterest = 5;
  if (has_preinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->preinterest(), target);
  }

  // required double preclose = 6;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->preclose(), target);
  }

  // required double presettle = 7;
  if (has_presettle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->presettle(), target);
  }

  // required double predelta = 8;
  if (has_predelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->predelta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuoteStatic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // required uint32 tradeday = 2;
    if (has_tradeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradeday());
    }

    // required double uplimit = 3;
    if (has_uplimit()) {
      total_size += 1 + 8;
    }

    // required double downlimit = 4;
    if (has_downlimit()) {
      total_size += 1 + 8;
    }

    // required int64 preinterest = 5;
    if (has_preinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preinterest());
    }

    // required double preclose = 6;
    if (has_preclose()) {
      total_size += 1 + 8;
    }

    // required double presettle = 7;
    if (has_presettle()) {
      total_size += 1 + 8;
    }

    // required double predelta = 8;
    if (has_predelta()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteStatic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuoteStatic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuoteStatic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuoteStatic::MergeFrom(const QuoteStatic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_tradeday()) {
      set_tradeday(from.tradeday());
    }
    if (from.has_uplimit()) {
      set_uplimit(from.uplimit());
    }
    if (from.has_downlimit()) {
      set_downlimit(from.downlimit());
    }
    if (from.has_preinterest()) {
      set_preinterest(from.preinterest());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
    if (from.has_presettle()) {
      set_presettle(from.presettle());
    }
    if (from.has_predelta()) {
      set_predelta(from.predelta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuoteStatic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteStatic::CopyFrom(const QuoteStatic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteStatic::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void QuoteStatic::Swap(QuoteStatic* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(tradeday_, other->tradeday_);
    std::swap(uplimit_, other->uplimit_);
    std::swap(downlimit_, other->downlimit_);
    std::swap(preinterest_, other->preinterest_);
    std::swap(preclose_, other->preclose_);
    std::swap(presettle_, other->presettle_);
    std::swap(predelta_, other->predelta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuoteStatic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteStatic_descriptor_;
  metadata.reflection = QuoteStatic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketQuoteExData::kRsiTurnoverFieldNumber;
const int MarketQuoteExData::kRsiRocFieldNumber;
const int MarketQuoteExData::kRopFoundFieldNumber;
#endif  // !_MSC_VER

MarketQuoteExData::MarketQuoteExData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketQuoteExData::InitAsDefaultInstance() {
}

MarketQuoteExData::MarketQuoteExData(const MarketQuoteExData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketQuoteExData::SharedCtor() {
  _cached_size_ = 0;
  rsi_turnover_ = 0;
  rsi_roc_ = 0;
  rop_found_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketQuoteExData::~MarketQuoteExData() {
  SharedDtor();
}

void MarketQuoteExData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketQuoteExData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketQuoteExData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketQuoteExData_descriptor_;
}

const MarketQuoteExData& MarketQuoteExData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_md_2eproto();
  return *default_instance_;
}

MarketQuoteExData* MarketQuoteExData::default_instance_ = NULL;

MarketQuoteExData* MarketQuoteExData::New() const {
  return new MarketQuoteExData;
}

void MarketQuoteExData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsi_turnover_ = 0;
    rsi_roc_ = 0;
    rop_found_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketQuoteExData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double rsi_turnover = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rsi_turnover_)));
          set_has_rsi_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_rsi_roc;
        break;
      }

      // optional double rsi_roc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rsi_roc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rsi_roc_)));
          set_has_rsi_roc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_rop_found;
        break;
      }

      // optional double rop_found = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rop_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rop_found_)));
          set_has_rop_found();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketQuoteExData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double rsi_turnover = 1;
  if (has_rsi_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rsi_turnover(), output);
  }

  // optional double rsi_roc = 2;
  if (has_rsi_roc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rsi_roc(), output);
  }

  // optional double rop_found = 3;
  if (has_rop_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rop_found(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketQuoteExData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double rsi_turnover = 1;
  if (has_rsi_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rsi_turnover(), target);
  }

  // optional double rsi_roc = 2;
  if (has_rsi_roc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rsi_roc(), target);
  }

  // optional double rop_found = 3;
  if (has_rop_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rop_found(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketQuoteExData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double rsi_turnover = 1;
    if (has_rsi_turnover()) {
      total_size += 1 + 8;
    }

    // optional double rsi_roc = 2;
    if (has_rsi_roc()) {
      total_size += 1 + 8;
    }

    // optional double rop_found = 3;
    if (has_rop_found()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketQuoteExData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketQuoteExData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketQuoteExData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketQuoteExData::MergeFrom(const MarketQuoteExData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsi_turnover()) {
      set_rsi_turnover(from.rsi_turnover());
    }
    if (from.has_rsi_roc()) {
      set_rsi_roc(from.rsi_roc());
    }
    if (from.has_rop_found()) {
      set_rop_found(from.rop_found());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketQuoteExData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketQuoteExData::CopyFrom(const MarketQuoteExData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketQuoteExData::IsInitialized() const {

  return true;
}

void MarketQuoteExData::Swap(MarketQuoteExData* other) {
  if (other != this) {
    std::swap(rsi_turnover_, other->rsi_turnover_);
    std::swap(rsi_roc_, other->rsi_roc_);
    std::swap(rop_found_, other->rop_found_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketQuoteExData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketQuoteExData_descriptor_;
  metadata.reflection = MarketQuoteExData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketQuote::kJzcodeFieldNumber;
const int MarketQuote::kSymbolFieldNumber;
const int MarketQuote::kTimeFieldNumber;
const int MarketQuote::kOpenFieldNumber;
const int MarketQuote::kHighFieldNumber;
const int MarketQuote::kLowFieldNumber;
const int MarketQuote::kLastFieldNumber;
const int MarketQuote::kVolumeFieldNumber;
const int MarketQuote::kTurnoverFieldNumber;
const int MarketQuote::kInterestFieldNumber;
const int MarketQuote::kCloseFieldNumber;
const int MarketQuote::kSettleFieldNumber;
const int MarketQuote::kDeltaFieldNumber;
const int MarketQuote::kAbFieldNumber;
const int MarketQuote::kQsFieldNumber;
const int MarketQuote::kIopvFieldNumber;
const int MarketQuote::kAvgbidpxFieldNumber;
const int MarketQuote::kTotbidvolFieldNumber;
const int MarketQuote::kAvgaskpxFieldNumber;
const int MarketQuote::kTotaskvolFieldNumber;
const int MarketQuote::kQuoteageFieldNumber;
const int MarketQuote::kExtFieldNumber;
const int MarketQuote::kVwapFieldNumber;
#endif  // !_MSC_VER

MarketQuote::MarketQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketQuote::InitAsDefaultInstance() {
  ab_ = const_cast< ::jzs::msg::md::AskBid*>(&::jzs::msg::md::AskBid::default_instance());
  qs_ = const_cast< ::jzs::msg::md::QuoteStatic*>(&::jzs::msg::md::QuoteStatic::default_instance());
  ext_ = const_cast< ::jzs::msg::md::MarketQuoteExData*>(&::jzs::msg::md::MarketQuoteExData::default_instance());
}

MarketQuote::MarketQuote(const MarketQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketQuote::SharedCtor() {
  _cached_size_ = 0;
  jzcode_ = 0u;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  last_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  turnover_ = 0;
  interest_ = GOOGLE_LONGLONG(0);
  close_ = 0;
  settle_ = 0;
  delta_ = 0;
  ab_ = NULL;
  qs_ = NULL;
  iopv_ = 0;
  avgbidpx_ = 0;
  totbidvol_ = GOOGLE_LONGLONG(0);
  avgaskpx_ = 0;
  totaskvol_ = GOOGLE_LONGLONG(0);
  quoteage_ = 0;
  ext_ = NULL;
  vwap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketQuote::~MarketQuote() {
  SharedDtor();
}

void MarketQuote::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete ab_;
    delete qs_;
    delete ext_;
  }
}

void MarketQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketQuote_descriptor_;
}

const MarketQuote& MarketQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_md_2eproto();
  return *default_instance_;
}

MarketQuote* MarketQuote::default_instance_ = NULL;

MarketQuote* MarketQuote::New() const {
  return new MarketQuote;
}

void MarketQuote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jzcode_ = 0u;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    time_ = 0u;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    last_ = 0;
    volume_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    turnover_ = 0;
    interest_ = GOOGLE_LONGLONG(0);
    close_ = 0;
    settle_ = 0;
    delta_ = 0;
    if (has_ab()) {
      if (ab_ != NULL) ab_->::jzs::msg::md::AskBid::Clear();
    }
    if (has_qs()) {
      if (qs_ != NULL) qs_->::jzs::msg::md::QuoteStatic::Clear();
    }
    iopv_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    avgbidpx_ = 0;
    totbidvol_ = GOOGLE_LONGLONG(0);
    avgaskpx_ = 0;
    totaskvol_ = GOOGLE_LONGLONG(0);
    quoteage_ = 0;
    if (has_ext()) {
      if (ext_ != NULL) ext_->::jzs::msg::md::MarketQuoteExData::Clear();
    }
    vwap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 jzcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jzcode_)));
          set_has_jzcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_open;
        break;
      }

      // required double open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_high;
        break;
      }

      // required double high = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_low;
        break;
      }

      // required double low = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_last;
        break;
      }

      // required double last = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }

      // required int64 volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_turnover;
        break;
      }

      // required double turnover = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_interest;
        break;
      }

      // required int64 interest = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_close;
        break;
      }

      // required double close = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_settle;
        break;
      }

      // required double settle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_settle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settle_)));
          set_has_settle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_delta;
        break;
      }

      // required double delta = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ab;
        break;
      }

      // required .jzs.msg.md.AskBid ab = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ab()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_qs;
        break;
      }

      // required .jzs.msg.md.QuoteStatic qs = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_iopv;
        break;
      }

      // required double iopv = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_iopv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iopv_)));
          set_has_iopv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_avgbidpx;
        break;
      }

      // required double avgbidpx = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avgbidpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgbidpx_)));
          set_has_avgbidpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_totbidvol;
        break;
      }

      // required int64 totbidvol = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totbidvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totbidvol_)));
          set_has_totbidvol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_avgaskpx;
        break;
      }

      // required double avgaskpx = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avgaskpx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avgaskpx_)));
          set_has_avgaskpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_totaskvol;
        break;
      }

      // required int64 totaskvol = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totaskvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaskvol_)));
          set_has_totaskvol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_quoteage;
        break;
      }

      // optional int32 quoteage = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quoteage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteage_)));
          set_has_quoteage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ext;
        break;
      }

      // optional .jzs.msg.md.MarketQuoteExData ext = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_vwap;
        break;
      }

      // optional double vwap = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vwap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vwap_)));
          set_has_vwap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 jzcode = 1;
  if (has_jzcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jzcode(), output);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required double open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->open(), output);
  }

  // required double high = 5;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->high(), output);
  }

  // required double low = 6;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->low(), output);
  }

  // required double last = 7;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->last(), output);
  }

  // required int64 volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->volume(), output);
  }

  // required double turnover = 9;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->turnover(), output);
  }

  // required int64 interest = 10;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->interest(), output);
  }

  // required double close = 11;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->close(), output);
  }

  // required double settle = 12;
  if (has_settle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->settle(), output);
  }

  // required double delta = 13;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->delta(), output);
  }

  // required .jzs.msg.md.AskBid ab = 14;
  if (has_ab()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ab(), output);
  }

  // required .jzs.msg.md.QuoteStatic qs = 15;
  if (has_qs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->qs(), output);
  }

  // required double iopv = 16;
  if (has_iopv()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->iopv(), output);
  }

  // required double avgbidpx = 17;
  if (has_avgbidpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->avgbidpx(), output);
  }

  // required int64 totbidvol = 18;
  if (has_totbidvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->totbidvol(), output);
  }

  // required double avgaskpx = 19;
  if (has_avgaskpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->avgaskpx(), output);
  }

  // required int64 totaskvol = 20;
  if (has_totaskvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->totaskvol(), output);
  }

  // optional int32 quoteage = 21;
  if (has_quoteage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->quoteage(), output);
  }

  // optional .jzs.msg.md.MarketQuoteExData ext = 22;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->ext(), output);
  }

  // optional double vwap = 23;
  if (has_vwap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->vwap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 jzcode = 1;
  if (has_jzcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jzcode(), target);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required double open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->open(), target);
  }

  // required double high = 5;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->high(), target);
  }

  // required double low = 6;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->low(), target);
  }

  // required double last = 7;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->last(), target);
  }

  // required int64 volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->volume(), target);
  }

  // required double turnover = 9;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->turnover(), target);
  }

  // required int64 interest = 10;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->interest(), target);
  }

  // required double close = 11;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->close(), target);
  }

  // required double settle = 12;
  if (has_settle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->settle(), target);
  }

  // required double delta = 13;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->delta(), target);
  }

  // required .jzs.msg.md.AskBid ab = 14;
  if (has_ab()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ab(), target);
  }

  // required .jzs.msg.md.QuoteStatic qs = 15;
  if (has_qs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->qs(), target);
  }

  // required double iopv = 16;
  if (has_iopv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->iopv(), target);
  }

  // required double avgbidpx = 17;
  if (has_avgbidpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->avgbidpx(), target);
  }

  // required int64 totbidvol = 18;
  if (has_totbidvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->totbidvol(), target);
  }

  // required double avgaskpx = 19;
  if (has_avgaskpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->avgaskpx(), target);
  }

  // required int64 totaskvol = 20;
  if (has_totaskvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->totaskvol(), target);
  }

  // optional int32 quoteage = 21;
  if (has_quoteage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->quoteage(), target);
  }

  // optional .jzs.msg.md.MarketQuoteExData ext = 22;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->ext(), target);
  }

  // optional double vwap = 23;
  if (has_vwap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->vwap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketQuote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 jzcode = 1;
    if (has_jzcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jzcode());
    }

    // optional string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required double open = 4;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // required double high = 5;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // required double low = 6;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // required double last = 7;
    if (has_last()) {
      total_size += 1 + 8;
    }

    // required int64 volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double turnover = 9;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // required int64 interest = 10;
    if (has_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interest());
    }

    // required double close = 11;
    if (has_close()) {
      total_size += 1 + 8;
    }

    // required double settle = 12;
    if (has_settle()) {
      total_size += 1 + 8;
    }

    // required double delta = 13;
    if (has_delta()) {
      total_size += 1 + 8;
    }

    // required .jzs.msg.md.AskBid ab = 14;
    if (has_ab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ab());
    }

    // required .jzs.msg.md.QuoteStatic qs = 15;
    if (has_qs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qs());
    }

    // required double iopv = 16;
    if (has_iopv()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double avgbidpx = 17;
    if (has_avgbidpx()) {
      total_size += 2 + 8;
    }

    // required int64 totbidvol = 18;
    if (has_totbidvol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totbidvol());
    }

    // required double avgaskpx = 19;
    if (has_avgaskpx()) {
      total_size += 2 + 8;
    }

    // required int64 totaskvol = 20;
    if (has_totaskvol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totaskvol());
    }

    // optional int32 quoteage = 21;
    if (has_quoteage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteage());
    }

    // optional .jzs.msg.md.MarketQuoteExData ext = 22;
    if (has_ext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }

    // optional double vwap = 23;
    if (has_vwap()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketQuote::MergeFrom(const MarketQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jzcode()) {
      set_jzcode(from.jzcode());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_settle()) {
      set_settle(from.settle());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_ab()) {
      mutable_ab()->::jzs::msg::md::AskBid::MergeFrom(from.ab());
    }
    if (from.has_qs()) {
      mutable_qs()->::jzs::msg::md::QuoteStatic::MergeFrom(from.qs());
    }
    if (from.has_iopv()) {
      set_iopv(from.iopv());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_avgbidpx()) {
      set_avgbidpx(from.avgbidpx());
    }
    if (from.has_totbidvol()) {
      set_totbidvol(from.totbidvol());
    }
    if (from.has_avgaskpx()) {
      set_avgaskpx(from.avgaskpx());
    }
    if (from.has_totaskvol()) {
      set_totaskvol(from.totaskvol());
    }
    if (from.has_quoteage()) {
      set_quoteage(from.quoteage());
    }
    if (from.has_ext()) {
      mutable_ext()->::jzs::msg::md::MarketQuoteExData::MergeFrom(from.ext());
    }
    if (from.has_vwap()) {
      set_vwap(from.vwap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketQuote::CopyFrom(const MarketQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketQuote::IsInitialized() const {
  if ((_has_bits_[0] & 0x000ffffd) != 0x000ffffd) return false;

  if (has_qs()) {
    if (!this->qs().IsInitialized()) return false;
  }
  return true;
}

void MarketQuote::Swap(MarketQuote* other) {
  if (other != this) {
    std::swap(jzcode_, other->jzcode_);
    std::swap(symbol_, other->symbol_);
    std::swap(time_, other->time_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(last_, other->last_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(interest_, other->interest_);
    std::swap(close_, other->close_);
    std::swap(settle_, other->settle_);
    std::swap(delta_, other->delta_);
    std::swap(ab_, other->ab_);
    std::swap(qs_, other->qs_);
    std::swap(iopv_, other->iopv_);
    std::swap(avgbidpx_, other->avgbidpx_);
    std::swap(totbidvol_, other->totbidvol_);
    std::swap(avgaskpx_, other->avgaskpx_);
    std::swap(totaskvol_, other->totaskvol_);
    std::swap(quoteage_, other->quoteage_);
    std::swap(ext_, other->ext_);
    std::swap(vwap_, other->vwap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketQuote_descriptor_;
  metadata.reflection = MarketQuote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataInd::kTypeFieldNumber;
const int MarketDataInd::kStkFieldNumber;
const int MarketDataInd::kFutFieldNumber;
#endif  // !_MSC_VER

MarketDataInd::MarketDataInd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDataInd::InitAsDefaultInstance() {
  stk_ = const_cast< ::jzs::msg::md::MarketQuote*>(&::jzs::msg::md::MarketQuote::default_instance());
  fut_ = const_cast< ::jzs::msg::md::MarketQuote*>(&::jzs::msg::md::MarketQuote::default_instance());
}

MarketDataInd::MarketDataInd(const MarketDataInd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDataInd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  stk_ = NULL;
  fut_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataInd::~MarketDataInd() {
  SharedDtor();
}

void MarketDataInd::SharedDtor() {
  if (this != default_instance_) {
    delete stk_;
    delete fut_;
  }
}

void MarketDataInd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataInd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataInd_descriptor_;
}

const MarketDataInd& MarketDataInd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_md_2eproto();
  return *default_instance_;
}

MarketDataInd* MarketDataInd::default_instance_ = NULL;

MarketDataInd* MarketDataInd::New() const {
  return new MarketDataInd;
}

void MarketDataInd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_stk()) {
      if (stk_ != NULL) stk_->::jzs::msg::md::MarketQuote::Clear();
    }
    if (has_fut()) {
      if (fut_ != NULL) fut_->::jzs::msg::md::MarketQuote::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataInd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jzs.msg.md.MarketDataType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jzs::msg::md::MarketDataType_IsValid(value)) {
            set_type(static_cast< ::jzs::msg::md::MarketDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }

      // optional .jzs.msg.md.MarketQuote stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fut;
        break;
      }

      // optional .jzs.msg.md.MarketQuote fut = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fut()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDataInd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jzs.msg.md.MarketDataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .jzs.msg.md.MarketQuote stk = 2;
  if (has_stk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(), output);
  }

  // optional .jzs.msg.md.MarketQuote fut = 3;
  if (has_fut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fut(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDataInd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .jzs.msg.md.MarketDataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .jzs.msg.md.MarketQuote stk = 2;
  if (has_stk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(), target);
  }

  // optional .jzs.msg.md.MarketQuote fut = 3;
  if (has_fut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fut(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDataInd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jzs.msg.md.MarketDataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .jzs.msg.md.MarketQuote stk = 2;
    if (has_stk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stk());
    }

    // optional .jzs.msg.md.MarketQuote fut = 3;
    if (has_fut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fut());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataInd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataInd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataInd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataInd::MergeFrom(const MarketDataInd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_stk()) {
      mutable_stk()->::jzs::msg::md::MarketQuote::MergeFrom(from.stk());
    }
    if (from.has_fut()) {
      mutable_fut()->::jzs::msg::md::MarketQuote::MergeFrom(from.fut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataInd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataInd::CopyFrom(const MarketDataInd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataInd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_stk()) {
    if (!this->stk().IsInitialized()) return false;
  }
  if (has_fut()) {
    if (!this->fut().IsInitialized()) return false;
  }
  return true;
}

void MarketDataInd::Swap(MarketDataInd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(stk_, other->stk_);
    std::swap(fut_, other->fut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataInd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataInd_descriptor_;
  metadata.reflection = MarketDataInd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace md
}  // namespace msg
}  // namespace jzs

// @@protoc_insertion_point(global_scope)
