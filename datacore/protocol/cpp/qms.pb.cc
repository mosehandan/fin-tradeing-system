// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qms.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jzs {
namespace msg {
namespace qms {

namespace {

const ::google::protobuf::Descriptor* SimpleMarketQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleMarketQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrategyMarketQuotesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrategyMarketQuotesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrategyMarketQuotesRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrategyMarketQuotesRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrategySubscribeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrategySubscribeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrategySubscribeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrategySubscribeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bar1M_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bar1M_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketQuoteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketQuoteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketQuoteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketQuoteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bar1MReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bar1MReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bar1MRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bar1MRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_qms_2eproto() {
  protobuf_AddDesc_qms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "qms.proto");
  GOOGLE_CHECK(file != NULL);
  SimpleMarketQuote_descriptor_ = file->message_type(0);
  static const int SimpleMarketQuote_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, is_empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, ab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, qs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, iopv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, quoteage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, vwap_),
  };
  SimpleMarketQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleMarketQuote_descriptor_,
      SimpleMarketQuote::default_instance_,
      SimpleMarketQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMarketQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleMarketQuote));
  StrategyMarketQuotesReq_descriptor_ = file->message_type(1);
  static const int StrategyMarketQuotesReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesReq, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesReq, strategy_id_),
  };
  StrategyMarketQuotesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrategyMarketQuotesReq_descriptor_,
      StrategyMarketQuotesReq::default_instance_,
      StrategyMarketQuotesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrategyMarketQuotesReq));
  StrategyMarketQuotesRsp_descriptor_ = file->message_type(2);
  static const int StrategyMarketQuotesRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesRsp, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesRsp, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesRsp, quotes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesRsp, middle_age_),
  };
  StrategyMarketQuotesRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrategyMarketQuotesRsp_descriptor_,
      StrategyMarketQuotesRsp::default_instance_,
      StrategyMarketQuotesRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyMarketQuotesRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrategyMarketQuotesRsp));
  StrategySubscribeReq_descriptor_ = file->message_type(3);
  static const int StrategySubscribeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeReq, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeReq, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeReq, symbols_),
  };
  StrategySubscribeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrategySubscribeReq_descriptor_,
      StrategySubscribeReq::default_instance_,
      StrategySubscribeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrategySubscribeReq));
  StrategySubscribeRsp_descriptor_ = file->message_type(4);
  static const int StrategySubscribeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeRsp, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeRsp, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeRsp, err_symbols_),
  };
  StrategySubscribeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrategySubscribeRsp_descriptor_,
      StrategySubscribeRsp::default_instance_,
      StrategySubscribeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategySubscribeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrategySubscribeRsp));
  Bar_descriptor_ = file->message_type(5);
  static const int Bar_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, match_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, volume_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, turnover_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, interest_inc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, vwap_),
  };
  Bar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bar_descriptor_,
      Bar::default_instance_,
      Bar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bar));
  Bar1M_descriptor_ = file->message_type(6);
  static const int Bar1M_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1M, bar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1M, last_),
  };
  Bar1M_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bar1M_descriptor_,
      Bar1M::default_instance_,
      Bar1M_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1M, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1M, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bar1M));
  MarketQuoteReq_descriptor_ = file->message_type(7);
  static const int MarketQuoteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteReq, symbol_),
  };
  MarketQuoteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketQuoteReq_descriptor_,
      MarketQuoteReq::default_instance_,
      MarketQuoteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketQuoteReq));
  MarketQuoteRsp_descriptor_ = file->message_type(8);
  static const int MarketQuoteRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteRsp, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteRsp, data_),
  };
  MarketQuoteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketQuoteRsp_descriptor_,
      MarketQuoteRsp::default_instance_,
      MarketQuoteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketQuoteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketQuoteRsp));
  Bar1MReq_descriptor_ = file->message_type(9);
  static const int Bar1MReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MReq, symbol_),
  };
  Bar1MReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bar1MReq_descriptor_,
      Bar1MReq::default_instance_,
      Bar1MReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bar1MReq));
  Bar1MRsp_descriptor_ = file->message_type(10);
  static const int Bar1MRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MRsp, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MRsp, data_),
  };
  Bar1MRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bar1MRsp_descriptor_,
      Bar1MRsp::default_instance_,
      Bar1MRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bar1MRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bar1MRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_qms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleMarketQuote_descriptor_, &SimpleMarketQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrategyMarketQuotesReq_descriptor_, &StrategyMarketQuotesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrategyMarketQuotesRsp_descriptor_, &StrategyMarketQuotesRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrategySubscribeReq_descriptor_, &StrategySubscribeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrategySubscribeRsp_descriptor_, &StrategySubscribeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bar_descriptor_, &Bar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bar1M_descriptor_, &Bar1M::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketQuoteReq_descriptor_, &MarketQuoteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketQuoteRsp_descriptor_, &MarketQuoteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bar1MReq_descriptor_, &Bar1MReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bar1MRsp_descriptor_, &Bar1MRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_qms_2eproto() {
  delete SimpleMarketQuote::default_instance_;
  delete SimpleMarketQuote_reflection_;
  delete StrategyMarketQuotesReq::default_instance_;
  delete StrategyMarketQuotesReq_reflection_;
  delete StrategyMarketQuotesRsp::default_instance_;
  delete StrategyMarketQuotesRsp_reflection_;
  delete StrategySubscribeReq::default_instance_;
  delete StrategySubscribeReq_reflection_;
  delete StrategySubscribeRsp::default_instance_;
  delete StrategySubscribeRsp_reflection_;
  delete Bar::default_instance_;
  delete Bar_reflection_;
  delete Bar1M::default_instance_;
  delete Bar1M_reflection_;
  delete MarketQuoteReq::default_instance_;
  delete MarketQuoteReq_reflection_;
  delete MarketQuoteRsp::default_instance_;
  delete MarketQuoteRsp_reflection_;
  delete Bar1MReq::default_instance_;
  delete Bar1MReq_reflection_;
  delete Bar1MRsp::default_instance_;
  delete Bar1MRsp_reflection_;
}

void protobuf_AddDesc_qms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::jzs::msg::md::protobuf_AddDesc_md_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tqms.proto\022\013jzs.msg.qms\032\010md.proto\"\241\002\n\021S"
    "impleMarketQuote\022\020\n\010is_empty\030\001 \002(\010\022\016\n\006sy"
    "mbol\030\002 \002(\t\022\014\n\004time\030\003 \002(\005\022\014\n\004open\030\004 \002(\001\022\014"
    "\n\004high\030\005 \002(\001\022\013\n\003low\030\006 \002(\001\022\014\n\004last\030\007 \002(\001\022"
    "\016\n\006volume\030\010 \002(\003\022\020\n\010turnover\030\t \002(\001\022\020\n\010int"
    "erest\030\n \002(\003\022\036\n\002ab\030\013 \002(\0132\022.jzs.msg.md.Ask"
    "Bid\022#\n\002qs\030\014 \002(\0132\027.jzs.msg.md.QuoteStatic"
    "\022\014\n\004iopv\030\r \002(\001\022\020\n\010quoteage\030\016 \001(\005\022\014\n\004vwap"
    "\030\017 \001(\001\">\n\027StrategyMarketQuotesReq\022\016\n\006req"
    "_id\030\001 \002(\r\022\023\n\013strategy_id\030\002 \002(\r\"\222\001\n\027Strat"
    "egyMarketQuotesRsp\022\016\n\006req_id\030\001 \002(\r\022\023\n\013st"
    "rategy_id\030\002 \002(\r\022\016\n\006result\030\003 \002(\010\022.\n\006quote"
    "s\030\004 \003(\0132\036.jzs.msg.qms.SimpleMarketQuote\022"
    "\022\n\nmiddle_age\030\005 \001(\005\"L\n\024StrategySubscribe"
    "Req\022\016\n\006req_id\030\001 \002(\r\022\023\n\013strategy_id\030\002 \002(\r"
    "\022\017\n\007symbols\030\003 \003(\t\"`\n\024StrategySubscribeRs"
    "p\022\016\n\006req_id\030\001 \002(\r\022\023\n\013strategy_id\030\002 \002(\r\022\016"
    "\n\006result\030\003 \002(\010\022\023\n\013err_symbols\030\004 \003(\t\"\375\001\n\003"
    "Bar\022\014\n\004date\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\014\n\004open\030"
    "\003 \002(\001\022\014\n\004high\030\004 \002(\001\022\013\n\003low\030\005 \002(\001\022\r\n\005clos"
    "e\030\006 \002(\001\022\016\n\006volume\030\007 \002(\001\022\020\n\010turnover\030\010 \002("
    "\001\022\022\n\nmatch_item\030\t \002(\r\022\020\n\010interest\030\n \002(\r\022"
    "\014\n\004flag\030\013 \001(\r\022\022\n\nvolume_inc\030\014 \001(\001\022\024\n\014tur"
    "nover_inc\030\r \001(\001\022\024\n\014interest_inc\030\016 \001(\003\022\014\n"
    "\004vwap\030\017 \001(\001\"M\n\005Bar1M\022\035\n\003bar\030\001 \003(\0132\020.jzs."
    "msg.qms.Bar\022%\n\004last\030\002 \002(\0132\027.jzs.msg.md.M"
    "arketQuote\" \n\016MarketQuoteReq\022\016\n\006symbol\030\001"
    " \002(\t\"W\n\016MarketQuoteRsp\022\016\n\006symbol\030\001 \002(\t\022\016"
    "\n\006result\030\003 \002(\010\022%\n\004data\030\004 \001(\0132\027.jzs.msg.m"
    "d.MarketQuote\"\032\n\010Bar1MReq\022\016\n\006symbol\030\001 \002("
    "\t\"L\n\010Bar1MRsp\022\016\n\006symbol\030\001 \002(\t\022\016\n\006result\030"
    "\002 \002(\010\022 \n\004data\030\003 \001(\0132\022.jzs.msg.qms.Bar1M", 1279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qms.proto", &protobuf_RegisterTypes);
  SimpleMarketQuote::default_instance_ = new SimpleMarketQuote();
  StrategyMarketQuotesReq::default_instance_ = new StrategyMarketQuotesReq();
  StrategyMarketQuotesRsp::default_instance_ = new StrategyMarketQuotesRsp();
  StrategySubscribeReq::default_instance_ = new StrategySubscribeReq();
  StrategySubscribeRsp::default_instance_ = new StrategySubscribeRsp();
  Bar::default_instance_ = new Bar();
  Bar1M::default_instance_ = new Bar1M();
  MarketQuoteReq::default_instance_ = new MarketQuoteReq();
  MarketQuoteRsp::default_instance_ = new MarketQuoteRsp();
  Bar1MReq::default_instance_ = new Bar1MReq();
  Bar1MRsp::default_instance_ = new Bar1MRsp();
  SimpleMarketQuote::default_instance_->InitAsDefaultInstance();
  StrategyMarketQuotesReq::default_instance_->InitAsDefaultInstance();
  StrategyMarketQuotesRsp::default_instance_->InitAsDefaultInstance();
  StrategySubscribeReq::default_instance_->InitAsDefaultInstance();
  StrategySubscribeRsp::default_instance_->InitAsDefaultInstance();
  Bar::default_instance_->InitAsDefaultInstance();
  Bar1M::default_instance_->InitAsDefaultInstance();
  MarketQuoteReq::default_instance_->InitAsDefaultInstance();
  MarketQuoteRsp::default_instance_->InitAsDefaultInstance();
  Bar1MReq::default_instance_->InitAsDefaultInstance();
  Bar1MRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_qms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_qms_2eproto {
  StaticDescriptorInitializer_qms_2eproto() {
    protobuf_AddDesc_qms_2eproto();
  }
} static_descriptor_initializer_qms_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SimpleMarketQuote::kIsEmptyFieldNumber;
const int SimpleMarketQuote::kSymbolFieldNumber;
const int SimpleMarketQuote::kTimeFieldNumber;
const int SimpleMarketQuote::kOpenFieldNumber;
const int SimpleMarketQuote::kHighFieldNumber;
const int SimpleMarketQuote::kLowFieldNumber;
const int SimpleMarketQuote::kLastFieldNumber;
const int SimpleMarketQuote::kVolumeFieldNumber;
const int SimpleMarketQuote::kTurnoverFieldNumber;
const int SimpleMarketQuote::kInterestFieldNumber;
const int SimpleMarketQuote::kAbFieldNumber;
const int SimpleMarketQuote::kQsFieldNumber;
const int SimpleMarketQuote::kIopvFieldNumber;
const int SimpleMarketQuote::kQuoteageFieldNumber;
const int SimpleMarketQuote::kVwapFieldNumber;
#endif  // !_MSC_VER

SimpleMarketQuote::SimpleMarketQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleMarketQuote::InitAsDefaultInstance() {
  ab_ = const_cast< ::jzs::msg::md::AskBid*>(&::jzs::msg::md::AskBid::default_instance());
  qs_ = const_cast< ::jzs::msg::md::QuoteStatic*>(&::jzs::msg::md::QuoteStatic::default_instance());
}

SimpleMarketQuote::SimpleMarketQuote(const SimpleMarketQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleMarketQuote::SharedCtor() {
  _cached_size_ = 0;
  is_empty_ = false;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  last_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  turnover_ = 0;
  interest_ = GOOGLE_LONGLONG(0);
  ab_ = NULL;
  qs_ = NULL;
  iopv_ = 0;
  quoteage_ = 0;
  vwap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleMarketQuote::~SimpleMarketQuote() {
  SharedDtor();
}

void SimpleMarketQuote::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete ab_;
    delete qs_;
  }
}

void SimpleMarketQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMarketQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleMarketQuote_descriptor_;
}

const SimpleMarketQuote& SimpleMarketQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

SimpleMarketQuote* SimpleMarketQuote::default_instance_ = NULL;

SimpleMarketQuote* SimpleMarketQuote::New() const {
  return new SimpleMarketQuote;
}

void SimpleMarketQuote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_empty_ = false;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    time_ = 0;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    last_ = 0;
    volume_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    turnover_ = 0;
    interest_ = GOOGLE_LONGLONG(0);
    if (has_ab()) {
      if (ab_ != NULL) ab_->::jzs::msg::md::AskBid::Clear();
    }
    if (has_qs()) {
      if (qs_ != NULL) qs_->::jzs::msg::md::QuoteStatic::Clear();
    }
    iopv_ = 0;
    quoteage_ = 0;
    vwap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleMarketQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_empty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_empty_)));
          set_has_is_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_open;
        break;
      }

      // required double open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_high;
        break;
      }

      // required double high = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_low;
        break;
      }

      // required double low = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_last;
        break;
      }

      // required double last = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_)));
          set_has_last();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }

      // required int64 volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_turnover;
        break;
      }

      // required double turnover = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_interest;
        break;
      }

      // required int64 interest = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ab;
        break;
      }

      // required .jzs.msg.md.AskBid ab = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ab()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_qs;
        break;
      }

      // required .jzs.msg.md.QuoteStatic qs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_iopv;
        break;
      }

      // required double iopv = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_iopv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iopv_)));
          set_has_iopv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_quoteage;
        break;
      }

      // optional int32 quoteage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quoteage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteage_)));
          set_has_quoteage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_vwap;
        break;
      }

      // optional double vwap = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vwap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vwap_)));
          set_has_vwap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleMarketQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_empty = 1;
  if (has_is_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_empty(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // required double open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->open(), output);
  }

  // required double high = 5;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->high(), output);
  }

  // required double low = 6;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->low(), output);
  }

  // required double last = 7;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->last(), output);
  }

  // required int64 volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->volume(), output);
  }

  // required double turnover = 9;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->turnover(), output);
  }

  // required int64 interest = 10;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->interest(), output);
  }

  // required .jzs.msg.md.AskBid ab = 11;
  if (has_ab()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ab(), output);
  }

  // required .jzs.msg.md.QuoteStatic qs = 12;
  if (has_qs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->qs(), output);
  }

  // required double iopv = 13;
  if (has_iopv()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->iopv(), output);
  }

  // optional int32 quoteage = 14;
  if (has_quoteage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->quoteage(), output);
  }

  // optional double vwap = 15;
  if (has_vwap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->vwap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleMarketQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_empty = 1;
  if (has_is_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_empty(), target);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // required double open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->open(), target);
  }

  // required double high = 5;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->high(), target);
  }

  // required double low = 6;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->low(), target);
  }

  // required double last = 7;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->last(), target);
  }

  // required int64 volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->volume(), target);
  }

  // required double turnover = 9;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->turnover(), target);
  }

  // required int64 interest = 10;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->interest(), target);
  }

  // required .jzs.msg.md.AskBid ab = 11;
  if (has_ab()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ab(), target);
  }

  // required .jzs.msg.md.QuoteStatic qs = 12;
  if (has_qs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->qs(), target);
  }

  // required double iopv = 13;
  if (has_iopv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->iopv(), target);
  }

  // optional int32 quoteage = 14;
  if (has_quoteage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->quoteage(), target);
  }

  // optional double vwap = 15;
  if (has_vwap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->vwap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleMarketQuote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_empty = 1;
    if (has_is_empty()) {
      total_size += 1 + 1;
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required double open = 4;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // required double high = 5;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // required double low = 6;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // required double last = 7;
    if (has_last()) {
      total_size += 1 + 8;
    }

    // required int64 volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double turnover = 9;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // required int64 interest = 10;
    if (has_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interest());
    }

    // required .jzs.msg.md.AskBid ab = 11;
    if (has_ab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ab());
    }

    // required .jzs.msg.md.QuoteStatic qs = 12;
    if (has_qs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qs());
    }

    // required double iopv = 13;
    if (has_iopv()) {
      total_size += 1 + 8;
    }

    // optional int32 quoteage = 14;
    if (has_quoteage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteage());
    }

    // optional double vwap = 15;
    if (has_vwap()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMarketQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleMarketQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleMarketQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleMarketQuote::MergeFrom(const SimpleMarketQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_empty()) {
      set_is_empty(from.is_empty());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_last()) {
      set_last(from.last());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_ab()) {
      mutable_ab()->::jzs::msg::md::AskBid::MergeFrom(from.ab());
    }
    if (from.has_qs()) {
      mutable_qs()->::jzs::msg::md::QuoteStatic::MergeFrom(from.qs());
    }
    if (from.has_iopv()) {
      set_iopv(from.iopv());
    }
    if (from.has_quoteage()) {
      set_quoteage(from.quoteage());
    }
    if (from.has_vwap()) {
      set_vwap(from.vwap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleMarketQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMarketQuote::CopyFrom(const SimpleMarketQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMarketQuote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  if (has_qs()) {
    if (!this->qs().IsInitialized()) return false;
  }
  return true;
}

void SimpleMarketQuote::Swap(SimpleMarketQuote* other) {
  if (other != this) {
    std::swap(is_empty_, other->is_empty_);
    std::swap(symbol_, other->symbol_);
    std::swap(time_, other->time_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(last_, other->last_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(interest_, other->interest_);
    std::swap(ab_, other->ab_);
    std::swap(qs_, other->qs_);
    std::swap(iopv_, other->iopv_);
    std::swap(quoteage_, other->quoteage_);
    std::swap(vwap_, other->vwap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleMarketQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleMarketQuote_descriptor_;
  metadata.reflection = SimpleMarketQuote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrategyMarketQuotesReq::kReqIdFieldNumber;
const int StrategyMarketQuotesReq::kStrategyIdFieldNumber;
#endif  // !_MSC_VER

StrategyMarketQuotesReq::StrategyMarketQuotesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrategyMarketQuotesReq::InitAsDefaultInstance() {
}

StrategyMarketQuotesReq::StrategyMarketQuotesReq(const StrategyMarketQuotesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrategyMarketQuotesReq::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = 0u;
  strategy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrategyMarketQuotesReq::~StrategyMarketQuotesReq() {
  SharedDtor();
}

void StrategyMarketQuotesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrategyMarketQuotesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrategyMarketQuotesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategyMarketQuotesReq_descriptor_;
}

const StrategyMarketQuotesReq& StrategyMarketQuotesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

StrategyMarketQuotesReq* StrategyMarketQuotesReq::default_instance_ = NULL;

StrategyMarketQuotesReq* StrategyMarketQuotesReq::New() const {
  return new StrategyMarketQuotesReq;
}

void StrategyMarketQuotesReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_id_ = 0u;
    strategy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrategyMarketQuotesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strategy_id;
        break;
      }

      // required uint32 strategy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_id_)));
          set_has_strategy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrategyMarketQuotesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strategy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrategyMarketQuotesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strategy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrategyMarketQuotesReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // required uint32 strategy_id = 2;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrategyMarketQuotesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrategyMarketQuotesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrategyMarketQuotesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrategyMarketQuotesReq::MergeFrom(const StrategyMarketQuotesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrategyMarketQuotesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategyMarketQuotesReq::CopyFrom(const StrategyMarketQuotesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategyMarketQuotesReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StrategyMarketQuotesReq::Swap(StrategyMarketQuotesReq* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrategyMarketQuotesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrategyMarketQuotesReq_descriptor_;
  metadata.reflection = StrategyMarketQuotesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrategyMarketQuotesRsp::kReqIdFieldNumber;
const int StrategyMarketQuotesRsp::kStrategyIdFieldNumber;
const int StrategyMarketQuotesRsp::kResultFieldNumber;
const int StrategyMarketQuotesRsp::kQuotesFieldNumber;
const int StrategyMarketQuotesRsp::kMiddleAgeFieldNumber;
#endif  // !_MSC_VER

StrategyMarketQuotesRsp::StrategyMarketQuotesRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrategyMarketQuotesRsp::InitAsDefaultInstance() {
}

StrategyMarketQuotesRsp::StrategyMarketQuotesRsp(const StrategyMarketQuotesRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrategyMarketQuotesRsp::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = 0u;
  strategy_id_ = 0u;
  result_ = false;
  middle_age_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrategyMarketQuotesRsp::~StrategyMarketQuotesRsp() {
  SharedDtor();
}

void StrategyMarketQuotesRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrategyMarketQuotesRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrategyMarketQuotesRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategyMarketQuotesRsp_descriptor_;
}

const StrategyMarketQuotesRsp& StrategyMarketQuotesRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

StrategyMarketQuotesRsp* StrategyMarketQuotesRsp::default_instance_ = NULL;

StrategyMarketQuotesRsp* StrategyMarketQuotesRsp::New() const {
  return new StrategyMarketQuotesRsp;
}

void StrategyMarketQuotesRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_id_ = 0u;
    strategy_id_ = 0u;
    result_ = false;
    middle_age_ = 0;
  }
  quotes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrategyMarketQuotesRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strategy_id;
        break;
      }

      // required uint32 strategy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_id_)));
          set_has_strategy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quotes;
        break;
      }

      // repeated .jzs.msg.qms.SimpleMarketQuote quotes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quotes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quotes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quotes;
        if (input->ExpectTag(40)) goto parse_middle_age;
        break;
      }

      // optional int32 middle_age = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_middle_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &middle_age_)));
          set_has_middle_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrategyMarketQuotesRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strategy_id(), output);
  }

  // required bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  // repeated .jzs.msg.qms.SimpleMarketQuote quotes = 4;
  for (int i = 0; i < this->quotes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->quotes(i), output);
  }

  // optional int32 middle_age = 5;
  if (has_middle_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->middle_age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrategyMarketQuotesRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strategy_id(), target);
  }

  // required bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  // repeated .jzs.msg.qms.SimpleMarketQuote quotes = 4;
  for (int i = 0; i < this->quotes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->quotes(i), target);
  }

  // optional int32 middle_age = 5;
  if (has_middle_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->middle_age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrategyMarketQuotesRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // required uint32 strategy_id = 2;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy_id());
    }

    // required bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional int32 middle_age = 5;
    if (has_middle_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->middle_age());
    }

  }
  // repeated .jzs.msg.qms.SimpleMarketQuote quotes = 4;
  total_size += 1 * this->quotes_size();
  for (int i = 0; i < this->quotes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quotes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrategyMarketQuotesRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrategyMarketQuotesRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrategyMarketQuotesRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrategyMarketQuotesRsp::MergeFrom(const StrategyMarketQuotesRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  quotes_.MergeFrom(from.quotes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_middle_age()) {
      set_middle_age(from.middle_age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrategyMarketQuotesRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategyMarketQuotesRsp::CopyFrom(const StrategyMarketQuotesRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategyMarketQuotesRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < quotes_size(); i++) {
    if (!this->quotes(i).IsInitialized()) return false;
  }
  return true;
}

void StrategyMarketQuotesRsp::Swap(StrategyMarketQuotesRsp* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(result_, other->result_);
    quotes_.Swap(&other->quotes_);
    std::swap(middle_age_, other->middle_age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrategyMarketQuotesRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrategyMarketQuotesRsp_descriptor_;
  metadata.reflection = StrategyMarketQuotesRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrategySubscribeReq::kReqIdFieldNumber;
const int StrategySubscribeReq::kStrategyIdFieldNumber;
const int StrategySubscribeReq::kSymbolsFieldNumber;
#endif  // !_MSC_VER

StrategySubscribeReq::StrategySubscribeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrategySubscribeReq::InitAsDefaultInstance() {
}

StrategySubscribeReq::StrategySubscribeReq(const StrategySubscribeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrategySubscribeReq::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = 0u;
  strategy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrategySubscribeReq::~StrategySubscribeReq() {
  SharedDtor();
}

void StrategySubscribeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrategySubscribeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrategySubscribeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategySubscribeReq_descriptor_;
}

const StrategySubscribeReq& StrategySubscribeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

StrategySubscribeReq* StrategySubscribeReq::default_instance_ = NULL;

StrategySubscribeReq* StrategySubscribeReq::New() const {
  return new StrategySubscribeReq;
}

void StrategySubscribeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_id_ = 0u;
    strategy_id_ = 0u;
  }
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrategySubscribeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strategy_id;
        break;
      }

      // required uint32 strategy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_id_)));
          set_has_strategy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_symbols;
        break;
      }

      // repeated string symbols = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_symbols()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbols(this->symbols_size() - 1).data(),
            this->symbols(this->symbols_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrategySubscribeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strategy_id(), output);
  }

  // repeated string symbols = 3;
  for (int i = 0; i < this->symbols_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->symbols(i).data(), this->symbols(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->symbols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrategySubscribeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strategy_id(), target);
  }

  // repeated string symbols = 3;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbols(i).data(), this->symbols(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->symbols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrategySubscribeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // required uint32 strategy_id = 2;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy_id());
    }

  }
  // repeated string symbols = 3;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrategySubscribeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrategySubscribeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrategySubscribeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrategySubscribeReq::MergeFrom(const StrategySubscribeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrategySubscribeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategySubscribeReq::CopyFrom(const StrategySubscribeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategySubscribeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StrategySubscribeReq::Swap(StrategySubscribeReq* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(strategy_id_, other->strategy_id_);
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrategySubscribeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrategySubscribeReq_descriptor_;
  metadata.reflection = StrategySubscribeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrategySubscribeRsp::kReqIdFieldNumber;
const int StrategySubscribeRsp::kStrategyIdFieldNumber;
const int StrategySubscribeRsp::kResultFieldNumber;
const int StrategySubscribeRsp::kErrSymbolsFieldNumber;
#endif  // !_MSC_VER

StrategySubscribeRsp::StrategySubscribeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrategySubscribeRsp::InitAsDefaultInstance() {
}

StrategySubscribeRsp::StrategySubscribeRsp(const StrategySubscribeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrategySubscribeRsp::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = 0u;
  strategy_id_ = 0u;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrategySubscribeRsp::~StrategySubscribeRsp() {
  SharedDtor();
}

void StrategySubscribeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrategySubscribeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrategySubscribeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategySubscribeRsp_descriptor_;
}

const StrategySubscribeRsp& StrategySubscribeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

StrategySubscribeRsp* StrategySubscribeRsp::default_instance_ = NULL;

StrategySubscribeRsp* StrategySubscribeRsp::New() const {
  return new StrategySubscribeRsp;
}

void StrategySubscribeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_id_ = 0u;
    strategy_id_ = 0u;
    result_ = false;
  }
  err_symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrategySubscribeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_id_)));
          set_has_req_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strategy_id;
        break;
      }

      // required uint32 strategy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_id_)));
          set_has_strategy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err_symbols;
        break;
      }

      // repeated string err_symbols = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_err_symbols()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_symbols(this->err_symbols_size() - 1).data(),
            this->err_symbols(this->err_symbols_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err_symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrategySubscribeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->req_id(), output);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->strategy_id(), output);
  }

  // required bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  // repeated string err_symbols = 4;
  for (int i = 0; i < this->err_symbols_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->err_symbols(i).data(), this->err_symbols(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err_symbols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrategySubscribeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 req_id = 1;
  if (has_req_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->req_id(), target);
  }

  // required uint32 strategy_id = 2;
  if (has_strategy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->strategy_id(), target);
  }

  // required bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  // repeated string err_symbols = 4;
  for (int i = 0; i < this->err_symbols_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_symbols(i).data(), this->err_symbols(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->err_symbols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrategySubscribeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_id());
    }

    // required uint32 strategy_id = 2;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy_id());
    }

    // required bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated string err_symbols = 4;
  total_size += 1 * this->err_symbols_size();
  for (int i = 0; i < this->err_symbols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->err_symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrategySubscribeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrategySubscribeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrategySubscribeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrategySubscribeRsp::MergeFrom(const StrategySubscribeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  err_symbols_.MergeFrom(from.err_symbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrategySubscribeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategySubscribeRsp::CopyFrom(const StrategySubscribeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategySubscribeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StrategySubscribeRsp::Swap(StrategySubscribeRsp* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(result_, other->result_);
    err_symbols_.Swap(&other->err_symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrategySubscribeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrategySubscribeRsp_descriptor_;
  metadata.reflection = StrategySubscribeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bar::kDateFieldNumber;
const int Bar::kTimeFieldNumber;
const int Bar::kOpenFieldNumber;
const int Bar::kHighFieldNumber;
const int Bar::kLowFieldNumber;
const int Bar::kCloseFieldNumber;
const int Bar::kVolumeFieldNumber;
const int Bar::kTurnoverFieldNumber;
const int Bar::kMatchItemFieldNumber;
const int Bar::kInterestFieldNumber;
const int Bar::kFlagFieldNumber;
const int Bar::kVolumeIncFieldNumber;
const int Bar::kTurnoverIncFieldNumber;
const int Bar::kInterestIncFieldNumber;
const int Bar::kVwapFieldNumber;
#endif  // !_MSC_VER

Bar::Bar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bar::InitAsDefaultInstance() {
}

Bar::Bar(const Bar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bar::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0u;
  time_ = 0u;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  volume_ = 0;
  turnover_ = 0;
  match_item_ = 0u;
  interest_ = 0u;
  flag_ = 0u;
  volume_inc_ = 0;
  turnover_inc_ = 0;
  interest_inc_ = GOOGLE_LONGLONG(0);
  vwap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bar::~Bar() {
  SharedDtor();
}

void Bar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bar_descriptor_;
}

const Bar& Bar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

Bar* Bar::default_instance_ = NULL;

Bar* Bar::New() const {
  return new Bar;
}

void Bar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0u;
    time_ = 0u;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    volume_ = 0;
    turnover_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    match_item_ = 0u;
    interest_ = 0u;
    flag_ = 0u;
    volume_inc_ = 0;
    turnover_inc_ = 0;
    interest_inc_ = GOOGLE_LONGLONG(0);
    vwap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_open;
        break;
      }

      // required double open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_high;
        break;
      }

      // required double high = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_low;
        break;
      }

      // required double low = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_close;
        break;
      }

      // required double close = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_volume;
        break;
      }

      // required double volume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_turnover;
        break;
      }

      // required double turnover = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_match_item;
        break;
      }

      // required uint32 match_item = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_item_)));
          set_has_match_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_interest;
        break;
      }

      // required uint32 interest = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_volume_inc;
        break;
      }

      // optional double volume_inc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_volume_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_inc_)));
          set_has_volume_inc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_turnover_inc;
        break;
      }

      // optional double turnover_inc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_turnover_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_inc_)));
          set_has_turnover_inc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_interest_inc;
        break;
      }

      // optional int64 interest_inc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interest_inc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interest_inc_)));
          set_has_interest_inc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_vwap;
        break;
      }

      // optional double vwap = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vwap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vwap_)));
          set_has_vwap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->date(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required double open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->open(), output);
  }

  // required double high = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high(), output);
  }

  // required double low = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low(), output);
  }

  // required double close = 6;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->close(), output);
  }

  // required double volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->volume(), output);
  }

  // required double turnover = 8;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->turnover(), output);
  }

  // required uint32 match_item = 9;
  if (has_match_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->match_item(), output);
  }

  // required uint32 interest = 10;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->interest(), output);
  }

  // optional uint32 flag = 11;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flag(), output);
  }

  // optional double volume_inc = 12;
  if (has_volume_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->volume_inc(), output);
  }

  // optional double turnover_inc = 13;
  if (has_turnover_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->turnover_inc(), output);
  }

  // optional int64 interest_inc = 14;
  if (has_interest_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->interest_inc(), output);
  }

  // optional double vwap = 15;
  if (has_vwap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->vwap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->date(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required double open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->open(), target);
  }

  // required double high = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high(), target);
  }

  // required double low = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low(), target);
  }

  // required double close = 6;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->close(), target);
  }

  // required double volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->volume(), target);
  }

  // required double turnover = 8;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->turnover(), target);
  }

  // required uint32 match_item = 9;
  if (has_match_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->match_item(), target);
  }

  // required uint32 interest = 10;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->interest(), target);
  }

  // optional uint32 flag = 11;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flag(), target);
  }

  // optional double volume_inc = 12;
  if (has_volume_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->volume_inc(), target);
  }

  // optional double turnover_inc = 13;
  if (has_turnover_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->turnover_inc(), target);
  }

  // optional int64 interest_inc = 14;
  if (has_interest_inc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->interest_inc(), target);
  }

  // optional double vwap = 15;
  if (has_vwap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->vwap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required double open = 3;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // required double high = 4;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // required double low = 5;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // required double close = 6;
    if (has_close()) {
      total_size += 1 + 8;
    }

    // required double volume = 7;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // required double turnover = 8;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 match_item = 9;
    if (has_match_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_item());
    }

    // required uint32 interest = 10;
    if (has_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interest());
    }

    // optional uint32 flag = 11;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional double volume_inc = 12;
    if (has_volume_inc()) {
      total_size += 1 + 8;
    }

    // optional double turnover_inc = 13;
    if (has_turnover_inc()) {
      total_size += 1 + 8;
    }

    // optional int64 interest_inc = 14;
    if (has_interest_inc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interest_inc());
    }

    // optional double vwap = 15;
    if (has_vwap()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bar::MergeFrom(const Bar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_match_item()) {
      set_match_item(from.match_item());
    }
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_volume_inc()) {
      set_volume_inc(from.volume_inc());
    }
    if (from.has_turnover_inc()) {
      set_turnover_inc(from.turnover_inc());
    }
    if (from.has_interest_inc()) {
      set_interest_inc(from.interest_inc());
    }
    if (from.has_vwap()) {
      set_vwap(from.vwap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bar::CopyFrom(const Bar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bar::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Bar::Swap(Bar* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(match_item_, other->match_item_);
    std::swap(interest_, other->interest_);
    std::swap(flag_, other->flag_);
    std::swap(volume_inc_, other->volume_inc_);
    std::swap(turnover_inc_, other->turnover_inc_);
    std::swap(interest_inc_, other->interest_inc_);
    std::swap(vwap_, other->vwap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bar_descriptor_;
  metadata.reflection = Bar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bar1M::kBarFieldNumber;
const int Bar1M::kLastFieldNumber;
#endif  // !_MSC_VER

Bar1M::Bar1M()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bar1M::InitAsDefaultInstance() {
  last_ = const_cast< ::jzs::msg::md::MarketQuote*>(&::jzs::msg::md::MarketQuote::default_instance());
}

Bar1M::Bar1M(const Bar1M& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bar1M::SharedCtor() {
  _cached_size_ = 0;
  last_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bar1M::~Bar1M() {
  SharedDtor();
}

void Bar1M::SharedDtor() {
  if (this != default_instance_) {
    delete last_;
  }
}

void Bar1M::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bar1M::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bar1M_descriptor_;
}

const Bar1M& Bar1M::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

Bar1M* Bar1M::default_instance_ = NULL;

Bar1M* Bar1M::New() const {
  return new Bar1M;
}

void Bar1M::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_last()) {
      if (last_ != NULL) last_->::jzs::msg::md::MarketQuote::Clear();
    }
  }
  bar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bar1M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jzs.msg.qms.Bar bar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bar;
        if (input->ExpectTag(18)) goto parse_last;
        break;
      }

      // required .jzs.msg.md.MarketQuote last = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bar1M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .jzs.msg.qms.Bar bar = 1;
  for (int i = 0; i < this->bar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bar(i), output);
  }

  // required .jzs.msg.md.MarketQuote last = 2;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->last(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bar1M::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .jzs.msg.qms.Bar bar = 1;
  for (int i = 0; i < this->bar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bar(i), target);
  }

  // required .jzs.msg.md.MarketQuote last = 2;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->last(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bar1M::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .jzs.msg.md.MarketQuote last = 2;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last());
    }

  }
  // repeated .jzs.msg.qms.Bar bar = 1;
  total_size += 1 * this->bar_size();
  for (int i = 0; i < this->bar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bar1M::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bar1M* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bar1M*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bar1M::MergeFrom(const Bar1M& from) {
  GOOGLE_CHECK_NE(&from, this);
  bar_.MergeFrom(from.bar_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last()) {
      mutable_last()->::jzs::msg::md::MarketQuote::MergeFrom(from.last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bar1M::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bar1M::CopyFrom(const Bar1M& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bar1M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < bar_size(); i++) {
    if (!this->bar(i).IsInitialized()) return false;
  }
  if (has_last()) {
    if (!this->last().IsInitialized()) return false;
  }
  return true;
}

void Bar1M::Swap(Bar1M* other) {
  if (other != this) {
    bar_.Swap(&other->bar_);
    std::swap(last_, other->last_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bar1M::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bar1M_descriptor_;
  metadata.reflection = Bar1M_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketQuoteReq::kSymbolFieldNumber;
#endif  // !_MSC_VER

MarketQuoteReq::MarketQuoteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketQuoteReq::InitAsDefaultInstance() {
}

MarketQuoteReq::MarketQuoteReq(const MarketQuoteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketQuoteReq::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketQuoteReq::~MarketQuoteReq() {
  SharedDtor();
}

void MarketQuoteReq::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void MarketQuoteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketQuoteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketQuoteReq_descriptor_;
}

const MarketQuoteReq& MarketQuoteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

MarketQuoteReq* MarketQuoteReq::default_instance_ = NULL;

MarketQuoteReq* MarketQuoteReq::New() const {
  return new MarketQuoteReq;
}

void MarketQuoteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketQuoteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketQuoteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketQuoteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketQuoteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketQuoteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketQuoteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketQuoteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketQuoteReq::MergeFrom(const MarketQuoteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketQuoteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketQuoteReq::CopyFrom(const MarketQuoteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketQuoteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarketQuoteReq::Swap(MarketQuoteReq* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketQuoteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketQuoteReq_descriptor_;
  metadata.reflection = MarketQuoteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketQuoteRsp::kSymbolFieldNumber;
const int MarketQuoteRsp::kResultFieldNumber;
const int MarketQuoteRsp::kDataFieldNumber;
#endif  // !_MSC_VER

MarketQuoteRsp::MarketQuoteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketQuoteRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::jzs::msg::md::MarketQuote*>(&::jzs::msg::md::MarketQuote::default_instance());
}

MarketQuoteRsp::MarketQuoteRsp(const MarketQuoteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketQuoteRsp::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketQuoteRsp::~MarketQuoteRsp() {
  SharedDtor();
}

void MarketQuoteRsp::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void MarketQuoteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketQuoteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketQuoteRsp_descriptor_;
}

const MarketQuoteRsp& MarketQuoteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

MarketQuoteRsp* MarketQuoteRsp::default_instance_ = NULL;

MarketQuoteRsp* MarketQuoteRsp::New() const {
  return new MarketQuoteRsp;
}

void MarketQuoteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    result_ = false;
    if (has_data()) {
      if (data_ != NULL) data_->::jzs::msg::md::MarketQuote::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketQuoteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .jzs.msg.md.MarketQuote data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketQuoteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  // optional .jzs.msg.md.MarketQuote data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketQuoteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  // optional .jzs.msg.md.MarketQuote data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketQuoteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional .jzs.msg.md.MarketQuote data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketQuoteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketQuoteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketQuoteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketQuoteRsp::MergeFrom(const MarketQuoteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::jzs::msg::md::MarketQuote::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketQuoteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketQuoteRsp::CopyFrom(const MarketQuoteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketQuoteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void MarketQuoteRsp::Swap(MarketQuoteRsp* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketQuoteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketQuoteRsp_descriptor_;
  metadata.reflection = MarketQuoteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bar1MReq::kSymbolFieldNumber;
#endif  // !_MSC_VER

Bar1MReq::Bar1MReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bar1MReq::InitAsDefaultInstance() {
}

Bar1MReq::Bar1MReq(const Bar1MReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bar1MReq::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bar1MReq::~Bar1MReq() {
  SharedDtor();
}

void Bar1MReq::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void Bar1MReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bar1MReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bar1MReq_descriptor_;
}

const Bar1MReq& Bar1MReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

Bar1MReq* Bar1MReq::default_instance_ = NULL;

Bar1MReq* Bar1MReq::New() const {
  return new Bar1MReq;
}

void Bar1MReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bar1MReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bar1MReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bar1MReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bar1MReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bar1MReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bar1MReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bar1MReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bar1MReq::MergeFrom(const Bar1MReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bar1MReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bar1MReq::CopyFrom(const Bar1MReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bar1MReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Bar1MReq::Swap(Bar1MReq* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bar1MReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bar1MReq_descriptor_;
  metadata.reflection = Bar1MReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bar1MRsp::kSymbolFieldNumber;
const int Bar1MRsp::kResultFieldNumber;
const int Bar1MRsp::kDataFieldNumber;
#endif  // !_MSC_VER

Bar1MRsp::Bar1MRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bar1MRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::jzs::msg::qms::Bar1M*>(&::jzs::msg::qms::Bar1M::default_instance());
}

Bar1MRsp::Bar1MRsp(const Bar1MRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bar1MRsp::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bar1MRsp::~Bar1MRsp() {
  SharedDtor();
}

void Bar1MRsp::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void Bar1MRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bar1MRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bar1MRsp_descriptor_;
}

const Bar1MRsp& Bar1MRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qms_2eproto();
  return *default_instance_;
}

Bar1MRsp* Bar1MRsp::default_instance_ = NULL;

Bar1MRsp* Bar1MRsp::New() const {
  return new Bar1MRsp;
}

void Bar1MRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    result_ = false;
    if (has_data()) {
      if (data_ != NULL) data_->::jzs::msg::qms::Bar1M::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bar1MRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .jzs.msg.qms.Bar1M data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bar1MRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // optional .jzs.msg.qms.Bar1M data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bar1MRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // optional .jzs.msg.qms.Bar1M data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bar1MRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional .jzs.msg.qms.Bar1M data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bar1MRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bar1MRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bar1MRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bar1MRsp::MergeFrom(const Bar1MRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_data()) {
      mutable_data()->::jzs::msg::qms::Bar1M::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bar1MRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bar1MRsp::CopyFrom(const Bar1MRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bar1MRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Bar1MRsp::Swap(Bar1MRsp* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(result_, other->result_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bar1MRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bar1MRsp_descriptor_;
  metadata.reflection = Bar1MRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qms
}  // namespace msg
}  // namespace jzs

// @@protoc_insertion_point(global_scope)
