
/***********************************************************************

Copyright 2017 quantOS-org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at:

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

***********************************************************************/
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qms.proto

#ifndef PROTOBUF_qms_2eproto__INCLUDED
#define PROTOBUF_qms_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "md.pb.h"
// @@protoc_insertion_point(includes)

namespace jzs {
namespace msg {
namespace qms {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_qms_2eproto();
void protobuf_AssignDesc_qms_2eproto();
void protobuf_ShutdownFile_qms_2eproto();

class SimpleMarketQuote;
class StrategyMarketQuotesReq;
class StrategyMarketQuotesRsp;
class StrategySubscribeReq;
class StrategySubscribeRsp;
class Bar;
class Bar1M;
class MarketQuoteReq;
class MarketQuoteRsp;
class Bar1MReq;
class Bar1MRsp;

// ===================================================================

class SimpleMarketQuote : public ::google::protobuf::Message {
 public:
  SimpleMarketQuote();
  virtual ~SimpleMarketQuote();

  SimpleMarketQuote(const SimpleMarketQuote& from);

  inline SimpleMarketQuote& operator=(const SimpleMarketQuote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleMarketQuote& default_instance();

  void Swap(SimpleMarketQuote* other);

  // implements Message ----------------------------------------------

  SimpleMarketQuote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleMarketQuote& from);
  void MergeFrom(const SimpleMarketQuote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_empty = 1;
  inline bool has_is_empty() const;
  inline void clear_is_empty();
  static const int kIsEmptyFieldNumber = 1;
  inline bool is_empty() const;
  inline void set_is_empty(bool value);

  // required string symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required double open = 4;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 4;
  inline double open() const;
  inline void set_open(double value);

  // required double high = 5;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 5;
  inline double high() const;
  inline void set_high(double value);

  // required double low = 6;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 6;
  inline double low() const;
  inline void set_low(double value);

  // required double last = 7;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 7;
  inline double last() const;
  inline void set_last(double value);

  // required int64 volume = 8;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 8;
  inline ::google::protobuf::int64 volume() const;
  inline void set_volume(::google::protobuf::int64 value);

  // required double turnover = 9;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 9;
  inline double turnover() const;
  inline void set_turnover(double value);

  // required int64 interest = 10;
  inline bool has_interest() const;
  inline void clear_interest();
  static const int kInterestFieldNumber = 10;
  inline ::google::protobuf::int64 interest() const;
  inline void set_interest(::google::protobuf::int64 value);

  // required .jzs.msg.md.AskBid ab = 11;
  inline bool has_ab() const;
  inline void clear_ab();
  static const int kAbFieldNumber = 11;
  inline const ::jzs::msg::md::AskBid& ab() const;
  inline ::jzs::msg::md::AskBid* mutable_ab();
  inline ::jzs::msg::md::AskBid* release_ab();
  inline void set_allocated_ab(::jzs::msg::md::AskBid* ab);

  // required .jzs.msg.md.QuoteStatic qs = 12;
  inline bool has_qs() const;
  inline void clear_qs();
  static const int kQsFieldNumber = 12;
  inline const ::jzs::msg::md::QuoteStatic& qs() const;
  inline ::jzs::msg::md::QuoteStatic* mutable_qs();
  inline ::jzs::msg::md::QuoteStatic* release_qs();
  inline void set_allocated_qs(::jzs::msg::md::QuoteStatic* qs);

  // required double iopv = 13;
  inline bool has_iopv() const;
  inline void clear_iopv();
  static const int kIopvFieldNumber = 13;
  inline double iopv() const;
  inline void set_iopv(double value);

  // optional int32 quoteage = 14;
  inline bool has_quoteage() const;
  inline void clear_quoteage();
  static const int kQuoteageFieldNumber = 14;
  inline ::google::protobuf::int32 quoteage() const;
  inline void set_quoteage(::google::protobuf::int32 value);

  // optional double vwap = 15;
  inline bool has_vwap() const;
  inline void clear_vwap();
  static const int kVwapFieldNumber = 15;
  inline double vwap() const;
  inline void set_vwap(double value);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.SimpleMarketQuote)
 private:
  inline void set_has_is_empty();
  inline void clear_has_is_empty();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_interest();
  inline void clear_has_interest();
  inline void set_has_ab();
  inline void clear_has_ab();
  inline void set_has_qs();
  inline void clear_has_qs();
  inline void set_has_iopv();
  inline void clear_has_iopv();
  inline void set_has_quoteage();
  inline void clear_has_quoteage();
  inline void set_has_vwap();
  inline void clear_has_vwap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  bool is_empty_;
  ::google::protobuf::int32 time_;
  double open_;
  double high_;
  double low_;
  double last_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  ::google::protobuf::int64 interest_;
  ::jzs::msg::md::AskBid* ab_;
  ::jzs::msg::md::QuoteStatic* qs_;
  double iopv_;
  double vwap_;
  ::google::protobuf::int32 quoteage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static SimpleMarketQuote* default_instance_;
};
// -------------------------------------------------------------------

class StrategyMarketQuotesReq : public ::google::protobuf::Message {
 public:
  StrategyMarketQuotesReq();
  virtual ~StrategyMarketQuotesReq();

  StrategyMarketQuotesReq(const StrategyMarketQuotesReq& from);

  inline StrategyMarketQuotesReq& operator=(const StrategyMarketQuotesReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StrategyMarketQuotesReq& default_instance();

  void Swap(StrategyMarketQuotesReq* other);

  // implements Message ----------------------------------------------

  StrategyMarketQuotesReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrategyMarketQuotesReq& from);
  void MergeFrom(const StrategyMarketQuotesReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // required uint32 strategy_id = 2;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 strategy_id() const;
  inline void set_strategy_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.StrategyMarketQuotesReq)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 req_id_;
  ::google::protobuf::uint32 strategy_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static StrategyMarketQuotesReq* default_instance_;
};
// -------------------------------------------------------------------

class StrategyMarketQuotesRsp : public ::google::protobuf::Message {
 public:
  StrategyMarketQuotesRsp();
  virtual ~StrategyMarketQuotesRsp();

  StrategyMarketQuotesRsp(const StrategyMarketQuotesRsp& from);

  inline StrategyMarketQuotesRsp& operator=(const StrategyMarketQuotesRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StrategyMarketQuotesRsp& default_instance();

  void Swap(StrategyMarketQuotesRsp* other);

  // implements Message ----------------------------------------------

  StrategyMarketQuotesRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrategyMarketQuotesRsp& from);
  void MergeFrom(const StrategyMarketQuotesRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // required uint32 strategy_id = 2;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 strategy_id() const;
  inline void set_strategy_id(::google::protobuf::uint32 value);

  // required bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);

  // repeated .jzs.msg.qms.SimpleMarketQuote quotes = 4;
  inline int quotes_size() const;
  inline void clear_quotes();
  static const int kQuotesFieldNumber = 4;
  inline const ::jzs::msg::qms::SimpleMarketQuote& quotes(int index) const;
  inline ::jzs::msg::qms::SimpleMarketQuote* mutable_quotes(int index);
  inline ::jzs::msg::qms::SimpleMarketQuote* add_quotes();
  inline const ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::SimpleMarketQuote >&
      quotes() const;
  inline ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::SimpleMarketQuote >*
      mutable_quotes();

  // optional int32 middle_age = 5;
  inline bool has_middle_age() const;
  inline void clear_middle_age();
  static const int kMiddleAgeFieldNumber = 5;
  inline ::google::protobuf::int32 middle_age() const;
  inline void set_middle_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.StrategyMarketQuotesRsp)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_middle_age();
  inline void clear_has_middle_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 req_id_;
  ::google::protobuf::uint32 strategy_id_;
  ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::SimpleMarketQuote > quotes_;
  bool result_;
  ::google::protobuf::int32 middle_age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static StrategyMarketQuotesRsp* default_instance_;
};
// -------------------------------------------------------------------

class StrategySubscribeReq : public ::google::protobuf::Message {
 public:
  StrategySubscribeReq();
  virtual ~StrategySubscribeReq();

  StrategySubscribeReq(const StrategySubscribeReq& from);

  inline StrategySubscribeReq& operator=(const StrategySubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StrategySubscribeReq& default_instance();

  void Swap(StrategySubscribeReq* other);

  // implements Message ----------------------------------------------

  StrategySubscribeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrategySubscribeReq& from);
  void MergeFrom(const StrategySubscribeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // required uint32 strategy_id = 2;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 strategy_id() const;
  inline void set_strategy_id(::google::protobuf::uint32 value);

  // repeated string symbols = 3;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 3;
  inline const ::std::string& symbols(int index) const;
  inline ::std::string* mutable_symbols(int index);
  inline void set_symbols(int index, const ::std::string& value);
  inline void set_symbols(int index, const char* value);
  inline void set_symbols(int index, const char* value, size_t size);
  inline ::std::string* add_symbols();
  inline void add_symbols(const ::std::string& value);
  inline void add_symbols(const char* value);
  inline void add_symbols(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_symbols();

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.StrategySubscribeReq)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 req_id_;
  ::google::protobuf::uint32 strategy_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> symbols_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static StrategySubscribeReq* default_instance_;
};
// -------------------------------------------------------------------

class StrategySubscribeRsp : public ::google::protobuf::Message {
 public:
  StrategySubscribeRsp();
  virtual ~StrategySubscribeRsp();

  StrategySubscribeRsp(const StrategySubscribeRsp& from);

  inline StrategySubscribeRsp& operator=(const StrategySubscribeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StrategySubscribeRsp& default_instance();

  void Swap(StrategySubscribeRsp* other);

  // implements Message ----------------------------------------------

  StrategySubscribeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrategySubscribeRsp& from);
  void MergeFrom(const StrategySubscribeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 req_id() const;
  inline void set_req_id(::google::protobuf::uint32 value);

  // required uint32 strategy_id = 2;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 strategy_id() const;
  inline void set_strategy_id(::google::protobuf::uint32 value);

  // required bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);

  // repeated string err_symbols = 4;
  inline int err_symbols_size() const;
  inline void clear_err_symbols();
  static const int kErrSymbolsFieldNumber = 4;
  inline const ::std::string& err_symbols(int index) const;
  inline ::std::string* mutable_err_symbols(int index);
  inline void set_err_symbols(int index, const ::std::string& value);
  inline void set_err_symbols(int index, const char* value);
  inline void set_err_symbols(int index, const char* value, size_t size);
  inline ::std::string* add_err_symbols();
  inline void add_err_symbols(const ::std::string& value);
  inline void add_err_symbols(const char* value);
  inline void add_err_symbols(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& err_symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_err_symbols();

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.StrategySubscribeRsp)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 req_id_;
  ::google::protobuf::uint32 strategy_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> err_symbols_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static StrategySubscribeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Bar : public ::google::protobuf::Message {
 public:
  Bar();
  virtual ~Bar();

  Bar(const Bar& from);

  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bar& default_instance();

  void Swap(Bar* other);

  // implements Message ----------------------------------------------

  Bar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bar& from);
  void MergeFrom(const Bar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required double open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline double open() const;
  inline void set_open(double value);

  // required double high = 4;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 4;
  inline double high() const;
  inline void set_high(double value);

  // required double low = 5;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 5;
  inline double low() const;
  inline void set_low(double value);

  // required double close = 6;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 6;
  inline double close() const;
  inline void set_close(double value);

  // required double volume = 7;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 7;
  inline double volume() const;
  inline void set_volume(double value);

  // required double turnover = 8;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 8;
  inline double turnover() const;
  inline void set_turnover(double value);

  // required uint32 match_item = 9;
  inline bool has_match_item() const;
  inline void clear_match_item();
  static const int kMatchItemFieldNumber = 9;
  inline ::google::protobuf::uint32 match_item() const;
  inline void set_match_item(::google::protobuf::uint32 value);

  // required uint32 interest = 10;
  inline bool has_interest() const;
  inline void clear_interest();
  static const int kInterestFieldNumber = 10;
  inline ::google::protobuf::uint32 interest() const;
  inline void set_interest(::google::protobuf::uint32 value);

  // optional uint32 flag = 11;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 11;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // optional double volume_inc = 12;
  inline bool has_volume_inc() const;
  inline void clear_volume_inc();
  static const int kVolumeIncFieldNumber = 12;
  inline double volume_inc() const;
  inline void set_volume_inc(double value);

  // optional double turnover_inc = 13;
  inline bool has_turnover_inc() const;
  inline void clear_turnover_inc();
  static const int kTurnoverIncFieldNumber = 13;
  inline double turnover_inc() const;
  inline void set_turnover_inc(double value);

  // optional int64 interest_inc = 14;
  inline bool has_interest_inc() const;
  inline void clear_interest_inc();
  static const int kInterestIncFieldNumber = 14;
  inline ::google::protobuf::int64 interest_inc() const;
  inline void set_interest_inc(::google::protobuf::int64 value);

  // optional double vwap = 15;
  inline bool has_vwap() const;
  inline void clear_vwap();
  static const int kVwapFieldNumber = 15;
  inline double vwap() const;
  inline void set_vwap(double value);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.Bar)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_match_item();
  inline void clear_has_match_item();
  inline void set_has_interest();
  inline void clear_has_interest();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_volume_inc();
  inline void clear_has_volume_inc();
  inline void set_has_turnover_inc();
  inline void clear_has_turnover_inc();
  inline void set_has_interest_inc();
  inline void clear_has_interest_inc();
  inline void set_has_vwap();
  inline void clear_has_vwap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 time_;
  double open_;
  double high_;
  double low_;
  double close_;
  double volume_;
  double turnover_;
  ::google::protobuf::uint32 match_item_;
  ::google::protobuf::uint32 interest_;
  double volume_inc_;
  double turnover_inc_;
  ::google::protobuf::int64 interest_inc_;
  double vwap_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static Bar* default_instance_;
};
// -------------------------------------------------------------------

class Bar1M : public ::google::protobuf::Message {
 public:
  Bar1M();
  virtual ~Bar1M();

  Bar1M(const Bar1M& from);

  inline Bar1M& operator=(const Bar1M& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bar1M& default_instance();

  void Swap(Bar1M* other);

  // implements Message ----------------------------------------------

  Bar1M* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bar1M& from);
  void MergeFrom(const Bar1M& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jzs.msg.qms.Bar bar = 1;
  inline int bar_size() const;
  inline void clear_bar();
  static const int kBarFieldNumber = 1;
  inline const ::jzs::msg::qms::Bar& bar(int index) const;
  inline ::jzs::msg::qms::Bar* mutable_bar(int index);
  inline ::jzs::msg::qms::Bar* add_bar();
  inline const ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::Bar >&
      bar() const;
  inline ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::Bar >*
      mutable_bar();

  // required .jzs.msg.md.MarketQuote last = 2;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 2;
  inline const ::jzs::msg::md::MarketQuote& last() const;
  inline ::jzs::msg::md::MarketQuote* mutable_last();
  inline ::jzs::msg::md::MarketQuote* release_last();
  inline void set_allocated_last(::jzs::msg::md::MarketQuote* last);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.Bar1M)
 private:
  inline void set_has_last();
  inline void clear_has_last();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::Bar > bar_;
  ::jzs::msg::md::MarketQuote* last_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static Bar1M* default_instance_;
};
// -------------------------------------------------------------------

class MarketQuoteReq : public ::google::protobuf::Message {
 public:
  MarketQuoteReq();
  virtual ~MarketQuoteReq();

  MarketQuoteReq(const MarketQuoteReq& from);

  inline MarketQuoteReq& operator=(const MarketQuoteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketQuoteReq& default_instance();

  void Swap(MarketQuoteReq* other);

  // implements Message ----------------------------------------------

  MarketQuoteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketQuoteReq& from);
  void MergeFrom(const MarketQuoteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.MarketQuoteReq)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static MarketQuoteReq* default_instance_;
};
// -------------------------------------------------------------------

class MarketQuoteRsp : public ::google::protobuf::Message {
 public:
  MarketQuoteRsp();
  virtual ~MarketQuoteRsp();

  MarketQuoteRsp(const MarketQuoteRsp& from);

  inline MarketQuoteRsp& operator=(const MarketQuoteRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketQuoteRsp& default_instance();

  void Swap(MarketQuoteRsp* other);

  // implements Message ----------------------------------------------

  MarketQuoteRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketQuoteRsp& from);
  void MergeFrom(const MarketQuoteRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);

  // optional .jzs.msg.md.MarketQuote data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::jzs::msg::md::MarketQuote& data() const;
  inline ::jzs::msg::md::MarketQuote* mutable_data();
  inline ::jzs::msg::md::MarketQuote* release_data();
  inline void set_allocated_data(::jzs::msg::md::MarketQuote* data);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.MarketQuoteRsp)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::jzs::msg::md::MarketQuote* data_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static MarketQuoteRsp* default_instance_;
};
// -------------------------------------------------------------------

class Bar1MReq : public ::google::protobuf::Message {
 public:
  Bar1MReq();
  virtual ~Bar1MReq();

  Bar1MReq(const Bar1MReq& from);

  inline Bar1MReq& operator=(const Bar1MReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bar1MReq& default_instance();

  void Swap(Bar1MReq* other);

  // implements Message ----------------------------------------------

  Bar1MReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bar1MReq& from);
  void MergeFrom(const Bar1MReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.Bar1MReq)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static Bar1MReq* default_instance_;
};
// -------------------------------------------------------------------

class Bar1MRsp : public ::google::protobuf::Message {
 public:
  Bar1MRsp();
  virtual ~Bar1MRsp();

  Bar1MRsp(const Bar1MRsp& from);

  inline Bar1MRsp& operator=(const Bar1MRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bar1MRsp& default_instance();

  void Swap(Bar1MRsp* other);

  // implements Message ----------------------------------------------

  Bar1MRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bar1MRsp& from);
  void MergeFrom(const Bar1MRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // optional .jzs.msg.qms.Bar1M data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::jzs::msg::qms::Bar1M& data() const;
  inline ::jzs::msg::qms::Bar1M* mutable_data();
  inline ::jzs::msg::qms::Bar1M* release_data();
  inline void set_allocated_data(::jzs::msg::qms::Bar1M* data);

  // @@protoc_insertion_point(class_scope:jzs.msg.qms.Bar1MRsp)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::jzs::msg::qms::Bar1M* data_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_qms_2eproto();
  friend void protobuf_AssignDesc_qms_2eproto();
  friend void protobuf_ShutdownFile_qms_2eproto();

  void InitAsDefaultInstance();
  static Bar1MRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// SimpleMarketQuote

// required bool is_empty = 1;
inline bool SimpleMarketQuote::has_is_empty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleMarketQuote::set_has_is_empty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleMarketQuote::clear_has_is_empty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleMarketQuote::clear_is_empty() {
  is_empty_ = false;
  clear_has_is_empty();
}
inline bool SimpleMarketQuote::is_empty() const {
  return is_empty_;
}
inline void SimpleMarketQuote::set_is_empty(bool value) {
  set_has_is_empty();
  is_empty_ = value;
}

// required string symbol = 2;
inline bool SimpleMarketQuote::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleMarketQuote::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleMarketQuote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimpleMarketQuote::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& SimpleMarketQuote::symbol() const {
  return *symbol_;
}
inline void SimpleMarketQuote::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void SimpleMarketQuote::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void SimpleMarketQuote::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleMarketQuote::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* SimpleMarketQuote::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimpleMarketQuote::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 time = 3;
inline bool SimpleMarketQuote::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimpleMarketQuote::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimpleMarketQuote::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimpleMarketQuote::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 SimpleMarketQuote::time() const {
  return time_;
}
inline void SimpleMarketQuote::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required double open = 4;
inline bool SimpleMarketQuote::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleMarketQuote::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimpleMarketQuote::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimpleMarketQuote::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double SimpleMarketQuote::open() const {
  return open_;
}
inline void SimpleMarketQuote::set_open(double value) {
  set_has_open();
  open_ = value;
}

// required double high = 5;
inline bool SimpleMarketQuote::has_high() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimpleMarketQuote::set_has_high() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimpleMarketQuote::clear_has_high() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimpleMarketQuote::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double SimpleMarketQuote::high() const {
  return high_;
}
inline void SimpleMarketQuote::set_high(double value) {
  set_has_high();
  high_ = value;
}

// required double low = 6;
inline bool SimpleMarketQuote::has_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimpleMarketQuote::set_has_low() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimpleMarketQuote::clear_has_low() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimpleMarketQuote::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double SimpleMarketQuote::low() const {
  return low_;
}
inline void SimpleMarketQuote::set_low(double value) {
  set_has_low();
  low_ = value;
}

// required double last = 7;
inline bool SimpleMarketQuote::has_last() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SimpleMarketQuote::set_has_last() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SimpleMarketQuote::clear_has_last() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SimpleMarketQuote::clear_last() {
  last_ = 0;
  clear_has_last();
}
inline double SimpleMarketQuote::last() const {
  return last_;
}
inline void SimpleMarketQuote::set_last(double value) {
  set_has_last();
  last_ = value;
}

// required int64 volume = 8;
inline bool SimpleMarketQuote::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SimpleMarketQuote::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SimpleMarketQuote::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SimpleMarketQuote::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 SimpleMarketQuote::volume() const {
  return volume_;
}
inline void SimpleMarketQuote::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
}

// required double turnover = 9;
inline bool SimpleMarketQuote::has_turnover() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SimpleMarketQuote::set_has_turnover() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SimpleMarketQuote::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SimpleMarketQuote::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double SimpleMarketQuote::turnover() const {
  return turnover_;
}
inline void SimpleMarketQuote::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
}

// required int64 interest = 10;
inline bool SimpleMarketQuote::has_interest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SimpleMarketQuote::set_has_interest() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SimpleMarketQuote::clear_has_interest() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SimpleMarketQuote::clear_interest() {
  interest_ = GOOGLE_LONGLONG(0);
  clear_has_interest();
}
inline ::google::protobuf::int64 SimpleMarketQuote::interest() const {
  return interest_;
}
inline void SimpleMarketQuote::set_interest(::google::protobuf::int64 value) {
  set_has_interest();
  interest_ = value;
}

// required .jzs.msg.md.AskBid ab = 11;
inline bool SimpleMarketQuote::has_ab() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SimpleMarketQuote::set_has_ab() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SimpleMarketQuote::clear_has_ab() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SimpleMarketQuote::clear_ab() {
  if (ab_ != NULL) ab_->::jzs::msg::md::AskBid::Clear();
  clear_has_ab();
}
inline const ::jzs::msg::md::AskBid& SimpleMarketQuote::ab() const {
  return ab_ != NULL ? *ab_ : *default_instance_->ab_;
}
inline ::jzs::msg::md::AskBid* SimpleMarketQuote::mutable_ab() {
  set_has_ab();
  if (ab_ == NULL) ab_ = new ::jzs::msg::md::AskBid;
  return ab_;
}
inline ::jzs::msg::md::AskBid* SimpleMarketQuote::release_ab() {
  clear_has_ab();
  ::jzs::msg::md::AskBid* temp = ab_;
  ab_ = NULL;
  return temp;
}
inline void SimpleMarketQuote::set_allocated_ab(::jzs::msg::md::AskBid* ab) {
  delete ab_;
  ab_ = ab;
  if (ab) {
    set_has_ab();
  } else {
    clear_has_ab();
  }
}

// required .jzs.msg.md.QuoteStatic qs = 12;
inline bool SimpleMarketQuote::has_qs() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SimpleMarketQuote::set_has_qs() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SimpleMarketQuote::clear_has_qs() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SimpleMarketQuote::clear_qs() {
  if (qs_ != NULL) qs_->::jzs::msg::md::QuoteStatic::Clear();
  clear_has_qs();
}
inline const ::jzs::msg::md::QuoteStatic& SimpleMarketQuote::qs() const {
  return qs_ != NULL ? *qs_ : *default_instance_->qs_;
}
inline ::jzs::msg::md::QuoteStatic* SimpleMarketQuote::mutable_qs() {
  set_has_qs();
  if (qs_ == NULL) qs_ = new ::jzs::msg::md::QuoteStatic;
  return qs_;
}
inline ::jzs::msg::md::QuoteStatic* SimpleMarketQuote::release_qs() {
  clear_has_qs();
  ::jzs::msg::md::QuoteStatic* temp = qs_;
  qs_ = NULL;
  return temp;
}
inline void SimpleMarketQuote::set_allocated_qs(::jzs::msg::md::QuoteStatic* qs) {
  delete qs_;
  qs_ = qs;
  if (qs) {
    set_has_qs();
  } else {
    clear_has_qs();
  }
}

// required double iopv = 13;
inline bool SimpleMarketQuote::has_iopv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SimpleMarketQuote::set_has_iopv() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SimpleMarketQuote::clear_has_iopv() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SimpleMarketQuote::clear_iopv() {
  iopv_ = 0;
  clear_has_iopv();
}
inline double SimpleMarketQuote::iopv() const {
  return iopv_;
}
inline void SimpleMarketQuote::set_iopv(double value) {
  set_has_iopv();
  iopv_ = value;
}

// optional int32 quoteage = 14;
inline bool SimpleMarketQuote::has_quoteage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SimpleMarketQuote::set_has_quoteage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SimpleMarketQuote::clear_has_quoteage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SimpleMarketQuote::clear_quoteage() {
  quoteage_ = 0;
  clear_has_quoteage();
}
inline ::google::protobuf::int32 SimpleMarketQuote::quoteage() const {
  return quoteage_;
}
inline void SimpleMarketQuote::set_quoteage(::google::protobuf::int32 value) {
  set_has_quoteage();
  quoteage_ = value;
}

// optional double vwap = 15;
inline bool SimpleMarketQuote::has_vwap() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SimpleMarketQuote::set_has_vwap() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SimpleMarketQuote::clear_has_vwap() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SimpleMarketQuote::clear_vwap() {
  vwap_ = 0;
  clear_has_vwap();
}
inline double SimpleMarketQuote::vwap() const {
  return vwap_;
}
inline void SimpleMarketQuote::set_vwap(double value) {
  set_has_vwap();
  vwap_ = value;
}

// -------------------------------------------------------------------

// StrategyMarketQuotesReq

// required uint32 req_id = 1;
inline bool StrategyMarketQuotesReq::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrategyMarketQuotesReq::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrategyMarketQuotesReq::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrategyMarketQuotesReq::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 StrategyMarketQuotesReq::req_id() const {
  return req_id_;
}
inline void StrategyMarketQuotesReq::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
}

// required uint32 strategy_id = 2;
inline bool StrategyMarketQuotesReq::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrategyMarketQuotesReq::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrategyMarketQuotesReq::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrategyMarketQuotesReq::clear_strategy_id() {
  strategy_id_ = 0u;
  clear_has_strategy_id();
}
inline ::google::protobuf::uint32 StrategyMarketQuotesReq::strategy_id() const {
  return strategy_id_;
}
inline void StrategyMarketQuotesReq::set_strategy_id(::google::protobuf::uint32 value) {
  set_has_strategy_id();
  strategy_id_ = value;
}

// -------------------------------------------------------------------

// StrategyMarketQuotesRsp

// required uint32 req_id = 1;
inline bool StrategyMarketQuotesRsp::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrategyMarketQuotesRsp::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrategyMarketQuotesRsp::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrategyMarketQuotesRsp::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 StrategyMarketQuotesRsp::req_id() const {
  return req_id_;
}
inline void StrategyMarketQuotesRsp::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
}

// required uint32 strategy_id = 2;
inline bool StrategyMarketQuotesRsp::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrategyMarketQuotesRsp::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrategyMarketQuotesRsp::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrategyMarketQuotesRsp::clear_strategy_id() {
  strategy_id_ = 0u;
  clear_has_strategy_id();
}
inline ::google::protobuf::uint32 StrategyMarketQuotesRsp::strategy_id() const {
  return strategy_id_;
}
inline void StrategyMarketQuotesRsp::set_strategy_id(::google::protobuf::uint32 value) {
  set_has_strategy_id();
  strategy_id_ = value;
}

// required bool result = 3;
inline bool StrategyMarketQuotesRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StrategyMarketQuotesRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StrategyMarketQuotesRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StrategyMarketQuotesRsp::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool StrategyMarketQuotesRsp::result() const {
  return result_;
}
inline void StrategyMarketQuotesRsp::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// repeated .jzs.msg.qms.SimpleMarketQuote quotes = 4;
inline int StrategyMarketQuotesRsp::quotes_size() const {
  return quotes_.size();
}
inline void StrategyMarketQuotesRsp::clear_quotes() {
  quotes_.Clear();
}
inline const ::jzs::msg::qms::SimpleMarketQuote& StrategyMarketQuotesRsp::quotes(int index) const {
  return quotes_.Get(index);
}
inline ::jzs::msg::qms::SimpleMarketQuote* StrategyMarketQuotesRsp::mutable_quotes(int index) {
  return quotes_.Mutable(index);
}
inline ::jzs::msg::qms::SimpleMarketQuote* StrategyMarketQuotesRsp::add_quotes() {
  return quotes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::SimpleMarketQuote >&
StrategyMarketQuotesRsp::quotes() const {
  return quotes_;
}
inline ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::SimpleMarketQuote >*
StrategyMarketQuotesRsp::mutable_quotes() {
  return &quotes_;
}

// optional int32 middle_age = 5;
inline bool StrategyMarketQuotesRsp::has_middle_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StrategyMarketQuotesRsp::set_has_middle_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StrategyMarketQuotesRsp::clear_has_middle_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StrategyMarketQuotesRsp::clear_middle_age() {
  middle_age_ = 0;
  clear_has_middle_age();
}
inline ::google::protobuf::int32 StrategyMarketQuotesRsp::middle_age() const {
  return middle_age_;
}
inline void StrategyMarketQuotesRsp::set_middle_age(::google::protobuf::int32 value) {
  set_has_middle_age();
  middle_age_ = value;
}

// -------------------------------------------------------------------

// StrategySubscribeReq

// required uint32 req_id = 1;
inline bool StrategySubscribeReq::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrategySubscribeReq::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrategySubscribeReq::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrategySubscribeReq::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 StrategySubscribeReq::req_id() const {
  return req_id_;
}
inline void StrategySubscribeReq::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
}

// required uint32 strategy_id = 2;
inline bool StrategySubscribeReq::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrategySubscribeReq::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrategySubscribeReq::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrategySubscribeReq::clear_strategy_id() {
  strategy_id_ = 0u;
  clear_has_strategy_id();
}
inline ::google::protobuf::uint32 StrategySubscribeReq::strategy_id() const {
  return strategy_id_;
}
inline void StrategySubscribeReq::set_strategy_id(::google::protobuf::uint32 value) {
  set_has_strategy_id();
  strategy_id_ = value;
}

// repeated string symbols = 3;
inline int StrategySubscribeReq::symbols_size() const {
  return symbols_.size();
}
inline void StrategySubscribeReq::clear_symbols() {
  symbols_.Clear();
}
inline const ::std::string& StrategySubscribeReq::symbols(int index) const {
  return symbols_.Get(index);
}
inline ::std::string* StrategySubscribeReq::mutable_symbols(int index) {
  return symbols_.Mutable(index);
}
inline void StrategySubscribeReq::set_symbols(int index, const ::std::string& value) {
  symbols_.Mutable(index)->assign(value);
}
inline void StrategySubscribeReq::set_symbols(int index, const char* value) {
  symbols_.Mutable(index)->assign(value);
}
inline void StrategySubscribeReq::set_symbols(int index, const char* value, size_t size) {
  symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StrategySubscribeReq::add_symbols() {
  return symbols_.Add();
}
inline void StrategySubscribeReq::add_symbols(const ::std::string& value) {
  symbols_.Add()->assign(value);
}
inline void StrategySubscribeReq::add_symbols(const char* value) {
  symbols_.Add()->assign(value);
}
inline void StrategySubscribeReq::add_symbols(const char* value, size_t size) {
  symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StrategySubscribeReq::symbols() const {
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StrategySubscribeReq::mutable_symbols() {
  return &symbols_;
}

// -------------------------------------------------------------------

// StrategySubscribeRsp

// required uint32 req_id = 1;
inline bool StrategySubscribeRsp::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrategySubscribeRsp::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrategySubscribeRsp::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrategySubscribeRsp::clear_req_id() {
  req_id_ = 0u;
  clear_has_req_id();
}
inline ::google::protobuf::uint32 StrategySubscribeRsp::req_id() const {
  return req_id_;
}
inline void StrategySubscribeRsp::set_req_id(::google::protobuf::uint32 value) {
  set_has_req_id();
  req_id_ = value;
}

// required uint32 strategy_id = 2;
inline bool StrategySubscribeRsp::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrategySubscribeRsp::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrategySubscribeRsp::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrategySubscribeRsp::clear_strategy_id() {
  strategy_id_ = 0u;
  clear_has_strategy_id();
}
inline ::google::protobuf::uint32 StrategySubscribeRsp::strategy_id() const {
  return strategy_id_;
}
inline void StrategySubscribeRsp::set_strategy_id(::google::protobuf::uint32 value) {
  set_has_strategy_id();
  strategy_id_ = value;
}

// required bool result = 3;
inline bool StrategySubscribeRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StrategySubscribeRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StrategySubscribeRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StrategySubscribeRsp::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool StrategySubscribeRsp::result() const {
  return result_;
}
inline void StrategySubscribeRsp::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// repeated string err_symbols = 4;
inline int StrategySubscribeRsp::err_symbols_size() const {
  return err_symbols_.size();
}
inline void StrategySubscribeRsp::clear_err_symbols() {
  err_symbols_.Clear();
}
inline const ::std::string& StrategySubscribeRsp::err_symbols(int index) const {
  return err_symbols_.Get(index);
}
inline ::std::string* StrategySubscribeRsp::mutable_err_symbols(int index) {
  return err_symbols_.Mutable(index);
}
inline void StrategySubscribeRsp::set_err_symbols(int index, const ::std::string& value) {
  err_symbols_.Mutable(index)->assign(value);
}
inline void StrategySubscribeRsp::set_err_symbols(int index, const char* value) {
  err_symbols_.Mutable(index)->assign(value);
}
inline void StrategySubscribeRsp::set_err_symbols(int index, const char* value, size_t size) {
  err_symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StrategySubscribeRsp::add_err_symbols() {
  return err_symbols_.Add();
}
inline void StrategySubscribeRsp::add_err_symbols(const ::std::string& value) {
  err_symbols_.Add()->assign(value);
}
inline void StrategySubscribeRsp::add_err_symbols(const char* value) {
  err_symbols_.Add()->assign(value);
}
inline void StrategySubscribeRsp::add_err_symbols(const char* value, size_t size) {
  err_symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StrategySubscribeRsp::err_symbols() const {
  return err_symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StrategySubscribeRsp::mutable_err_symbols() {
  return &err_symbols_;
}

// -------------------------------------------------------------------

// Bar

// required uint32 date = 1;
inline bool Bar::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bar::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bar::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bar::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 Bar::date() const {
  return date_;
}
inline void Bar::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
}

// required uint32 time = 2;
inline bool Bar::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bar::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bar::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bar::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 Bar::time() const {
  return time_;
}
inline void Bar::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required double open = 3;
inline bool Bar::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bar::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bar::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bar::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double Bar::open() const {
  return open_;
}
inline void Bar::set_open(double value) {
  set_has_open();
  open_ = value;
}

// required double high = 4;
inline bool Bar::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bar::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bar::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bar::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double Bar::high() const {
  return high_;
}
inline void Bar::set_high(double value) {
  set_has_high();
  high_ = value;
}

// required double low = 5;
inline bool Bar::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bar::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bar::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bar::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double Bar::low() const {
  return low_;
}
inline void Bar::set_low(double value) {
  set_has_low();
  low_ = value;
}

// required double close = 6;
inline bool Bar::has_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bar::set_has_close() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bar::clear_has_close() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bar::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline double Bar::close() const {
  return close_;
}
inline void Bar::set_close(double value) {
  set_has_close();
  close_ = value;
}

// required double volume = 7;
inline bool Bar::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Bar::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Bar::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Bar::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline double Bar::volume() const {
  return volume_;
}
inline void Bar::set_volume(double value) {
  set_has_volume();
  volume_ = value;
}

// required double turnover = 8;
inline bool Bar::has_turnover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Bar::set_has_turnover() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Bar::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Bar::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double Bar::turnover() const {
  return turnover_;
}
inline void Bar::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
}

// required uint32 match_item = 9;
inline bool Bar::has_match_item() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Bar::set_has_match_item() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Bar::clear_has_match_item() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Bar::clear_match_item() {
  match_item_ = 0u;
  clear_has_match_item();
}
inline ::google::protobuf::uint32 Bar::match_item() const {
  return match_item_;
}
inline void Bar::set_match_item(::google::protobuf::uint32 value) {
  set_has_match_item();
  match_item_ = value;
}

// required uint32 interest = 10;
inline bool Bar::has_interest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Bar::set_has_interest() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Bar::clear_has_interest() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Bar::clear_interest() {
  interest_ = 0u;
  clear_has_interest();
}
inline ::google::protobuf::uint32 Bar::interest() const {
  return interest_;
}
inline void Bar::set_interest(::google::protobuf::uint32 value) {
  set_has_interest();
  interest_ = value;
}

// optional uint32 flag = 11;
inline bool Bar::has_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Bar::set_has_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Bar::clear_has_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Bar::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 Bar::flag() const {
  return flag_;
}
inline void Bar::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// optional double volume_inc = 12;
inline bool Bar::has_volume_inc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Bar::set_has_volume_inc() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Bar::clear_has_volume_inc() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Bar::clear_volume_inc() {
  volume_inc_ = 0;
  clear_has_volume_inc();
}
inline double Bar::volume_inc() const {
  return volume_inc_;
}
inline void Bar::set_volume_inc(double value) {
  set_has_volume_inc();
  volume_inc_ = value;
}

// optional double turnover_inc = 13;
inline bool Bar::has_turnover_inc() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Bar::set_has_turnover_inc() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Bar::clear_has_turnover_inc() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Bar::clear_turnover_inc() {
  turnover_inc_ = 0;
  clear_has_turnover_inc();
}
inline double Bar::turnover_inc() const {
  return turnover_inc_;
}
inline void Bar::set_turnover_inc(double value) {
  set_has_turnover_inc();
  turnover_inc_ = value;
}

// optional int64 interest_inc = 14;
inline bool Bar::has_interest_inc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Bar::set_has_interest_inc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Bar::clear_has_interest_inc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Bar::clear_interest_inc() {
  interest_inc_ = GOOGLE_LONGLONG(0);
  clear_has_interest_inc();
}
inline ::google::protobuf::int64 Bar::interest_inc() const {
  return interest_inc_;
}
inline void Bar::set_interest_inc(::google::protobuf::int64 value) {
  set_has_interest_inc();
  interest_inc_ = value;
}

// optional double vwap = 15;
inline bool Bar::has_vwap() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Bar::set_has_vwap() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Bar::clear_has_vwap() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Bar::clear_vwap() {
  vwap_ = 0;
  clear_has_vwap();
}
inline double Bar::vwap() const {
  return vwap_;
}
inline void Bar::set_vwap(double value) {
  set_has_vwap();
  vwap_ = value;
}

// -------------------------------------------------------------------

// Bar1M

// repeated .jzs.msg.qms.Bar bar = 1;
inline int Bar1M::bar_size() const {
  return bar_.size();
}
inline void Bar1M::clear_bar() {
  bar_.Clear();
}
inline const ::jzs::msg::qms::Bar& Bar1M::bar(int index) const {
  return bar_.Get(index);
}
inline ::jzs::msg::qms::Bar* Bar1M::mutable_bar(int index) {
  return bar_.Mutable(index);
}
inline ::jzs::msg::qms::Bar* Bar1M::add_bar() {
  return bar_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::Bar >&
Bar1M::bar() const {
  return bar_;
}
inline ::google::protobuf::RepeatedPtrField< ::jzs::msg::qms::Bar >*
Bar1M::mutable_bar() {
  return &bar_;
}

// required .jzs.msg.md.MarketQuote last = 2;
inline bool Bar1M::has_last() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bar1M::set_has_last() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bar1M::clear_has_last() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bar1M::clear_last() {
  if (last_ != NULL) last_->::jzs::msg::md::MarketQuote::Clear();
  clear_has_last();
}
inline const ::jzs::msg::md::MarketQuote& Bar1M::last() const {
  return last_ != NULL ? *last_ : *default_instance_->last_;
}
inline ::jzs::msg::md::MarketQuote* Bar1M::mutable_last() {
  set_has_last();
  if (last_ == NULL) last_ = new ::jzs::msg::md::MarketQuote;
  return last_;
}
inline ::jzs::msg::md::MarketQuote* Bar1M::release_last() {
  clear_has_last();
  ::jzs::msg::md::MarketQuote* temp = last_;
  last_ = NULL;
  return temp;
}
inline void Bar1M::set_allocated_last(::jzs::msg::md::MarketQuote* last) {
  delete last_;
  last_ = last;
  if (last) {
    set_has_last();
  } else {
    clear_has_last();
  }
}

// -------------------------------------------------------------------

// MarketQuoteReq

// required string symbol = 1;
inline bool MarketQuoteReq::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketQuoteReq::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketQuoteReq::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketQuoteReq::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& MarketQuoteReq::symbol() const {
  return *symbol_;
}
inline void MarketQuoteReq::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MarketQuoteReq::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MarketQuoteReq::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketQuoteReq::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* MarketQuoteReq::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketQuoteReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MarketQuoteRsp

// required string symbol = 1;
inline bool MarketQuoteRsp::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketQuoteRsp::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketQuoteRsp::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketQuoteRsp::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& MarketQuoteRsp::symbol() const {
  return *symbol_;
}
inline void MarketQuoteRsp::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MarketQuoteRsp::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void MarketQuoteRsp::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketQuoteRsp::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* MarketQuoteRsp::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketQuoteRsp::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool result = 3;
inline bool MarketQuoteRsp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketQuoteRsp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketQuoteRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketQuoteRsp::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool MarketQuoteRsp::result() const {
  return result_;
}
inline void MarketQuoteRsp::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional .jzs.msg.md.MarketQuote data = 4;
inline bool MarketQuoteRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketQuoteRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketQuoteRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketQuoteRsp::clear_data() {
  if (data_ != NULL) data_->::jzs::msg::md::MarketQuote::Clear();
  clear_has_data();
}
inline const ::jzs::msg::md::MarketQuote& MarketQuoteRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::jzs::msg::md::MarketQuote* MarketQuoteRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::jzs::msg::md::MarketQuote;
  return data_;
}
inline ::jzs::msg::md::MarketQuote* MarketQuoteRsp::release_data() {
  clear_has_data();
  ::jzs::msg::md::MarketQuote* temp = data_;
  data_ = NULL;
  return temp;
}
inline void MarketQuoteRsp::set_allocated_data(::jzs::msg::md::MarketQuote* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// Bar1MReq

// required string symbol = 1;
inline bool Bar1MReq::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bar1MReq::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bar1MReq::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bar1MReq::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Bar1MReq::symbol() const {
  return *symbol_;
}
inline void Bar1MReq::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Bar1MReq::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Bar1MReq::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bar1MReq::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* Bar1MReq::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bar1MReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Bar1MRsp

// required string symbol = 1;
inline bool Bar1MRsp::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bar1MRsp::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bar1MRsp::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bar1MRsp::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Bar1MRsp::symbol() const {
  return *symbol_;
}
inline void Bar1MRsp::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Bar1MRsp::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Bar1MRsp::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bar1MRsp::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* Bar1MRsp::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bar1MRsp::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool result = 2;
inline bool Bar1MRsp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bar1MRsp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bar1MRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bar1MRsp::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool Bar1MRsp::result() const {
  return result_;
}
inline void Bar1MRsp::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional .jzs.msg.qms.Bar1M data = 3;
inline bool Bar1MRsp::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bar1MRsp::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bar1MRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bar1MRsp::clear_data() {
  if (data_ != NULL) data_->::jzs::msg::qms::Bar1M::Clear();
  clear_has_data();
}
inline const ::jzs::msg::qms::Bar1M& Bar1MRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::jzs::msg::qms::Bar1M* Bar1MRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::jzs::msg::qms::Bar1M;
  return data_;
}
inline ::jzs::msg::qms::Bar1M* Bar1MRsp::release_data() {
  clear_has_data();
  ::jzs::msg::qms::Bar1M* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Bar1MRsp::set_allocated_data(::jzs::msg::qms::Bar1M* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qms
}  // namespace msg
}  // namespace jzs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qms_2eproto__INCLUDED
