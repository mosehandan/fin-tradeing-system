#include "TraderSpi.h"
#include "ZmqServer.h"

Document d;

void PrintAllFunction()
{
        cout << "可供测试的函数如下:" << endl;
        cout << "1 用户登录请求 ReqUserLogin" << endl;
        cout << "2 登出请求 ReqUserLogout" << endl;
        cout << "3 用户口令更新请求 ReqUserPasswordUpdate" << endl;
        cout << "4 资金账户口令更新请求 ReqTradingAccountPasswordUpdate" << endl;
        cout << "5 报单录入请求 ReqOrderInsert" << endl;
        cout << "6 预埋单录入请求 ReqParkedOrderInsert" << endl;
        cout << "7 预埋撤单录入请求 ReqParkedOrderAction" << endl;
        cout << "8 报单操作请求 ReqOrderAction" << endl;
        cout << "9 查询最大报单数量请求 ReqQueryMaxOrderVolume" << endl;
        cout << "10 投资者结算结果确认 ReqSettlementInfoConfirm" << endl;
        cout << "11 请求删除预埋单 ReqRemoveParkedOrder" << endl;
        cout << "12 请求删除预埋撤单 ReqRemoveParkedOrderAction" << endl;
        cout << "13 执行宣告录入请求 ReqExecOrderInsert" << endl;
        cout << "14 执行宣告操作请求 ReqExecOrderAction" << endl;
        cout << "15 询价录入请求 ReqForQuoteInsert" << endl;
        cout << "16 报价录入请求 ReqQuoteInsert" << endl;
        cout << "17 报价操作请求 ReqQuoteAction" << endl;
        cout << "18 锁定请求 ReqLockInsert" << endl;
        cout << "19 申请组合录入请求 ReqCombActionInsert" << endl;
        cout << "20 请求查询报单 ReqQryOrder" << endl;
        cout << "21 请求查询成交 ReqQryTrade" << endl;
        cout << "22 请求查询投资者持仓 ReqQryInvestorPosition" << endl;
        cout << "23 请求查询资金账户 ReqQryTradingAccount" << endl;
        cout << "24 请求查询投资者 ReqQryInvestor" << endl;
        cout << "25 请求查询交易编码 ReqQryTradingCode" << endl;
        cout << "26 请求查询合约保证金率 ReqQryInstrumentMarginRate" << endl;
        cout << "27 请求查询合约手续费率 ReqQryInstrumentCommissionRate" << endl;
        cout << "28 请求查询交易所 ReqQryExchange" << endl;
        cout << "29 请求查询产品 ReqQryProduct" << endl;
        cout << "30 请求查询合约 ReqQryInstrument" << endl;
        cout << "31 请求查询行情 ReqQryDepthMarketData" << endl;
        cout << "32 请求查询投资者结算结果 ReqQrySettlementInfo" << endl;
        cout << "33 请求查询转帐银行 ReqQryTransferBank" << endl;
        cout << "34 请求查询投资者持仓明细 ReqQryInvestorPositionDetail" << endl;
        cout << "35 请求查询客户通知 ReqQryNotice" << endl;
        cout << "36 请求查询结算信息确认 ReqQrySettlementInfoConfirm" << endl;
        cout << "37 请求查询投资者持仓明细 ReqQryInvestorPositionCombineDetail" << endl;
        cout << "38 请求查询保证金监管系统经纪公司资金账户密钥 ReqQryCFMMCTradingAccountKey" << endl;
        cout << "39 请求查询仓单折抵信息 ReqQryEWarrantOffset" << endl;
        cout << "40 请求查询投资者品种/跨品种保证金 ReqQryInvestorProductGroupMargin" << endl;
        cout << "41 请求查询交易所保证金率 ReqQryExchangeMarginRate" << endl;
        cout << "42 请求查询交易所调整保证金率 ReqQryExchangeMarginRateAdjust" << endl;
        cout << "43 请求查询汇率 ReqQryExchangeRate" << endl;
        cout << "44 请求查询二级代理操作员银期权限 ReqQrySecAgentACIDMap" << endl;
        cout << "45 请求查询产品报价汇率 ReqQryProductExchRate" << endl;
        cout << "46 请求查询产品组 ReqQryProductGroup" << endl;
        cout << "47 请求查询期权交易成本 ReqQryOptionInstrTradeCost" << endl;
        cout << "48 请求查询期权合约手续费 ReqQryOptionInstrCommRate" << endl;
        cout << "49 请求查询执行宣告 ReqQryExecOrder" << endl;
        cout << "50 请求查询询价 ReqQryForQuote" << endl;
        cout << "51 请求查询报价 ReqQryQuote" << endl;
        cout << "52 请求查询锁定 ReqQryLock" << endl;
        cout << "53 请求查询锁定证券仓位 ReqQryLockPosition" << endl;
        cout << "54 请求查询投资者分级 ReqQryInvestorLevel" << endl;
        cout << "55 请求查询E+1日行权冻结 ReqQryExecFreeze" << endl;
        cout << "56 请求查询组合合约安全系数 ReqQryCombInstrumentGuard" << endl;
        cout << "57 请求查询申请组合 ReqQryCombAction" << endl;
        cout << "58 请求查询转帐流水 ReqQryTransferSerial" << endl;
        cout << "59 请求查询银期签约关系 ReqQryAccountregister" << endl;
        cout << "60 请求查询签约银行 ReqQryContractBank" << endl;
        cout << "61 请求查询预埋单 ReqQryParkedOrder" << endl;
        cout << "62 请求查询预埋撤单 ReqQryParkedOrderAction" << endl;
        cout << "63 请求查询交易通知 ReqQryTradingNotice" << endl;
        cout << "64 请求查询经纪公司交易参数 ReqQryBrokerTradingParams" << endl;
        cout << "65 请求查询经纪公司交易算法 ReqQryBrokerTradingAlgos" << endl;
        cout << "66 请求查询监控中心用户令牌 ReqQueryCFMMCTradingAccountToken" << endl;
        cout << "67 期货发起银行资金转期货请求 ReqFromBankToFutureByFuture" << endl;
        cout << "68 期货发起期货资金转银行请求 ReqFromFutureToBankByFuture" << endl;
        cout << "69 期货发起查询银行余额请求 ReqQueryBankAccountMoneyByFuture" << endl;
}

void TestAllFunction()
{
        int fun_number = 0;
        PrintAllFunction();
        while (1) {
                // cout << "请输入要测试的函数编号,0显示所有函数: ";
                cin >> fun_number;
                switch (fun_number) {

                case 1: {
                        ctraderapi->reqUserLogin();
                        break;
                }
                case 2: {
                        ctraderapi->reqUserLogout();
                        break;
                }
                case 3: {
                        ctraderapi->reqUserPasswordUpdate();
                        break;
                }
                case 4: {
                        ctraderapi->reqTradingAccountPasswordUpdate();
                        break;
                }
                case 5: {
                        ctraderapi->reqOrderInsert();
                        break;
                }
                case 6: {
                        ctraderapi->reqParkedOrderInsert();
                        break;
                }
                case 7: {
                        ctraderapi->reqParkedOrderAction();
                        break;
                }
                case 8: {
                        ctraderapi->reqOrderAction();
                        break;
                }
                case 9: {
                        ctraderapi->reqQueryMaxOrderVolume();
                        break;
                }
                case 10: {
                        ctraderapi->reqSettlementInfoConfirm();
                        break;
                }
                case 11: {
                        ctraderapi->reqRemoveParkedOrder();
                        break;
                }
                case 12: {
                        ctraderapi->reqRemoveParkedOrderAction();
                        break;
                }
                case 13: {
                        ctraderapi->reqExecOrderInsert();
                        break;
                }
                case 14: {
                        ctraderapi->reqExecOrderAction();
                        break;
                }
                case 15: {
                        ctraderapi->reqForQuoteInsert();
                        break;
                }
                case 16: {
                        ctraderapi->reqQuoteInsert();
                        break;
                }
                case 17: {
                        ctraderapi->reqQuoteAction();
                        break;
                }
                case 18: {
                        ctraderapi->reqLockInsert();
                        break;
                }
                case 19: {
                        ctraderapi->reqCombActionInsert();
                        break;
                }
                case 20: {
                        ctraderapi->reqQryOrder();
                        break;
                }
                case 21: {
                        ctraderapi->reqQryTrade();
                        break;
                }
                case 22: {
                        ctraderapi->reqQryInvestorPosition();
                        break;
                }
                case 23: {
                        ctraderapi->reqQryTradingAccount();
                        break;
                }
                case 24: {
                        ctraderapi->reqQryInvestor();
                        break;
                }
                case 25: {
                        ctraderapi->reqQryTradingCode();
                        break;
                }
                case 26: {
                        ctraderapi->reqQryInstrumentMarginRate();
                        break;
                }
                case 27: {
                        ctraderapi->reqQryInstrumentCommissionRate();
                        break;
                }
                case 28: {
                        ctraderapi->reqQryExchange();
                        break;
                }
                case 29: {
                        ctraderapi->reqQryProduct();
                        break;
                }
                case 30: {
                        ctraderapi->reqQryInstrument();
                        break;
                }
                case 31: {
                        ctraderapi->reqQryDepthMarketData();
                        break;
                }
                case 32: {
                        ctraderapi->reqQrySettlementInfo();
                        break;
                }
                case 33: {
                        ctraderapi->reqQryTransferBank();
                        break;
                }
                case 34: {
                        ctraderapi->reqQryInvestorPositionDetail();
                        break;
                }
                case 35: {
                        ctraderapi->reqQryNotice();
                        break;
                }
                case 36: {
                        ctraderapi->reqQrySettlementInfoConfirm();
                        break;
                }
                case 37: {
                        ctraderapi->reqQryInvestorPositionCombineDetail();
                        break;
                }
                case 38: {
                        ctraderapi->reqQryCFMMCTradingAccountKey();
                        break;
                }
                case 39: {
                        ctraderapi->reqQryEWarrantOffset();
                        break;
                }
                case 40: {
                        ctraderapi->reqQryInvestorProductGroupMargin();
                        break;
                }
                case 41: {
                        ctraderapi->reqQryExchangeMarginRate();
                        break;
                }
                case 42: {
                        ctraderapi->reqQryExchangeMarginRateAdjust();
                        break;
                }
                case 43: {
                        ctraderapi->reqQryExchangeRate();
                        break;
                }
                case 44: {
                        ctraderapi->reqQrySecAgentACIDMap();
                        break;
                }
                case 45: {
                        ctraderapi->reqQryProductExchRate();
                        break;
                }
                case 46: {
                        ctraderapi->reqQryProductGroup();
                        break;
                }
                case 47: {
                        ctraderapi->reqQryOptionInstrTradeCost();
                        break;
                }
                case 48: {
                        ctraderapi->reqQryOptionInstrCommRate();
                        break;
                }
                case 49: {
                        ctraderapi->reqQryExecOrder();
                        break;
                }
                case 50: {
                        ctraderapi->reqQryForQuote();
                        break;
                }
                case 51: {
                        ctraderapi->reqQryQuote();
                        break;
                }
                case 52: {
                        ctraderapi->reqQryLock();
                        break;
                }
                case 53: {
                        ctraderapi->reqQryLockPosition();
                        break;
                }
                case 54: {
                        ctraderapi->reqQryInvestorLevel();
                        break;
                }
                case 55: {
                        ctraderapi->reqQryExecFreeze();
                        break;
                }
                case 56: {
                        ctraderapi->reqQryCombInstrumentGuard();
                        break;
                }
                case 57: {
                        ctraderapi->reqQryCombAction();
                        break;
                }
                case 58: {
                        ctraderapi->reqQryTransferSerial();
                        break;
                }
                case 59: {
                        ctraderapi->reqQryAccountregister();
                        break;
                }
                case 60: {
                        ctraderapi->reqQryContractBank();
                        break;
                }
                case 61: {
                        ctraderapi->reqQryParkedOrder();
                        break;
                }
                case 62: {
                        ctraderapi->reqQryParkedOrderAction();
                        break;
                }
                case 63: {
                        ctraderapi->reqQryTradingNotice();
                        break;
                }
                case 64: {
                        ctraderapi->reqQryBrokerTradingParams();
                        break;
                }
                case 65: {
                        ctraderapi->reqQryBrokerTradingAlgos();
                        break;
                }
                case 66: {
                        ctraderapi->reqQueryCFMMCTradingAccountToken();
                        break;
                }
                case 67: {
                        ctraderapi->reqFromBankToFutureByFuture();
                        break;
                }
                case 68: {
                        ctraderapi->reqFromFutureToBankByFuture();
                        break;
                }
                case 69: {
                        ctraderapi->reqQueryBankAccountMoneyByFuture();
                        break;
                }
                }
        }
}

int main(int argc, char* argv[])
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    if (argc != 2) {
        cerr << "Usage: " << argv[0] << " ctp_config_file" << endl;
        return -1;
    }

    string config_path = argv[1];
    // std::cout << config_path.c_str() << std::endl;
	if ( !read_json("ctp_zhongxin.json",d) ){
		cout << "the config.json file parse error!" << endl;
		return 0;
	}

    logger::init(argv[0]);
	// publisher.bind("tcp://*:5541");
	// reply.bind("tcp://*:5531");

	ctraderapi = new CTraderSpi();
	ctraderapi->load_config(d);
	ctraderapi->connect();

    // TestAllFunction();
}

