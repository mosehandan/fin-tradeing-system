// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guosen.proto

#ifndef PROTOBUF_INCLUDED_guosen_2eproto
#define PROTOBUF_INCLUDED_guosen_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_guosen_2eproto 

namespace protobuf_guosen_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_guosen_2eproto
namespace guosen {
namespace msg {
class CtpHeartWarning;
class CtpHeartWarningDefaultTypeInternal;
extern CtpHeartWarningDefaultTypeInternal _CtpHeartWarning_default_instance_;
class CtpRtnConnect;
class CtpRtnConnectDefaultTypeInternal;
extern CtpRtnConnectDefaultTypeInternal _CtpRtnConnect_default_instance_;
class ProtoMsg;
class ProtoMsgDefaultTypeInternal;
extern ProtoMsgDefaultTypeInternal _ProtoMsg_default_instance_;
}  // namespace msg
}  // namespace guosen
namespace google {
namespace protobuf {
template<> ::guosen::msg::CtpHeartWarning* Arena::CreateMaybeMessage<::guosen::msg::CtpHeartWarning>(Arena*);
template<> ::guosen::msg::CtpRtnConnect* Arena::CreateMaybeMessage<::guosen::msg::CtpRtnConnect>(Arena*);
template<> ::guosen::msg::ProtoMsg* Arena::CreateMaybeMessage<::guosen::msg::ProtoMsg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace guosen {
namespace msg {

enum MsgType {
  CThostFtdcDisseminationField = 0,
  CThostFtdcReqUserLoginField = 1,
  CThostFtdcRspUserLoginField = 2,
  CThostFtdcUserLogoutField = 3,
  CThostFtdcForceUserLogoutField = 4,
  CThostFtdcReqAuthenticateField = 5,
  CThostFtdcRspAuthenticateField = 6,
  CThostFtdcAuthenticationInfoField = 7,
  CThostFtdcTransferHeaderField = 8,
  CThostFtdcTransferBankToFutureReqField = 9,
  CThostFtdcTransferBankToFutureRspField = 10,
  CThostFtdcTransferFutureToBankReqField = 11,
  CThostFtdcTransferFutureToBankRspField = 12,
  CThostFtdcTransferQryBankReqField = 13,
  CThostFtdcTransferQryBankRspField = 14,
  CThostFtdcTransferQryDetailReqField = 15,
  CThostFtdcTransferQryDetailRspField = 16,
  CThostFtdcRspInfoField = 17,
  CThostFtdcExchangeField = 18,
  CThostFtdcProductField = 19,
  CThostFtdcInstrumentField = 20,
  CThostFtdcBrokerField = 21,
  CThostFtdcTraderField = 22,
  CThostFtdcInvestorField = 23,
  CThostFtdcTradingCodeField = 24,
  CThostFtdcPartBrokerField = 25,
  CThostFtdcSuperUserField = 26,
  CThostFtdcSuperUserFunctionField = 27,
  CThostFtdcInvestorGroupField = 28,
  CThostFtdcTradingAccountField = 29,
  CThostFtdcInvestorPositionField = 30,
  CThostFtdcInstrumentMarginRateField = 31,
  CThostFtdcInstrumentCommissionRateField = 32,
  CThostFtdcDepthMarketDataField = 33,
  CThostFtdcInstrumentTradingRightField = 34,
  CThostFtdcBrokerUserField = 35,
  CThostFtdcBrokerUserPasswordField = 36,
  CThostFtdcBrokerUserFunctionField = 37,
  CThostFtdcTraderOfferField = 38,
  CThostFtdcSettlementInfoField = 39,
  CThostFtdcInstrumentMarginRateAdjustField = 40,
  CThostFtdcExchangeMarginRateField = 41,
  CThostFtdcExchangeMarginRateAdjustField = 42,
  CThostFtdcExchangeRateField = 43,
  CThostFtdcSettlementRefField = 44,
  CThostFtdcCurrentTimeField = 45,
  CThostFtdcCommPhaseField = 46,
  CThostFtdcLoginInfoField = 47,
  CThostFtdcLogoutAllField = 48,
  CThostFtdcFrontStatusField = 49,
  CThostFtdcUserPasswordUpdateField = 50,
  CThostFtdcInputOrderField = 51,
  CThostFtdcOrderField = 52,
  CThostFtdcExchangeOrderField = 53,
  CThostFtdcExchangeOrderInsertErrorField = 54,
  CThostFtdcInputOrderActionField = 55,
  CThostFtdcOrderActionField = 56,
  CThostFtdcExchangeOrderActionField = 57,
  CThostFtdcExchangeOrderActionErrorField = 58,
  CThostFtdcExchangeTradeField = 59,
  CThostFtdcTradeField = 60,
  CThostFtdcUserSessionField = 61,
  CThostFtdcQueryMaxOrderVolumeField = 62,
  CThostFtdcSettlementInfoConfirmField = 63,
  CThostFtdcSyncDepositField = 64,
  CThostFtdcSyncFundMortgageField = 65,
  CThostFtdcBrokerSyncField = 66,
  CThostFtdcSyncingInvestorField = 67,
  CThostFtdcSyncingTradingCodeField = 68,
  CThostFtdcSyncingInvestorGroupField = 69,
  CThostFtdcSyncingTradingAccountField = 70,
  CThostFtdcSyncingInvestorPositionField = 71,
  CThostFtdcSyncingInstrumentMarginRateField = 72,
  CThostFtdcSyncingInstrumentCommissionRateField = 73,
  CThostFtdcSyncingInstrumentTradingRightField = 74,
  CThostFtdcQryOrderField = 75,
  CThostFtdcQryTradeField = 76,
  CThostFtdcQryInvestorPositionField = 77,
  CThostFtdcQryTradingAccountField = 78,
  CThostFtdcQryInvestorField = 79,
  CThostFtdcQryTradingCodeField = 80,
  CThostFtdcQryInvestorGroupField = 81,
  CThostFtdcQryInstrumentMarginRateField = 82,
  CThostFtdcQryInstrumentCommissionRateField = 83,
  CThostFtdcQryInstrumentTradingRightField = 84,
  CThostFtdcQryBrokerField = 85,
  CThostFtdcQryTraderField = 86,
  CThostFtdcQrySuperUserFunctionField = 87,
  CThostFtdcQryUserSessionField = 88,
  CThostFtdcQryPartBrokerField = 89,
  CThostFtdcQryFrontStatusField = 90,
  CThostFtdcQryExchangeOrderField = 91,
  CThostFtdcQryOrderActionField = 92,
  CThostFtdcQryExchangeOrderActionField = 93,
  CThostFtdcQrySuperUserField = 94,
  CThostFtdcQryExchangeField = 95,
  CThostFtdcQryProductField = 96,
  CThostFtdcQryInstrumentField = 97,
  CThostFtdcQryDepthMarketDataField = 98,
  CThostFtdcQryBrokerUserField = 99,
  CThostFtdcQryBrokerUserFunctionField = 100,
  CThostFtdcQryTraderOfferField = 101,
  CThostFtdcQrySyncDepositField = 102,
  CThostFtdcQrySettlementInfoField = 103,
  CThostFtdcQryExchangeMarginRateField = 104,
  CThostFtdcQryExchangeMarginRateAdjustField = 105,
  CThostFtdcQryExchangeRateField = 106,
  CThostFtdcQrySyncFundMortgageField = 107,
  CThostFtdcQryHisOrderField = 108,
  CThostFtdcOptionInstrMiniMarginField = 109,
  CThostFtdcOptionInstrMarginAdjustField = 110,
  CThostFtdcOptionInstrCommRateField = 111,
  CThostFtdcOptionInstrTradeCostField = 112,
  CThostFtdcQryOptionInstrTradeCostField = 113,
  CThostFtdcQryOptionInstrCommRateField = 114,
  CThostFtdcIndexPriceField = 115,
  CThostFtdcInputExecOrderField = 116,
  CThostFtdcInputExecOrderActionField = 117,
  CThostFtdcExecOrderField = 118,
  CThostFtdcExecOrderActionField = 119,
  CThostFtdcQryExecOrderField = 120,
  CThostFtdcExchangeExecOrderField = 121,
  CThostFtdcQryExchangeExecOrderField = 122,
  CThostFtdcQryExecOrderActionField = 123,
  CThostFtdcExchangeExecOrderActionField = 124,
  CThostFtdcQryExchangeExecOrderActionField = 125,
  CThostFtdcErrExecOrderField = 126,
  CThostFtdcQryErrExecOrderField = 127,
  CThostFtdcErrExecOrderActionField = 128,
  CThostFtdcQryErrExecOrderActionField = 129,
  CThostFtdcOptionInstrTradingRightField = 130,
  CThostFtdcQryOptionInstrTradingRightField = 131,
  CThostFtdcInputForQuoteField = 132,
  CThostFtdcForQuoteField = 133,
  CThostFtdcQryForQuoteField = 134,
  CThostFtdcExchangeForQuoteField = 135,
  CThostFtdcQryExchangeForQuoteField = 136,
  CThostFtdcInputQuoteField = 137,
  CThostFtdcInputQuoteActionField = 138,
  CThostFtdcQuoteField = 139,
  CThostFtdcQuoteActionField = 140,
  CThostFtdcQryQuoteField = 141,
  CThostFtdcExchangeQuoteField = 142,
  CThostFtdcQryExchangeQuoteField = 143,
  CThostFtdcQryQuoteActionField = 144,
  CThostFtdcExchangeQuoteActionField = 145,
  CThostFtdcQryExchangeQuoteActionField = 146,
  CThostFtdcOptionInstrDeltaField = 147,
  CThostFtdcForQuoteRspField = 148,
  CThostFtdcStrikeOffsetField = 149,
  CThostFtdcQryStrikeOffsetField = 150,
  CThostFtdcInputLockField = 151,
  CThostFtdcLockField = 152,
  CThostFtdcQryLockField = 153,
  CThostFtdcLockPositionField = 154,
  CThostFtdcQryLockPositionField = 155,
  CThostFtdcETFOptionInstrCommRateField = 156,
  CThostFtdcQryETFOptionInstrCommRateField = 157,
  CThostFtdcPosiFreezeField = 158,
  CThostFtdcQryExchangeLockField = 159,
  CThostFtdcExchangeLockField = 160,
  CThostFtdcExchangeExecOrderActionErrorField = 161,
  CThostFtdcInputBatchOrderActionField = 162,
  CThostFtdcBatchOrderActionField = 163,
  CThostFtdcExchangeBatchOrderActionField = 164,
  CThostFtdcQryBatchOrderActionField = 165,
  CThostFtdcLimitPosiField = 166,
  CThostFtdcQryLimitPosiField = 167,
  CThostFtdcBrokerLimitPosiField = 168,
  CThostFtdcQryBrokerLimitPosiField = 169,
  CThostFtdcLimitPosiSField = 170,
  CThostFtdcQryLimitPosiSField = 171,
  CThostFtdcLimitPosiParamField = 172,
  CThostFtdcBrokerLimitPosiParamField = 173,
  CThostFtdcLimitPosiParamSField = 174,
  CThostFtdcInputStockDisposalActionField = 175,
  CThostFtdcStockDisposalActionField = 176,
  CThostFtdcQryStockDisposalActionField = 177,
  CThostFtdcExchangeStockDisposalActionField = 178,
  CThostFtdcQryExchangeStockDisposalActionField = 179,
  CThostFtdcQryErrStockDisposalActionField = 180,
  CThostFtdcExchangeStockDisposalActionErrorField = 181,
  CThostFtdcErrStockDisposalActionField = 182,
  CThostFtdcInvestorLevelField = 183,
  CThostFtdcCombInstrumentGuardField = 184,
  CThostFtdcQryCombInstrumentGuardField = 185,
  CThostFtdcInputCombActionField = 186,
  CThostFtdcCombActionField = 187,
  CThostFtdcQryCombActionField = 188,
  CThostFtdcExchangeCombActionField = 189,
  CThostFtdcQryExchangeCombActionField = 190,
  CThostFtdcProductExchRateField = 191,
  CThostFtdcQryProductExchRateField = 192,
  CThostFtdcInputDesignateField = 193,
  CThostFtdcDesignateField = 194,
  CThostFtdcQryDesignateField = 195,
  CThostFtdcExchangeDesignateField = 196,
  CThostFtdcInputStockDisposalField = 197,
  CThostFtdcStockDisposalField = 198,
  CThostFtdcQryStockDisposalField = 199,
  CThostFtdcExchangeStockDisposalField = 200,
  CThostFtdcQryInvestorLevelField = 201,
  CThostFtdcQryForQuoteParamField = 202,
  CThostFtdcForQuoteParamField = 203,
  CThostFtdcQryExecFreezeField = 204,
  CThostFtdcExecFreezeField = 205,
  CThostFtdcMarketDataField = 206,
  CThostFtdcMarketDataBaseField = 207,
  CThostFtdcMarketDataStaticField = 208,
  CThostFtdcMarketDataLastMatchField = 209,
  CThostFtdcMarketDataBestPriceField = 210,
  CThostFtdcMarketDataBid23Field = 211,
  CThostFtdcMarketDataAsk23Field = 212,
  CThostFtdcMarketDataBid45Field = 213,
  CThostFtdcMarketDataAsk45Field = 214,
  CThostFtdcMarketDataUpdateTimeField = 215,
  CThostFtdcMarketDataExchangeField = 216,
  CThostFtdcSpecificInstrumentField = 217,
  CThostFtdcInstrumentStatusField = 218,
  CThostFtdcQryInstrumentStatusField = 219,
  CThostFtdcInvestorAccountField = 220,
  CThostFtdcPositionProfitAlgorithmField = 221,
  CThostFtdcDiscountField = 222,
  CThostFtdcQryTransferBankField = 223,
  CThostFtdcTransferBankField = 224,
  CThostFtdcQryInvestorPositionDetailField = 225,
  CThostFtdcInvestorPositionDetailField = 226,
  CThostFtdcTradingAccountPasswordField = 227,
  CThostFtdcMDTraderOfferField = 228,
  CThostFtdcQryMDTraderOfferField = 229,
  CThostFtdcQryNoticeField = 230,
  CThostFtdcNoticeField = 231,
  CThostFtdcUserRightField = 232,
  CThostFtdcQrySettlementInfoConfirmField = 233,
  CThostFtdcLoadSettlementInfoField = 234,
  CThostFtdcBrokerWithdrawAlgorithmField = 235,
  CThostFtdcTradingAccountPasswordUpdateV1Field = 236,
  CThostFtdcTradingAccountPasswordUpdateField = 237,
  CThostFtdcQryCombinationLegField = 238,
  CThostFtdcQrySyncStatusField = 239,
  CThostFtdcCombinationLegField = 240,
  CThostFtdcSyncStatusField = 241,
  CThostFtdcQryLinkManField = 242,
  CThostFtdcLinkManField = 243,
  CThostFtdcQryBrokerUserEventField = 244,
  CThostFtdcBrokerUserEventField = 245,
  CThostFtdcQryContractBankField = 246,
  CThostFtdcContractBankField = 247,
  CThostFtdcInvestorPositionCombineDetailField = 248,
  CThostFtdcParkedOrderField = 249,
  CThostFtdcParkedOrderActionField = 250,
  CThostFtdcQryParkedOrderField = 251,
  CThostFtdcQryParkedOrderActionField = 252,
  CThostFtdcRemoveParkedOrderField = 253,
  CThostFtdcRemoveParkedOrderActionField = 254,
  CThostFtdcInvestorWithdrawAlgorithmField = 255,
  CThostFtdcQryInvestorPositionCombineDetailField = 256,
  CThostFtdcMarketDataAveragePriceField = 257,
  CThostFtdcVerifyInvestorPasswordField = 258,
  CThostFtdcUserIPField = 259,
  CThostFtdcTradingNoticeInfoField = 260,
  CThostFtdcTradingNoticeField = 261,
  CThostFtdcQryTradingNoticeField = 262,
  CThostFtdcQryErrOrderField = 263,
  CThostFtdcErrOrderField = 264,
  CThostFtdcErrorConditionalOrderField = 265,
  CThostFtdcQryErrOrderActionField = 266,
  CThostFtdcErrOrderActionField = 267,
  CThostFtdcQryExchangeSequenceField = 268,
  CThostFtdcExchangeSequenceField = 269,
  CThostFtdcQueryMaxOrderVolumeWithPriceField = 270,
  CThostFtdcQryBrokerTradingParamsField = 271,
  CThostFtdcBrokerTradingParamsField = 272,
  CThostFtdcQryBrokerTradingAlgosField = 273,
  CThostFtdcBrokerTradingAlgosField = 274,
  CThostFtdcQueryBrokerDepositField = 275,
  CThostFtdcBrokerDepositField = 276,
  CThostFtdcQryCFMMCBrokerKeyField = 277,
  CThostFtdcCFMMCBrokerKeyField = 278,
  CThostFtdcCFMMCTradingAccountKeyField = 279,
  CThostFtdcQryCFMMCTradingAccountKeyField = 280,
  CThostFtdcBrokerUserOTPParamField = 281,
  CThostFtdcManualSyncBrokerUserOTPField = 282,
  CThostFtdcCommRateModelField = 283,
  CThostFtdcQryCommRateModelField = 284,
  CThostFtdcMarginModelField = 285,
  CThostFtdcQryMarginModelField = 286,
  CThostFtdcEWarrantOffsetField = 287,
  CThostFtdcQryEWarrantOffsetField = 288,
  CThostFtdcQryInvestorProductGroupMarginField = 289,
  CThostFtdcInvestorProductGroupMarginField = 290,
  CThostFtdcQueryCFMMCTradingAccountTokenField = 291,
  CThostFtdcCFMMCTradingAccountTokenField = 292,
  CThostFtdcInmessageionRightField = 293,
  CThostFtdcQryProductGroupField = 294,
  CThostFtdcProductGroupField = 295,
  CThostFtdcReqOpenAccountField = 296,
  CThostFtdcReqCancelAccountField = 297,
  CThostFtdcReqChangeAccountField = 298,
  CThostFtdcReqTransferField = 299,
  CThostFtdcRspTransferField = 300,
  CThostFtdcReqRepealField = 301,
  CThostFtdcRspRepealField = 302,
  CThostFtdcReqQueryAccountField = 303,
  CThostFtdcRspQueryAccountField = 304,
  CThostFtdcFutureSignIOField = 305,
  CThostFtdcRspFutureSignInField = 306,
  CThostFtdcReqFutureSignOutField = 307,
  CThostFtdcRspFutureSignOutField = 308,
  CThostFtdcReqQueryTradeResultBySerialField = 309,
  CThostFtdcRspQueryTradeResultBySerialField = 310,
  CThostFtdcReqDayEndFileReadyField = 311,
  CThostFtdcReturnResultField = 312,
  CThostFtdcVerifyFuturePasswordField = 313,
  CThostFtdcVerifyCustInfoField = 314,
  CThostFtdcVerifyFuturePasswordAndCustInfoField = 315,
  CThostFtdcDepositResultInformField = 316,
  CThostFtdcReqSyncKeyField = 317,
  CThostFtdcRspSyncKeyField = 318,
  CThostFtdcNotifyQueryAccountField = 319,
  CThostFtdcTransferSerialField = 320,
  CThostFtdcQryTransferSerialField = 321,
  CThostFtdcNotifyFutureSignInField = 322,
  CThostFtdcNotifyFutureSignOutField = 323,
  CThostFtdcNotifySyncKeyField = 324,
  CThostFtdcQryAccountregisterField = 325,
  CThostFtdcAccountregisterField = 326,
  CThostFtdcOpenAccountField = 327,
  CThostFtdcCancelAccountField = 328,
  CThostFtdcChangeAccountField = 329,
  CThostFtdcSecAgentACIDMapField = 330,
  CThostFtdcQrySecAgentACIDMapField = 331,
  CThostFtdcUserRightsAssignField = 332,
  CThostFtdcBrokerUserRightAssignField = 333,
  CThostFtdcDRTransferField = 334,
  CThostFtdcFensUserInfoField = 335,
  CThostFtdcCurrTransferIdentityField = 336,
  CThostFtdcLoginForbiddenUserField = 337,
  CThostFtdcQryLoginForbiddenUserField = 338,
  CThostFtdcMulticastGroupInfoField = 339,
  CThostFtdcTradingAccountReserveField = 340,
  CThostFtdcDBFRecordField = 341,
  ctprtnconnect = 342,
  ctpheartwarning = 343,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = CThostFtdcDisseminationField;
const MsgType MsgType_MAX = ctpheartwarning;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class ProtoMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guosen.msg.ProtoMsg) */ {
 public:
  ProtoMsg();
  virtual ~ProtoMsg();

  ProtoMsg(const ProtoMsg& from);

  inline ProtoMsg& operator=(const ProtoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoMsg(ProtoMsg&& from) noexcept
    : ProtoMsg() {
    *this = ::std::move(from);
  }

  inline ProtoMsg& operator=(ProtoMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoMsg* internal_default_instance() {
    return reinterpret_cast<const ProtoMsg*>(
               &_ProtoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProtoMsg* other);
  friend void swap(ProtoMsg& a, ProtoMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoMsg* New() const final {
    return CreateMaybeMessage<ProtoMsg>(NULL);
  }

  ProtoMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtoMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtoMsg& from);
  void MergeFrom(const ProtoMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .guosen.msg.MsgType head = 1;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  ::guosen::msg::MsgType head() const;
  void set_head(::guosen::msg::MsgType value);

  // @@protoc_insertion_point(class_scope:guosen.msg.ProtoMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  int head_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guosen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CtpHeartWarning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guosen.msg.CtpHeartWarning) */ {
 public:
  CtpHeartWarning();
  virtual ~CtpHeartWarning();

  CtpHeartWarning(const CtpHeartWarning& from);

  inline CtpHeartWarning& operator=(const CtpHeartWarning& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CtpHeartWarning(CtpHeartWarning&& from) noexcept
    : CtpHeartWarning() {
    *this = ::std::move(from);
  }

  inline CtpHeartWarning& operator=(CtpHeartWarning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtpHeartWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpHeartWarning* internal_default_instance() {
    return reinterpret_cast<const CtpHeartWarning*>(
               &_CtpHeartWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CtpHeartWarning* other);
  friend void swap(CtpHeartWarning& a, CtpHeartWarning& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpHeartWarning* New() const final {
    return CreateMaybeMessage<CtpHeartWarning>(NULL);
  }

  CtpHeartWarning* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CtpHeartWarning>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CtpHeartWarning& from);
  void MergeFrom(const CtpHeartWarning& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpHeartWarning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ntimelapse = 1;
  void clear_ntimelapse();
  static const int kNtimelapseFieldNumber = 1;
  ::google::protobuf::int32 ntimelapse() const;
  void set_ntimelapse(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:guosen.msg.CtpHeartWarning)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ntimelapse_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guosen_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CtpRtnConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:guosen.msg.CtpRtnConnect) */ {
 public:
  CtpRtnConnect();
  virtual ~CtpRtnConnect();

  CtpRtnConnect(const CtpRtnConnect& from);

  inline CtpRtnConnect& operator=(const CtpRtnConnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CtpRtnConnect(CtpRtnConnect&& from) noexcept
    : CtpRtnConnect() {
    *this = ::std::move(from);
  }

  inline CtpRtnConnect& operator=(CtpRtnConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtpRtnConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtpRtnConnect* internal_default_instance() {
    return reinterpret_cast<const CtpRtnConnect*>(
               &_CtpRtnConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CtpRtnConnect* other);
  friend void swap(CtpRtnConnect& a, CtpRtnConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtpRtnConnect* New() const final {
    return CreateMaybeMessage<CtpRtnConnect>(NULL);
  }

  CtpRtnConnect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CtpRtnConnect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CtpRtnConnect& from);
  void MergeFrom(const CtpRtnConnect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtpRtnConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // int32 nreason = 2;
  void clear_nreason();
  static const int kNreasonFieldNumber = 2;
  ::google::protobuf::int32 nreason() const;
  void set_nreason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:guosen.msg.CtpRtnConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  ::google::protobuf::int32 nreason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_guosen_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoMsg

// .guosen.msg.MsgType head = 1;
inline void ProtoMsg::clear_head() {
  head_ = 0;
}
inline ::guosen::msg::MsgType ProtoMsg::head() const {
  // @@protoc_insertion_point(field_get:guosen.msg.ProtoMsg.head)
  return static_cast< ::guosen::msg::MsgType >(head_);
}
inline void ProtoMsg::set_head(::guosen::msg::MsgType value) {
  
  head_ = value;
  // @@protoc_insertion_point(field_set:guosen.msg.ProtoMsg.head)
}

// bytes body = 2;
inline void ProtoMsg::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoMsg::body() const {
  // @@protoc_insertion_point(field_get:guosen.msg.ProtoMsg.body)
  return body_.GetNoArena();
}
inline void ProtoMsg::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:guosen.msg.ProtoMsg.body)
}
#if LANG_CXX11
inline void ProtoMsg::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:guosen.msg.ProtoMsg.body)
}
#endif
inline void ProtoMsg::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:guosen.msg.ProtoMsg.body)
}
inline void ProtoMsg::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:guosen.msg.ProtoMsg.body)
}
inline ::std::string* ProtoMsg::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:guosen.msg.ProtoMsg.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoMsg::release_body() {
  // @@protoc_insertion_point(field_release:guosen.msg.ProtoMsg.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoMsg::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:guosen.msg.ProtoMsg.body)
}

// -------------------------------------------------------------------

// CtpHeartWarning

// int32 ntimelapse = 1;
inline void CtpHeartWarning::clear_ntimelapse() {
  ntimelapse_ = 0;
}
inline ::google::protobuf::int32 CtpHeartWarning::ntimelapse() const {
  // @@protoc_insertion_point(field_get:guosen.msg.CtpHeartWarning.ntimelapse)
  return ntimelapse_;
}
inline void CtpHeartWarning::set_ntimelapse(::google::protobuf::int32 value) {
  
  ntimelapse_ = value;
  // @@protoc_insertion_point(field_set:guosen.msg.CtpHeartWarning.ntimelapse)
}

// -------------------------------------------------------------------

// CtpRtnConnect

// bool status = 1;
inline void CtpRtnConnect::clear_status() {
  status_ = false;
}
inline bool CtpRtnConnect::status() const {
  // @@protoc_insertion_point(field_get:guosen.msg.CtpRtnConnect.status)
  return status_;
}
inline void CtpRtnConnect::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:guosen.msg.CtpRtnConnect.status)
}

// int32 nreason = 2;
inline void CtpRtnConnect::clear_nreason() {
  nreason_ = 0;
}
inline ::google::protobuf::int32 CtpRtnConnect::nreason() const {
  // @@protoc_insertion_point(field_get:guosen.msg.CtpRtnConnect.nreason)
  return nreason_;
}
inline void CtpRtnConnect::set_nreason(::google::protobuf::int32 value) {
  
  nreason_ = value;
  // @@protoc_insertion_point(field_set:guosen.msg.CtpRtnConnect.nreason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace guosen

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::guosen::msg::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::guosen::msg::MsgType>() {
  return ::guosen::msg::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_guosen_2eproto
