// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guosen.proto

#include "guosen.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace guosen {
namespace msg {
class ProtoMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoMsg>
      _instance;
} _ProtoMsg_default_instance_;
class CtpHeartWarningDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpHeartWarning>
      _instance;
} _CtpHeartWarning_default_instance_;
class CtpRtnConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpRtnConnect>
      _instance;
} _CtpRtnConnect_default_instance_;
}  // namespace msg
}  // namespace guosen
namespace protobuf_guosen_2eproto {
static void InitDefaultsProtoMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guosen::msg::_ProtoMsg_default_instance_;
    new (ptr) ::guosen::msg::ProtoMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guosen::msg::ProtoMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProtoMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProtoMsg}, {}};

static void InitDefaultsCtpHeartWarning() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guosen::msg::_CtpHeartWarning_default_instance_;
    new (ptr) ::guosen::msg::CtpHeartWarning();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guosen::msg::CtpHeartWarning::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpHeartWarning =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpHeartWarning}, {}};

static void InitDefaultsCtpRtnConnect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guosen::msg::_CtpRtnConnect_default_instance_;
    new (ptr) ::guosen::msg::CtpRtnConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guosen::msg::CtpRtnConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpRtnConnect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpRtnConnect}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ProtoMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpHeartWarning.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpRtnConnect.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::ProtoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::ProtoMsg, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::ProtoMsg, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::CtpHeartWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::CtpHeartWarning, ntimelapse_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::CtpRtnConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::CtpRtnConnect, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::guosen::msg::CtpRtnConnect, nreason_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::guosen::msg::ProtoMsg)},
  { 7, -1, sizeof(::guosen::msg::CtpHeartWarning)},
  { 13, -1, sizeof(::guosen::msg::CtpRtnConnect)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::guosen::msg::_ProtoMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::guosen::msg::_CtpHeartWarning_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::guosen::msg::_CtpRtnConnect_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "guosen.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014guosen.proto\022\nguosen.msg\";\n\010ProtoMsg\022!"
      "\n\004head\030\001 \001(\0162\023.guosen.msg.MsgType\022\014\n\004bod"
      "y\030\002 \001(\014\"%\n\017CtpHeartWarning\022\022\n\nntimelapse"
      "\030\001 \001(\005\"0\n\rCtpRtnConnect\022\016\n\006status\030\001 \001(\010\022"
      "\017\n\007nreason\030\002 \001(\005*\352e\n\007MsgType\022 \n\034CThostFt"
      "dcDisseminationField\020\000\022\037\n\033CThostFtdcReqU"
      "serLoginField\020\001\022\037\n\033CThostFtdcRspUserLogi"
      "nField\020\002\022\035\n\031CThostFtdcUserLogoutField\020\003\022"
      "\"\n\036CThostFtdcForceUserLogoutField\020\004\022\"\n\036C"
      "ThostFtdcReqAuthenticateField\020\005\022\"\n\036CThos"
      "tFtdcRspAuthenticateField\020\006\022%\n!CThostFtd"
      "cAuthenticationInfoField\020\007\022!\n\035CThostFtdc"
      "TransferHeaderField\020\010\022*\n&CThostFtdcTrans"
      "ferBankToFutureReqField\020\t\022*\n&CThostFtdcT"
      "ransferBankToFutureRspField\020\n\022*\n&CThostF"
      "tdcTransferFutureToBankReqField\020\013\022*\n&CTh"
      "ostFtdcTransferFutureToBankRspField\020\014\022%\n"
      "!CThostFtdcTransferQryBankReqField\020\r\022%\n!"
      "CThostFtdcTransferQryBankRspField\020\016\022\'\n#C"
      "ThostFtdcTransferQryDetailReqField\020\017\022\'\n#"
      "CThostFtdcTransferQryDetailRspField\020\020\022\032\n"
      "\026CThostFtdcRspInfoField\020\021\022\033\n\027CThostFtdcE"
      "xchangeField\020\022\022\032\n\026CThostFtdcProductField"
      "\020\023\022\035\n\031CThostFtdcInstrumentField\020\024\022\031\n\025CTh"
      "ostFtdcBrokerField\020\025\022\031\n\025CThostFtdcTrader"
      "Field\020\026\022\033\n\027CThostFtdcInvestorField\020\027\022\036\n\032"
      "CThostFtdcTradingCodeField\020\030\022\035\n\031CThostFt"
      "dcPartBrokerField\020\031\022\034\n\030CThostFtdcSuperUs"
      "erField\020\032\022$\n CThostFtdcSuperUserFunction"
      "Field\020\033\022 \n\034CThostFtdcInvestorGroupField\020"
      "\034\022!\n\035CThostFtdcTradingAccountField\020\035\022#\n\037"
      "CThostFtdcInvestorPositionField\020\036\022\'\n#CTh"
      "ostFtdcInstrumentMarginRateField\020\037\022+\n\'CT"
      "hostFtdcInstrumentCommissionRateField\020 \022"
      "\"\n\036CThostFtdcDepthMarketDataField\020!\022)\n%C"
      "ThostFtdcInstrumentTradingRightField\020\"\022\035"
      "\n\031CThostFtdcBrokerUserField\020#\022%\n!CThostF"
      "tdcBrokerUserPasswordField\020$\022%\n!CThostFt"
      "dcBrokerUserFunctionField\020%\022\036\n\032CThostFtd"
      "cTraderOfferField\020&\022!\n\035CThostFtdcSettlem"
      "entInfoField\020\'\022-\n)CThostFtdcInstrumentMa"
      "rginRateAdjustField\020(\022%\n!CThostFtdcExcha"
      "ngeMarginRateField\020)\022+\n\'CThostFtdcExchan"
      "geMarginRateAdjustField\020*\022\037\n\033CThostFtdcE"
      "xchangeRateField\020+\022 \n\034CThostFtdcSettleme"
      "ntRefField\020,\022\036\n\032CThostFtdcCurrentTimeFie"
      "ld\020-\022\034\n\030CThostFtdcCommPhaseField\020.\022\034\n\030CT"
      "hostFtdcLoginInfoField\020/\022\034\n\030CThostFtdcLo"
      "goutAllField\0200\022\036\n\032CThostFtdcFrontStatusF"
      "ield\0201\022%\n!CThostFtdcUserPasswordUpdateFi"
      "eld\0202\022\035\n\031CThostFtdcInputOrderField\0203\022\030\n\024"
      "CThostFtdcOrderField\0204\022 \n\034CThostFtdcExch"
      "angeOrderField\0205\022+\n\'CThostFtdcExchangeOr"
      "derInsertErrorField\0206\022#\n\037CThostFtdcInput"
      "OrderActionField\0207\022\036\n\032CThostFtdcOrderAct"
      "ionField\0208\022&\n\"CThostFtdcExchangeOrderAct"
      "ionField\0209\022+\n\'CThostFtdcExchangeOrderAct"
      "ionErrorField\020:\022 \n\034CThostFtdcExchangeTra"
      "deField\020;\022\030\n\024CThostFtdcTradeField\020<\022\036\n\032C"
      "ThostFtdcUserSessionField\020=\022&\n\"CThostFtd"
      "cQueryMaxOrderVolumeField\020>\022(\n$CThostFtd"
      "cSettlementInfoConfirmField\020\?\022\036\n\032CThostF"
      "tdcSyncDepositField\020@\022#\n\037CThostFtdcSyncF"
      "undMortgageField\020A\022\035\n\031CThostFtdcBrokerSy"
      "ncField\020B\022\"\n\036CThostFtdcSyncingInvestorFi"
      "eld\020C\022%\n!CThostFtdcSyncingTradingCodeFie"
      "ld\020D\022\'\n#CThostFtdcSyncingInvestorGroupFi"
      "eld\020E\022(\n$CThostFtdcSyncingTradingAccount"
      "Field\020F\022*\n&CThostFtdcSyncingInvestorPosi"
      "tionField\020G\022.\n*CThostFtdcSyncingInstrume"
      "ntMarginRateField\020H\0222\n.CThostFtdcSyncing"
      "InstrumentCommissionRateField\020I\0220\n,CThos"
      "tFtdcSyncingInstrumentTradingRightField\020"
      "J\022\033\n\027CThostFtdcQryOrderField\020K\022\033\n\027CThost"
      "FtdcQryTradeField\020L\022&\n\"CThostFtdcQryInve"
      "storPositionField\020M\022$\n CThostFtdcQryTrad"
      "ingAccountField\020N\022\036\n\032CThostFtdcQryInvest"
      "orField\020O\022!\n\035CThostFtdcQryTradingCodeFie"
      "ld\020P\022#\n\037CThostFtdcQryInvestorGroupField\020"
      "Q\022*\n&CThostFtdcQryInstrumentMarginRateFi"
      "eld\020R\022.\n*CThostFtdcQryInstrumentCommissi"
      "onRateField\020S\022,\n(CThostFtdcQryInstrument"
      "TradingRightField\020T\022\034\n\030CThostFtdcQryBrok"
      "erField\020U\022\034\n\030CThostFtdcQryTraderField\020V\022"
      "\'\n#CThostFtdcQrySuperUserFunctionField\020W"
      "\022!\n\035CThostFtdcQryUserSessionField\020X\022 \n\034C"
      "ThostFtdcQryPartBrokerField\020Y\022!\n\035CThostF"
      "tdcQryFrontStatusField\020Z\022#\n\037CThostFtdcQr"
      "yExchangeOrderField\020[\022!\n\035CThostFtdcQryOr"
      "derActionField\020\\\022)\n%CThostFtdcQryExchang"
      "eOrderActionField\020]\022\037\n\033CThostFtdcQrySupe"
      "rUserField\020^\022\036\n\032CThostFtdcQryExchangeFie"
      "ld\020_\022\035\n\031CThostFtdcQryProductField\020`\022 \n\034C"
      "ThostFtdcQryInstrumentField\020a\022%\n!CThostF"
      "tdcQryDepthMarketDataField\020b\022 \n\034CThostFt"
      "dcQryBrokerUserField\020c\022(\n$CThostFtdcQryB"
      "rokerUserFunctionField\020d\022!\n\035CThostFtdcQr"
      "yTraderOfferField\020e\022!\n\035CThostFtdcQrySync"
      "DepositField\020f\022$\n CThostFtdcQrySettlemen"
      "tInfoField\020g\022(\n$CThostFtdcQryExchangeMar"
      "ginRateField\020h\022.\n*CThostFtdcQryExchangeM"
      "arginRateAdjustField\020i\022\"\n\036CThostFtdcQryE"
      "xchangeRateField\020j\022&\n\"CThostFtdcQrySyncF"
      "undMortgageField\020k\022\036\n\032CThostFtdcQryHisOr"
      "derField\020l\022(\n$CThostFtdcOptionInstrMiniM"
      "arginField\020m\022*\n&CThostFtdcOptionInstrMar"
      "ginAdjustField\020n\022&\n\"CThostFtdcOptionInst"
      "rCommRateField\020o\022\'\n#CThostFtdcOptionInst"
      "rTradeCostField\020p\022*\n&CThostFtdcQryOption"
      "InstrTradeCostField\020q\022)\n%CThostFtdcQryOp"
      "tionInstrCommRateField\020r\022\035\n\031CThostFtdcIn"
      "dexPriceField\020s\022!\n\035CThostFtdcInputExecOr"
      "derField\020t\022\'\n#CThostFtdcInputExecOrderAc"
      "tionField\020u\022\034\n\030CThostFtdcExecOrderField\020"
      "v\022\"\n\036CThostFtdcExecOrderActionField\020w\022\037\n"
      "\033CThostFtdcQryExecOrderField\020x\022$\n CThost"
      "FtdcExchangeExecOrderField\020y\022\'\n#CThostFt"
      "dcQryExchangeExecOrderField\020z\022%\n!CThostF"
      "tdcQryExecOrderActionField\020{\022*\n&CThostFt"
      "dcExchangeExecOrderActionField\020|\022-\n)CTho"
      "stFtdcQryExchangeExecOrderActionField\020}\022"
      "\037\n\033CThostFtdcErrExecOrderField\020~\022\"\n\036CTho"
      "stFtdcQryErrExecOrderField\020\177\022&\n!CThostFt"
      "dcErrExecOrderActionField\020\200\001\022)\n$CThostFt"
      "dcQryErrExecOrderActionField\020\201\001\022+\n&CThos"
      "tFtdcOptionInstrTradingRightField\020\202\001\022.\n)"
      "CThostFtdcQryOptionInstrTradingRightFiel"
      "d\020\203\001\022!\n\034CThostFtdcInputForQuoteField\020\204\001\022"
      "\034\n\027CThostFtdcForQuoteField\020\205\001\022\037\n\032CThostF"
      "tdcQryForQuoteField\020\206\001\022$\n\037CThostFtdcExch"
      "angeForQuoteField\020\207\001\022\'\n\"CThostFtdcQryExc"
      "hangeForQuoteField\020\210\001\022\036\n\031CThostFtdcInput"
      "QuoteField\020\211\001\022$\n\037CThostFtdcInputQuoteAct"
      "ionField\020\212\001\022\031\n\024CThostFtdcQuoteField\020\213\001\022\037"
      "\n\032CThostFtdcQuoteActionField\020\214\001\022\034\n\027CThos"
      "tFtdcQryQuoteField\020\215\001\022!\n\034CThostFtdcExcha"
      "ngeQuoteField\020\216\001\022$\n\037CThostFtdcQryExchang"
      "eQuoteField\020\217\001\022\"\n\035CThostFtdcQryQuoteActi"
      "onField\020\220\001\022\'\n\"CThostFtdcExchangeQuoteAct"
      "ionField\020\221\001\022*\n%CThostFtdcQryExchangeQuot"
      "eActionField\020\222\001\022$\n\037CThostFtdcOptionInstr"
      "DeltaField\020\223\001\022\037\n\032CThostFtdcForQuoteRspFi"
      "eld\020\224\001\022 \n\033CThostFtdcStrikeOffsetField\020\225\001"
      "\022#\n\036CThostFtdcQryStrikeOffsetField\020\226\001\022\035\n"
      "\030CThostFtdcInputLockField\020\227\001\022\030\n\023CThostFt"
      "dcLockField\020\230\001\022\033\n\026CThostFtdcQryLockField"
      "\020\231\001\022 \n\033CThostFtdcLockPositionField\020\232\001\022#\n"
      "\036CThostFtdcQryLockPositionField\020\233\001\022*\n%CT"
      "hostFtdcETFOptionInstrCommRateField\020\234\001\022-"
      "\n(CThostFtdcQryETFOptionInstrCommRateFie"
      "ld\020\235\001\022\036\n\031CThostFtdcPosiFreezeField\020\236\001\022#\n"
      "\036CThostFtdcQryExchangeLockField\020\237\001\022 \n\033CT"
      "hostFtdcExchangeLockField\020\240\001\0220\n+CThostFt"
      "dcExchangeExecOrderActionErrorField\020\241\001\022)"
      "\n$CThostFtdcInputBatchOrderActionField\020\242"
      "\001\022$\n\037CThostFtdcBatchOrderActionField\020\243\001\022"
      ",\n\'CThostFtdcExchangeBatchOrderActionFie"
      "ld\020\244\001\022\'\n\"CThostFtdcQryBatchOrderActionFi"
      "eld\020\245\001\022\035\n\030CThostFtdcLimitPosiField\020\246\001\022 \n"
      "\033CThostFtdcQryLimitPosiField\020\247\001\022#\n\036CThos"
      "tFtdcBrokerLimitPosiField\020\250\001\022&\n!CThostFt"
      "dcQryBrokerLimitPosiField\020\251\001\022\036\n\031CThostFt"
      "dcLimitPosiSField\020\252\001\022!\n\034CThostFtdcQryLim"
      "itPosiSField\020\253\001\022\"\n\035CThostFtdcLimitPosiPa"
      "ramField\020\254\001\022(\n#CThostFtdcBrokerLimitPosi"
      "ParamField\020\255\001\022#\n\036CThostFtdcLimitPosiPara"
      "mSField\020\256\001\022,\n\'CThostFtdcInputStockDispos"
      "alActionField\020\257\001\022\'\n\"CThostFtdcStockDispo"
      "salActionField\020\260\001\022*\n%CThostFtdcQryStockD"
      "isposalActionField\020\261\001\022/\n*CThostFtdcExcha"
      "ngeStockDisposalActionField\020\262\001\0222\n-CThost"
      "FtdcQryExchangeStockDisposalActionField\020"
      "\263\001\022-\n(CThostFtdcQryErrStockDisposalActio"
      "nField\020\264\001\0224\n/CThostFtdcExchangeStockDisp"
      "osalActionErrorField\020\265\001\022*\n%CThostFtdcErr"
      "StockDisposalActionField\020\266\001\022!\n\034CThostFtd"
      "cInvestorLevelField\020\267\001\022\'\n\"CThostFtdcComb"
      "InstrumentGuardField\020\270\001\022*\n%CThostFtdcQry"
      "CombInstrumentGuardField\020\271\001\022#\n\036CThostFtd"
      "cInputCombActionField\020\272\001\022\036\n\031CThostFtdcCo"
      "mbActionField\020\273\001\022!\n\034CThostFtdcQryCombAct"
      "ionField\020\274\001\022&\n!CThostFtdcExchangeCombAct"
      "ionField\020\275\001\022)\n$CThostFtdcQryExchangeComb"
      "ActionField\020\276\001\022#\n\036CThostFtdcProductExchR"
      "ateField\020\277\001\022&\n!CThostFtdcQryProductExchR"
      "ateField\020\300\001\022\"\n\035CThostFtdcInputDesignateF"
      "ield\020\301\001\022\035\n\030CThostFtdcDesignateField\020\302\001\022 "
      "\n\033CThostFtdcQryDesignateField\020\303\001\022%\n CTho"
      "stFtdcExchangeDesignateField\020\304\001\022&\n!CThos"
      "tFtdcInputStockDisposalField\020\305\001\022!\n\034CThos"
      "tFtdcStockDisposalField\020\306\001\022$\n\037CThostFtdc"
      "QryStockDisposalField\020\307\001\022)\n$CThostFtdcEx"
      "changeStockDisposalField\020\310\001\022$\n\037CThostFtd"
      "cQryInvestorLevelField\020\311\001\022$\n\037CThostFtdcQ"
      "ryForQuoteParamField\020\312\001\022!\n\034CThostFtdcFor"
      "QuoteParamField\020\313\001\022!\n\034CThostFtdcQryExecF"
      "reezeField\020\314\001\022\036\n\031CThostFtdcExecFreezeFie"
      "ld\020\315\001\022\036\n\031CThostFtdcMarketDataField\020\316\001\022\"\n"
      "\035CThostFtdcMarketDataBaseField\020\317\001\022$\n\037CTh"
      "ostFtdcMarketDataStaticField\020\320\001\022\'\n\"CThos"
      "tFtdcMarketDataLastMatchField\020\321\001\022\'\n\"CTho"
      "stFtdcMarketDataBestPriceField\020\322\001\022#\n\036CTh"
      "ostFtdcMarketDataBid23Field\020\323\001\022#\n\036CThost"
      "FtdcMarketDataAsk23Field\020\324\001\022#\n\036CThostFtd"
      "cMarketDataBid45Field\020\325\001\022#\n\036CThostFtdcMa"
      "rketDataAsk45Field\020\326\001\022(\n#CThostFtdcMarke"
      "tDataUpdateTimeField\020\327\001\022&\n!CThostFtdcMar"
      "ketDataExchangeField\020\330\001\022&\n!CThostFtdcSpe"
      "cificInstrumentField\020\331\001\022$\n\037CThostFtdcIns"
      "trumentStatusField\020\332\001\022\'\n\"CThostFtdcQryIn"
      "strumentStatusField\020\333\001\022#\n\036CThostFtdcInve"
      "storAccountField\020\334\001\022+\n&CThostFtdcPositio"
      "nProfitAlgorithmField\020\335\001\022\034\n\027CThostFtdcDi"
      "scountField\020\336\001\022#\n\036CThostFtdcQryTransferB"
      "ankField\020\337\001\022 \n\033CThostFtdcTransferBankFie"
      "ld\020\340\001\022-\n(CThostFtdcQryInvestorPositionDe"
      "tailField\020\341\001\022*\n%CThostFtdcInvestorPositi"
      "onDetailField\020\342\001\022*\n%CThostFtdcTradingAcc"
      "ountPasswordField\020\343\001\022!\n\034CThostFtdcMDTrad"
      "erOfferField\020\344\001\022$\n\037CThostFtdcQryMDTrader"
      "OfferField\020\345\001\022\035\n\030CThostFtdcQryNoticeFiel"
      "d\020\346\001\022\032\n\025CThostFtdcNoticeField\020\347\001\022\035\n\030CTho"
      "stFtdcUserRightField\020\350\001\022,\n\'CThostFtdcQry"
      "SettlementInfoConfirmField\020\351\001\022&\n!CThostF"
      "tdcLoadSettlementInfoField\020\352\001\022+\n&CThostF"
      "tdcBrokerWithdrawAlgorithmField\020\353\001\0222\n-CT"
      "hostFtdcTradingAccountPasswordUpdateV1Fi"
      "eld\020\354\001\0220\n+CThostFtdcTradingAccountPasswo"
      "rdUpdateField\020\355\001\022%\n CThostFtdcQryCombina"
      "tionLegField\020\356\001\022!\n\034CThostFtdcQrySyncStat"
      "usField\020\357\001\022\"\n\035CThostFtdcCombinationLegFi"
      "eld\020\360\001\022\036\n\031CThostFtdcSyncStatusField\020\361\001\022\036"
      "\n\031CThostFtdcQryLinkManField\020\362\001\022\033\n\026CThost"
      "FtdcLinkManField\020\363\001\022&\n!CThostFtdcQryBrok"
      "erUserEventField\020\364\001\022#\n\036CThostFtdcBrokerU"
      "serEventField\020\365\001\022#\n\036CThostFtdcQryContrac"
      "tBankField\020\366\001\022 \n\033CThostFtdcContractBankF"
      "ield\020\367\001\0221\n,CThostFtdcInvestorPositionCom"
      "bineDetailField\020\370\001\022\037\n\032CThostFtdcParkedOr"
      "derField\020\371\001\022%\n CThostFtdcParkedOrderActi"
      "onField\020\372\001\022\"\n\035CThostFtdcQryParkedOrderFi"
      "eld\020\373\001\022(\n#CThostFtdcQryParkedOrderAction"
      "Field\020\374\001\022%\n CThostFtdcRemoveParkedOrderF"
      "ield\020\375\001\022+\n&CThostFtdcRemoveParkedOrderAc"
      "tionField\020\376\001\022-\n(CThostFtdcInvestorWithdr"
      "awAlgorithmField\020\377\001\0224\n/CThostFtdcQryInve"
      "storPositionCombineDetailField\020\200\002\022*\n%CTh"
      "ostFtdcMarketDataAveragePriceField\020\201\002\022*\n"
      "%CThostFtdcVerifyInvestorPasswordField\020\202"
      "\002\022\032\n\025CThostFtdcUserIPField\020\203\002\022%\n CThostF"
      "tdcTradingNoticeInfoField\020\204\002\022!\n\034CThostFt"
      "dcTradingNoticeField\020\205\002\022$\n\037CThostFtdcQry"
      "TradingNoticeField\020\206\002\022\037\n\032CThostFtdcQryEr"
      "rOrderField\020\207\002\022\034\n\027CThostFtdcErrOrderFiel"
      "d\020\210\002\022)\n$CThostFtdcErrorConditionalOrderF"
      "ield\020\211\002\022%\n CThostFtdcQryErrOrderActionFi"
      "eld\020\212\002\022\"\n\035CThostFtdcErrOrderActionField\020"
      "\213\002\022\'\n\"CThostFtdcQryExchangeSequenceField"
      "\020\214\002\022$\n\037CThostFtdcExchangeSequenceField\020\215"
      "\002\0220\n+CThostFtdcQueryMaxOrderVolumeWithPr"
      "iceField\020\216\002\022*\n%CThostFtdcQryBrokerTradin"
      "gParamsField\020\217\002\022\'\n\"CThostFtdcBrokerTradi"
      "ngParamsField\020\220\002\022)\n$CThostFtdcQryBrokerT"
      "radingAlgosField\020\221\002\022&\n!CThostFtdcBrokerT"
      "radingAlgosField\020\222\002\022&\n!CThostFtdcQueryBr"
      "okerDepositField\020\223\002\022!\n\034CThostFtdcBrokerD"
      "epositField\020\224\002\022%\n CThostFtdcQryCFMMCBrok"
      "erKeyField\020\225\002\022\"\n\035CThostFtdcCFMMCBrokerKe"
      "yField\020\226\002\022*\n%CThostFtdcCFMMCTradingAccou"
      "ntKeyField\020\227\002\022-\n(CThostFtdcQryCFMMCTradi"
      "ngAccountKeyField\020\230\002\022&\n!CThostFtdcBroker"
      "UserOTPParamField\020\231\002\022+\n&CThostFtdcManual"
      "SyncBrokerUserOTPField\020\232\002\022!\n\034CThostFtdcC"
      "ommRateModelField\020\233\002\022$\n\037CThostFtdcQryCom"
      "mRateModelField\020\234\002\022\037\n\032CThostFtdcMarginMo"
      "delField\020\235\002\022\"\n\035CThostFtdcQryMarginModelF"
      "ield\020\236\002\022\"\n\035CThostFtdcEWarrantOffsetField"
      "\020\237\002\022%\n CThostFtdcQryEWarrantOffsetField\020"
      "\240\002\0221\n,CThostFtdcQryInvestorProductGroupM"
      "arginField\020\241\002\022.\n)CThostFtdcInvestorProdu"
      "ctGroupMarginField\020\242\002\0221\n,CThostFtdcQuery"
      "CFMMCTradingAccountTokenField\020\243\002\022,\n\'CTho"
      "stFtdcCFMMCTradingAccountTokenField\020\244\002\022%"
      "\n CThostFtdcInmessageionRightField\020\245\002\022#\n"
      "\036CThostFtdcQryProductGroupField\020\246\002\022 \n\033CT"
      "hostFtdcProductGroupField\020\247\002\022\"\n\035CThostFt"
      "dcReqOpenAccountField\020\250\002\022$\n\037CThostFtdcRe"
      "qCancelAccountField\020\251\002\022$\n\037CThostFtdcReqC"
      "hangeAccountField\020\252\002\022\037\n\032CThostFtdcReqTra"
      "nsferField\020\253\002\022\037\n\032CThostFtdcRspTransferFi"
      "eld\020\254\002\022\035\n\030CThostFtdcReqRepealField\020\255\002\022\035\n"
      "\030CThostFtdcRspRepealField\020\256\002\022#\n\036CThostFt"
      "dcReqQueryAccountField\020\257\002\022#\n\036CThostFtdcR"
      "spQueryAccountField\020\260\002\022 \n\033CThostFtdcFutu"
      "reSignIOField\020\261\002\022#\n\036CThostFtdcRspFutureS"
      "ignInField\020\262\002\022$\n\037CThostFtdcReqFutureSign"
      "OutField\020\263\002\022$\n\037CThostFtdcRspFutureSignOu"
      "tField\020\264\002\022/\n*CThostFtdcReqQueryTradeResu"
      "ltBySerialField\020\265\002\022/\n*CThostFtdcRspQuery"
      "TradeResultBySerialField\020\266\002\022&\n!CThostFtd"
      "cReqDayEndFileReadyField\020\267\002\022 \n\033CThostFtd"
      "cReturnResultField\020\270\002\022(\n#CThostFtdcVerif"
      "yFuturePasswordField\020\271\002\022\"\n\035CThostFtdcVer"
      "ifyCustInfoField\020\272\002\0223\n.CThostFtdcVerifyF"
      "uturePasswordAndCustInfoField\020\273\002\022\'\n\"CTho"
      "stFtdcDepositResultInformField\020\274\002\022\036\n\031CTh"
      "ostFtdcReqSyncKeyField\020\275\002\022\036\n\031CThostFtdcR"
      "spSyncKeyField\020\276\002\022&\n!CThostFtdcNotifyQue"
      "ryAccountField\020\277\002\022\"\n\035CThostFtdcTransferS"
      "erialField\020\300\002\022%\n CThostFtdcQryTransferSe"
      "rialField\020\301\002\022&\n!CThostFtdcNotifyFutureSi"
      "gnInField\020\302\002\022\'\n\"CThostFtdcNotifyFutureSi"
      "gnOutField\020\303\002\022!\n\034CThostFtdcNotifySyncKey"
      "Field\020\304\002\022&\n!CThostFtdcQryAccountregister"
      "Field\020\305\002\022#\n\036CThostFtdcAccountregisterFie"
      "ld\020\306\002\022\037\n\032CThostFtdcOpenAccountField\020\307\002\022!"
      "\n\034CThostFtdcCancelAccountField\020\310\002\022!\n\034CTh"
      "ostFtdcChangeAccountField\020\311\002\022#\n\036CThostFt"
      "dcSecAgentACIDMapField\020\312\002\022&\n!CThostFtdcQ"
      "rySecAgentACIDMapField\020\313\002\022$\n\037CThostFtdcU"
      "serRightsAssignField\020\314\002\022)\n$CThostFtdcBro"
      "kerUserRightAssignField\020\315\002\022\036\n\031CThostFtdc"
      "DRTransferField\020\316\002\022 \n\033CThostFtdcFensUser"
      "InfoField\020\317\002\022(\n#CThostFtdcCurrTransferId"
      "entityField\020\320\002\022&\n!CThostFtdcLoginForbidd"
      "enUserField\020\321\002\022)\n$CThostFtdcQryLoginForb"
      "iddenUserField\020\322\002\022&\n!CThostFtdcMulticast"
      "GroupInfoField\020\323\002\022)\n$CThostFtdcTradingAc"
      "countReserveField\020\324\002\022\035\n\030CThostFtdcDBFRec"
      "ordField\020\325\002\022\022\n\rctprtnconnect\020\326\002\022\024\n\017ctphe"
      "artwarning\020\327\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 13221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guosen.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_guosen_2eproto
namespace guosen {
namespace msg {
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_guosen_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_guosen_2eproto::file_level_enum_descriptors[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ProtoMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoMsg::kHeadFieldNumber;
const int ProtoMsg::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoMsg::ProtoMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_guosen_2eproto::scc_info_ProtoMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:guosen.msg.ProtoMsg)
}
ProtoMsg::ProtoMsg(const ProtoMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  head_ = from.head_;
  // @@protoc_insertion_point(copy_constructor:guosen.msg.ProtoMsg)
}

void ProtoMsg::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = 0;
}

ProtoMsg::~ProtoMsg() {
  // @@protoc_insertion_point(destructor:guosen.msg.ProtoMsg)
  SharedDtor();
}

void ProtoMsg::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProtoMsg::descriptor() {
  ::protobuf_guosen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_guosen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoMsg& ProtoMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_guosen_2eproto::scc_info_ProtoMsg.base);
  return *internal_default_instance();
}


void ProtoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:guosen.msg.ProtoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = 0;
  _internal_metadata_.Clear();
}

bool ProtoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:guosen.msg.ProtoMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .guosen.msg.MsgType head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_head(static_cast< ::guosen::msg::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:guosen.msg.ProtoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:guosen.msg.ProtoMsg)
  return false;
#undef DO_
}

void ProtoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:guosen.msg.ProtoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .guosen.msg.MsgType head = 1;
  if (this->head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->head(), output);
  }

  // bytes body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:guosen.msg.ProtoMsg)
}

::google::protobuf::uint8* ProtoMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:guosen.msg.ProtoMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .guosen.msg.MsgType head = 1;
  if (this->head() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->head(), target);
  }

  // bytes body = 2;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guosen.msg.ProtoMsg)
  return target;
}

size_t ProtoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guosen.msg.ProtoMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // .guosen.msg.MsgType head = 1;
  if (this->head() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->head());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtoMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guosen.msg.ProtoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guosen.msg.ProtoMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guosen.msg.ProtoMsg)
    MergeFrom(*source);
  }
}

void ProtoMsg::MergeFrom(const ProtoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guosen.msg.ProtoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.head() != 0) {
    set_head(from.head());
  }
}

void ProtoMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guosen.msg.ProtoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMsg::CopyFrom(const ProtoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guosen.msg.ProtoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMsg::IsInitialized() const {
  return true;
}

void ProtoMsg::Swap(ProtoMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoMsg::InternalSwap(ProtoMsg* other) {
  using std::swap;
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProtoMsg::GetMetadata() const {
  protobuf_guosen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_guosen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CtpHeartWarning::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpHeartWarning::kNtimelapseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpHeartWarning::CtpHeartWarning()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_guosen_2eproto::scc_info_CtpHeartWarning.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:guosen.msg.CtpHeartWarning)
}
CtpHeartWarning::CtpHeartWarning(const CtpHeartWarning& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ntimelapse_ = from.ntimelapse_;
  // @@protoc_insertion_point(copy_constructor:guosen.msg.CtpHeartWarning)
}

void CtpHeartWarning::SharedCtor() {
  ntimelapse_ = 0;
}

CtpHeartWarning::~CtpHeartWarning() {
  // @@protoc_insertion_point(destructor:guosen.msg.CtpHeartWarning)
  SharedDtor();
}

void CtpHeartWarning::SharedDtor() {
}

void CtpHeartWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CtpHeartWarning::descriptor() {
  ::protobuf_guosen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_guosen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CtpHeartWarning& CtpHeartWarning::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_guosen_2eproto::scc_info_CtpHeartWarning.base);
  return *internal_default_instance();
}


void CtpHeartWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:guosen.msg.CtpHeartWarning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ntimelapse_ = 0;
  _internal_metadata_.Clear();
}

bool CtpHeartWarning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:guosen.msg.CtpHeartWarning)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ntimelapse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntimelapse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:guosen.msg.CtpHeartWarning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:guosen.msg.CtpHeartWarning)
  return false;
#undef DO_
}

void CtpHeartWarning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:guosen.msg.CtpHeartWarning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ntimelapse = 1;
  if (this->ntimelapse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntimelapse(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:guosen.msg.CtpHeartWarning)
}

::google::protobuf::uint8* CtpHeartWarning::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:guosen.msg.CtpHeartWarning)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ntimelapse = 1;
  if (this->ntimelapse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntimelapse(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guosen.msg.CtpHeartWarning)
  return target;
}

size_t CtpHeartWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guosen.msg.CtpHeartWarning)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ntimelapse = 1;
  if (this->ntimelapse() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntimelapse());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpHeartWarning::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guosen.msg.CtpHeartWarning)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpHeartWarning* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CtpHeartWarning>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guosen.msg.CtpHeartWarning)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guosen.msg.CtpHeartWarning)
    MergeFrom(*source);
  }
}

void CtpHeartWarning::MergeFrom(const CtpHeartWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guosen.msg.CtpHeartWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ntimelapse() != 0) {
    set_ntimelapse(from.ntimelapse());
  }
}

void CtpHeartWarning::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guosen.msg.CtpHeartWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpHeartWarning::CopyFrom(const CtpHeartWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guosen.msg.CtpHeartWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpHeartWarning::IsInitialized() const {
  return true;
}

void CtpHeartWarning::Swap(CtpHeartWarning* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpHeartWarning::InternalSwap(CtpHeartWarning* other) {
  using std::swap;
  swap(ntimelapse_, other->ntimelapse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CtpHeartWarning::GetMetadata() const {
  protobuf_guosen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_guosen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CtpRtnConnect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpRtnConnect::kStatusFieldNumber;
const int CtpRtnConnect::kNreasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpRtnConnect::CtpRtnConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_guosen_2eproto::scc_info_CtpRtnConnect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:guosen.msg.CtpRtnConnect)
}
CtpRtnConnect::CtpRtnConnect(const CtpRtnConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&nreason_) -
    reinterpret_cast<char*>(&status_)) + sizeof(nreason_));
  // @@protoc_insertion_point(copy_constructor:guosen.msg.CtpRtnConnect)
}

void CtpRtnConnect::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nreason_) -
      reinterpret_cast<char*>(&status_)) + sizeof(nreason_));
}

CtpRtnConnect::~CtpRtnConnect() {
  // @@protoc_insertion_point(destructor:guosen.msg.CtpRtnConnect)
  SharedDtor();
}

void CtpRtnConnect::SharedDtor() {
}

void CtpRtnConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CtpRtnConnect::descriptor() {
  ::protobuf_guosen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_guosen_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CtpRtnConnect& CtpRtnConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_guosen_2eproto::scc_info_CtpRtnConnect.base);
  return *internal_default_instance();
}


void CtpRtnConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:guosen.msg.CtpRtnConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nreason_) -
      reinterpret_cast<char*>(&status_)) + sizeof(nreason_));
  _internal_metadata_.Clear();
}

bool CtpRtnConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:guosen.msg.CtpRtnConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nreason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nreason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:guosen.msg.CtpRtnConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:guosen.msg.CtpRtnConnect)
  return false;
#undef DO_
}

void CtpRtnConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:guosen.msg.CtpRtnConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // int32 nreason = 2;
  if (this->nreason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nreason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:guosen.msg.CtpRtnConnect)
}

::google::protobuf::uint8* CtpRtnConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:guosen.msg.CtpRtnConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // int32 nreason = 2;
  if (this->nreason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nreason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guosen.msg.CtpRtnConnect)
  return target;
}

size_t CtpRtnConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guosen.msg.CtpRtnConnect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // int32 nreason = 2;
  if (this->nreason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nreason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpRtnConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guosen.msg.CtpRtnConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpRtnConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CtpRtnConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guosen.msg.CtpRtnConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guosen.msg.CtpRtnConnect)
    MergeFrom(*source);
  }
}

void CtpRtnConnect::MergeFrom(const CtpRtnConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guosen.msg.CtpRtnConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.nreason() != 0) {
    set_nreason(from.nreason());
  }
}

void CtpRtnConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guosen.msg.CtpRtnConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpRtnConnect::CopyFrom(const CtpRtnConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guosen.msg.CtpRtnConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpRtnConnect::IsInitialized() const {
  return true;
}

void CtpRtnConnect::Swap(CtpRtnConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpRtnConnect::InternalSwap(CtpRtnConnect* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(nreason_, other->nreason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CtpRtnConnect::GetMetadata() const {
  protobuf_guosen_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_guosen_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
}  // namespace guosen
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::guosen::msg::ProtoMsg* Arena::CreateMaybeMessage< ::guosen::msg::ProtoMsg >(Arena* arena) {
  return Arena::CreateInternal< ::guosen::msg::ProtoMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::guosen::msg::CtpHeartWarning* Arena::CreateMaybeMessage< ::guosen::msg::CtpHeartWarning >(Arena* arena) {
  return Arena::CreateInternal< ::guosen::msg::CtpHeartWarning >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::guosen::msg::CtpRtnConnect* Arena::CreateMaybeMessage< ::guosen::msg::CtpRtnConnect >(Arena* arena) {
  return Arena::CreateInternal< ::guosen::msg::CtpRtnConnect >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
