// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctp.proto

#ifndef PROTOBUF_INCLUDED_ctp_2eproto
#define PROTOBUF_INCLUDED_ctp_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ctp_2eproto 

namespace protobuf_ctp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ctp_2eproto
namespace ctp {
class TDF_FUTURE_DATA;
class TDF_FUTURE_DATADefaultTypeInternal;
extern TDF_FUTURE_DATADefaultTypeInternal _TDF_FUTURE_DATA_default_instance_;
}  // namespace ctp
namespace google {
namespace protobuf {
template<> ::ctp::TDF_FUTURE_DATA* Arena::CreateMaybeMessage<::ctp::TDF_FUTURE_DATA>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ctp {

// ===================================================================

class TDF_FUTURE_DATA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ctp.TDF_FUTURE_DATA) */ {
 public:
  TDF_FUTURE_DATA();
  virtual ~TDF_FUTURE_DATA();

  TDF_FUTURE_DATA(const TDF_FUTURE_DATA& from);

  inline TDF_FUTURE_DATA& operator=(const TDF_FUTURE_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TDF_FUTURE_DATA(TDF_FUTURE_DATA&& from) noexcept
    : TDF_FUTURE_DATA() {
    *this = ::std::move(from);
  }

  inline TDF_FUTURE_DATA& operator=(TDF_FUTURE_DATA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TDF_FUTURE_DATA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TDF_FUTURE_DATA* internal_default_instance() {
    return reinterpret_cast<const TDF_FUTURE_DATA*>(
               &_TDF_FUTURE_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TDF_FUTURE_DATA* other);
  friend void swap(TDF_FUTURE_DATA& a, TDF_FUTURE_DATA& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TDF_FUTURE_DATA* New() const final {
    return CreateMaybeMessage<TDF_FUTURE_DATA>(NULL);
  }

  TDF_FUTURE_DATA* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TDF_FUTURE_DATA>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TDF_FUTURE_DATA& from);
  void MergeFrom(const TDF_FUTURE_DATA& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDF_FUTURE_DATA* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double naskprice = 23;
  int naskprice_size() const;
  void clear_naskprice();
  static const int kNaskpriceFieldNumber = 23;
  double naskprice(int index) const;
  void set_naskprice(int index, double value);
  void add_naskprice(double value);
  const ::google::protobuf::RepeatedField< double >&
      naskprice() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_naskprice();

  // repeated int32 naskvol = 24;
  int naskvol_size() const;
  void clear_naskvol();
  static const int kNaskvolFieldNumber = 24;
  ::google::protobuf::int32 naskvol(int index) const;
  void set_naskvol(int index, ::google::protobuf::int32 value);
  void add_naskvol(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      naskvol() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_naskvol();

  // repeated double nbidprice = 25;
  int nbidprice_size() const;
  void clear_nbidprice();
  static const int kNbidpriceFieldNumber = 25;
  double nbidprice(int index) const;
  void set_nbidprice(int index, double value);
  void add_nbidprice(double value);
  const ::google::protobuf::RepeatedField< double >&
      nbidprice() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_nbidprice();

  // repeated int32 nbidvol = 26;
  int nbidvol_size() const;
  void clear_nbidvol();
  static const int kNbidvolFieldNumber = 26;
  ::google::protobuf::int32 nbidvol(int index) const;
  void set_nbidvol(int index, ::google::protobuf::int32 value);
  void add_nbidvol(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nbidvol() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nbidvol();

  // string szwindcode = 1;
  void clear_szwindcode();
  static const int kSzwindcodeFieldNumber = 1;
  const ::std::string& szwindcode() const;
  void set_szwindcode(const ::std::string& value);
  #if LANG_CXX11
  void set_szwindcode(::std::string&& value);
  #endif
  void set_szwindcode(const char* value);
  void set_szwindcode(const char* value, size_t size);
  ::std::string* mutable_szwindcode();
  ::std::string* release_szwindcode();
  void set_allocated_szwindcode(::std::string* szwindcode);

  // string szcode = 2;
  void clear_szcode();
  static const int kSzcodeFieldNumber = 2;
  const ::std::string& szcode() const;
  void set_szcode(const ::std::string& value);
  #if LANG_CXX11
  void set_szcode(::std::string&& value);
  #endif
  void set_szcode(const char* value);
  void set_szcode(const char* value, size_t size);
  ::std::string* mutable_szcode();
  ::std::string* release_szcode();
  void set_allocated_szcode(::std::string* szcode);

  // string nactionday = 3;
  void clear_nactionday();
  static const int kNactiondayFieldNumber = 3;
  const ::std::string& nactionday() const;
  void set_nactionday(const ::std::string& value);
  #if LANG_CXX11
  void set_nactionday(::std::string&& value);
  #endif
  void set_nactionday(const char* value);
  void set_nactionday(const char* value, size_t size);
  ::std::string* mutable_nactionday();
  ::std::string* release_nactionday();
  void set_allocated_nactionday(::std::string* nactionday);

  // string ntradingday = 4;
  void clear_ntradingday();
  static const int kNtradingdayFieldNumber = 4;
  const ::std::string& ntradingday() const;
  void set_ntradingday(const ::std::string& value);
  #if LANG_CXX11
  void set_ntradingday(::std::string&& value);
  #endif
  void set_ntradingday(const char* value);
  void set_ntradingday(const char* value, size_t size);
  ::std::string* mutable_ntradingday();
  ::std::string* release_ntradingday();
  void set_allocated_ntradingday(::std::string* ntradingday);

  // int32 ntime = 5;
  void clear_ntime();
  static const int kNtimeFieldNumber = 5;
  ::google::protobuf::int32 ntime() const;
  void set_ntime(::google::protobuf::int32 value);

  // int32 nstatus = 6;
  void clear_nstatus();
  static const int kNstatusFieldNumber = 6;
  ::google::protobuf::int32 nstatus() const;
  void set_nstatus(::google::protobuf::int32 value);

  // double ipreopeninterest = 7;
  void clear_ipreopeninterest();
  static const int kIpreopeninterestFieldNumber = 7;
  double ipreopeninterest() const;
  void set_ipreopeninterest(double value);

  // double npreclose = 8;
  void clear_npreclose();
  static const int kNprecloseFieldNumber = 8;
  double npreclose() const;
  void set_npreclose(double value);

  // double npresettleprice = 9;
  void clear_npresettleprice();
  static const int kNpresettlepriceFieldNumber = 9;
  double npresettleprice() const;
  void set_npresettleprice(double value);

  // double nopen = 10;
  void clear_nopen();
  static const int kNopenFieldNumber = 10;
  double nopen() const;
  void set_nopen(double value);

  // double nhigh = 11;
  void clear_nhigh();
  static const int kNhighFieldNumber = 11;
  double nhigh() const;
  void set_nhigh(double value);

  // double nlow = 12;
  void clear_nlow();
  static const int kNlowFieldNumber = 12;
  double nlow() const;
  void set_nlow(double value);

  // double nmatch = 13;
  void clear_nmatch();
  static const int kNmatchFieldNumber = 13;
  double nmatch() const;
  void set_nmatch(double value);

  // double iturnover = 15;
  void clear_iturnover();
  static const int kIturnoverFieldNumber = 15;
  double iturnover() const;
  void set_iturnover(double value);

  // double iopeninterest = 16;
  void clear_iopeninterest();
  static const int kIopeninterestFieldNumber = 16;
  double iopeninterest() const;
  void set_iopeninterest(double value);

  // double nclose = 17;
  void clear_nclose();
  static const int kNcloseFieldNumber = 17;
  double nclose() const;
  void set_nclose(double value);

  // double nsettleprice = 18;
  void clear_nsettleprice();
  static const int kNsettlepriceFieldNumber = 18;
  double nsettleprice() const;
  void set_nsettleprice(double value);

  // double nhighlimited = 19;
  void clear_nhighlimited();
  static const int kNhighlimitedFieldNumber = 19;
  double nhighlimited() const;
  void set_nhighlimited(double value);

  // double nlowlimited = 20;
  void clear_nlowlimited();
  static const int kNlowlimitedFieldNumber = 20;
  double nlowlimited() const;
  void set_nlowlimited(double value);

  // int32 ivolume = 14;
  void clear_ivolume();
  static const int kIvolumeFieldNumber = 14;
  ::google::protobuf::int32 ivolume() const;
  void set_ivolume(::google::protobuf::int32 value);

  // int32 nauctionprice = 27;
  void clear_nauctionprice();
  static const int kNauctionpriceFieldNumber = 27;
  ::google::protobuf::int32 nauctionprice() const;
  void set_nauctionprice(::google::protobuf::int32 value);

  // double npredelta = 21;
  void clear_npredelta();
  static const int kNpredeltaFieldNumber = 21;
  double npredelta() const;
  void set_npredelta(double value);

  // double ncurrdelta = 22;
  void clear_ncurrdelta();
  static const int kNcurrdeltaFieldNumber = 22;
  double ncurrdelta() const;
  void set_ncurrdelta(double value);

  // double navgprice = 29;
  void clear_navgprice();
  static const int kNavgpriceFieldNumber = 29;
  double navgprice() const;
  void set_navgprice(double value);

  // int32 nauctionqty = 28;
  void clear_nauctionqty();
  static const int kNauctionqtyFieldNumber = 28;
  ::google::protobuf::int32 nauctionqty() const;
  void set_nauctionqty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ctp.TDF_FUTURE_DATA)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > naskprice_;
  mutable int _naskprice_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > naskvol_;
  mutable int _naskvol_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > nbidprice_;
  mutable int _nbidprice_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nbidvol_;
  mutable int _nbidvol_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr szwindcode_;
  ::google::protobuf::internal::ArenaStringPtr szcode_;
  ::google::protobuf::internal::ArenaStringPtr nactionday_;
  ::google::protobuf::internal::ArenaStringPtr ntradingday_;
  ::google::protobuf::int32 ntime_;
  ::google::protobuf::int32 nstatus_;
  double ipreopeninterest_;
  double npreclose_;
  double npresettleprice_;
  double nopen_;
  double nhigh_;
  double nlow_;
  double nmatch_;
  double iturnover_;
  double iopeninterest_;
  double nclose_;
  double nsettleprice_;
  double nhighlimited_;
  double nlowlimited_;
  ::google::protobuf::int32 ivolume_;
  ::google::protobuf::int32 nauctionprice_;
  double npredelta_;
  double ncurrdelta_;
  double navgprice_;
  ::google::protobuf::int32 nauctionqty_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ctp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TDF_FUTURE_DATA

// string szwindcode = 1;
inline void TDF_FUTURE_DATA::clear_szwindcode() {
  szwindcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TDF_FUTURE_DATA::szwindcode() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.szwindcode)
  return szwindcode_.GetNoArena();
}
inline void TDF_FUTURE_DATA::set_szwindcode(const ::std::string& value) {
  
  szwindcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.szwindcode)
}
#if LANG_CXX11
inline void TDF_FUTURE_DATA::set_szwindcode(::std::string&& value) {
  
  szwindcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ctp.TDF_FUTURE_DATA.szwindcode)
}
#endif
inline void TDF_FUTURE_DATA::set_szwindcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szwindcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ctp.TDF_FUTURE_DATA.szwindcode)
}
inline void TDF_FUTURE_DATA::set_szwindcode(const char* value, size_t size) {
  
  szwindcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ctp.TDF_FUTURE_DATA.szwindcode)
}
inline ::std::string* TDF_FUTURE_DATA::mutable_szwindcode() {
  
  // @@protoc_insertion_point(field_mutable:ctp.TDF_FUTURE_DATA.szwindcode)
  return szwindcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TDF_FUTURE_DATA::release_szwindcode() {
  // @@protoc_insertion_point(field_release:ctp.TDF_FUTURE_DATA.szwindcode)
  
  return szwindcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TDF_FUTURE_DATA::set_allocated_szwindcode(::std::string* szwindcode) {
  if (szwindcode != NULL) {
    
  } else {
    
  }
  szwindcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szwindcode);
  // @@protoc_insertion_point(field_set_allocated:ctp.TDF_FUTURE_DATA.szwindcode)
}

// int32 nauctionprice = 27;
inline void TDF_FUTURE_DATA::clear_nauctionprice() {
  nauctionprice_ = 0;
}
inline ::google::protobuf::int32 TDF_FUTURE_DATA::nauctionprice() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nauctionprice)
  return nauctionprice_;
}
inline void TDF_FUTURE_DATA::set_nauctionprice(::google::protobuf::int32 value) {
  
  nauctionprice_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nauctionprice)
}

// int32 nauctionqty = 28;
inline void TDF_FUTURE_DATA::clear_nauctionqty() {
  nauctionqty_ = 0;
}
inline ::google::protobuf::int32 TDF_FUTURE_DATA::nauctionqty() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nauctionqty)
  return nauctionqty_;
}
inline void TDF_FUTURE_DATA::set_nauctionqty(::google::protobuf::int32 value) {
  
  nauctionqty_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nauctionqty)
}

// int32 nstatus = 6;
inline void TDF_FUTURE_DATA::clear_nstatus() {
  nstatus_ = 0;
}
inline ::google::protobuf::int32 TDF_FUTURE_DATA::nstatus() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nstatus)
  return nstatus_;
}
inline void TDF_FUTURE_DATA::set_nstatus(::google::protobuf::int32 value) {
  
  nstatus_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nstatus)
}

// string szcode = 2;
inline void TDF_FUTURE_DATA::clear_szcode() {
  szcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TDF_FUTURE_DATA::szcode() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.szcode)
  return szcode_.GetNoArena();
}
inline void TDF_FUTURE_DATA::set_szcode(const ::std::string& value) {
  
  szcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.szcode)
}
#if LANG_CXX11
inline void TDF_FUTURE_DATA::set_szcode(::std::string&& value) {
  
  szcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ctp.TDF_FUTURE_DATA.szcode)
}
#endif
inline void TDF_FUTURE_DATA::set_szcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ctp.TDF_FUTURE_DATA.szcode)
}
inline void TDF_FUTURE_DATA::set_szcode(const char* value, size_t size) {
  
  szcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ctp.TDF_FUTURE_DATA.szcode)
}
inline ::std::string* TDF_FUTURE_DATA::mutable_szcode() {
  
  // @@protoc_insertion_point(field_mutable:ctp.TDF_FUTURE_DATA.szcode)
  return szcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TDF_FUTURE_DATA::release_szcode() {
  // @@protoc_insertion_point(field_release:ctp.TDF_FUTURE_DATA.szcode)
  
  return szcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TDF_FUTURE_DATA::set_allocated_szcode(::std::string* szcode) {
  if (szcode != NULL) {
    
  } else {
    
  }
  szcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szcode);
  // @@protoc_insertion_point(field_set_allocated:ctp.TDF_FUTURE_DATA.szcode)
}

// string nactionday = 3;
inline void TDF_FUTURE_DATA::clear_nactionday() {
  nactionday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TDF_FUTURE_DATA::nactionday() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nactionday)
  return nactionday_.GetNoArena();
}
inline void TDF_FUTURE_DATA::set_nactionday(const ::std::string& value) {
  
  nactionday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nactionday)
}
#if LANG_CXX11
inline void TDF_FUTURE_DATA::set_nactionday(::std::string&& value) {
  
  nactionday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ctp.TDF_FUTURE_DATA.nactionday)
}
#endif
inline void TDF_FUTURE_DATA::set_nactionday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nactionday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ctp.TDF_FUTURE_DATA.nactionday)
}
inline void TDF_FUTURE_DATA::set_nactionday(const char* value, size_t size) {
  
  nactionday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ctp.TDF_FUTURE_DATA.nactionday)
}
inline ::std::string* TDF_FUTURE_DATA::mutable_nactionday() {
  
  // @@protoc_insertion_point(field_mutable:ctp.TDF_FUTURE_DATA.nactionday)
  return nactionday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TDF_FUTURE_DATA::release_nactionday() {
  // @@protoc_insertion_point(field_release:ctp.TDF_FUTURE_DATA.nactionday)
  
  return nactionday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TDF_FUTURE_DATA::set_allocated_nactionday(::std::string* nactionday) {
  if (nactionday != NULL) {
    
  } else {
    
  }
  nactionday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nactionday);
  // @@protoc_insertion_point(field_set_allocated:ctp.TDF_FUTURE_DATA.nactionday)
}

// string ntradingday = 4;
inline void TDF_FUTURE_DATA::clear_ntradingday() {
  ntradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TDF_FUTURE_DATA::ntradingday() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.ntradingday)
  return ntradingday_.GetNoArena();
}
inline void TDF_FUTURE_DATA::set_ntradingday(const ::std::string& value) {
  
  ntradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.ntradingday)
}
#if LANG_CXX11
inline void TDF_FUTURE_DATA::set_ntradingday(::std::string&& value) {
  
  ntradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ctp.TDF_FUTURE_DATA.ntradingday)
}
#endif
inline void TDF_FUTURE_DATA::set_ntradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ntradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ctp.TDF_FUTURE_DATA.ntradingday)
}
inline void TDF_FUTURE_DATA::set_ntradingday(const char* value, size_t size) {
  
  ntradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ctp.TDF_FUTURE_DATA.ntradingday)
}
inline ::std::string* TDF_FUTURE_DATA::mutable_ntradingday() {
  
  // @@protoc_insertion_point(field_mutable:ctp.TDF_FUTURE_DATA.ntradingday)
  return ntradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TDF_FUTURE_DATA::release_ntradingday() {
  // @@protoc_insertion_point(field_release:ctp.TDF_FUTURE_DATA.ntradingday)
  
  return ntradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TDF_FUTURE_DATA::set_allocated_ntradingday(::std::string* ntradingday) {
  if (ntradingday != NULL) {
    
  } else {
    
  }
  ntradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntradingday);
  // @@protoc_insertion_point(field_set_allocated:ctp.TDF_FUTURE_DATA.ntradingday)
}

// int32 ntime = 5;
inline void TDF_FUTURE_DATA::clear_ntime() {
  ntime_ = 0;
}
inline ::google::protobuf::int32 TDF_FUTURE_DATA::ntime() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.ntime)
  return ntime_;
}
inline void TDF_FUTURE_DATA::set_ntime(::google::protobuf::int32 value) {
  
  ntime_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.ntime)
}

// double ipreopeninterest = 7;
inline void TDF_FUTURE_DATA::clear_ipreopeninterest() {
  ipreopeninterest_ = 0;
}
inline double TDF_FUTURE_DATA::ipreopeninterest() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.ipreopeninterest)
  return ipreopeninterest_;
}
inline void TDF_FUTURE_DATA::set_ipreopeninterest(double value) {
  
  ipreopeninterest_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.ipreopeninterest)
}

// double npreclose = 8;
inline void TDF_FUTURE_DATA::clear_npreclose() {
  npreclose_ = 0;
}
inline double TDF_FUTURE_DATA::npreclose() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.npreclose)
  return npreclose_;
}
inline void TDF_FUTURE_DATA::set_npreclose(double value) {
  
  npreclose_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.npreclose)
}

// double npresettleprice = 9;
inline void TDF_FUTURE_DATA::clear_npresettleprice() {
  npresettleprice_ = 0;
}
inline double TDF_FUTURE_DATA::npresettleprice() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.npresettleprice)
  return npresettleprice_;
}
inline void TDF_FUTURE_DATA::set_npresettleprice(double value) {
  
  npresettleprice_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.npresettleprice)
}

// double nopen = 10;
inline void TDF_FUTURE_DATA::clear_nopen() {
  nopen_ = 0;
}
inline double TDF_FUTURE_DATA::nopen() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nopen)
  return nopen_;
}
inline void TDF_FUTURE_DATA::set_nopen(double value) {
  
  nopen_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nopen)
}

// double nhigh = 11;
inline void TDF_FUTURE_DATA::clear_nhigh() {
  nhigh_ = 0;
}
inline double TDF_FUTURE_DATA::nhigh() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nhigh)
  return nhigh_;
}
inline void TDF_FUTURE_DATA::set_nhigh(double value) {
  
  nhigh_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nhigh)
}

// double nlow = 12;
inline void TDF_FUTURE_DATA::clear_nlow() {
  nlow_ = 0;
}
inline double TDF_FUTURE_DATA::nlow() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nlow)
  return nlow_;
}
inline void TDF_FUTURE_DATA::set_nlow(double value) {
  
  nlow_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nlow)
}

// double nmatch = 13;
inline void TDF_FUTURE_DATA::clear_nmatch() {
  nmatch_ = 0;
}
inline double TDF_FUTURE_DATA::nmatch() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nmatch)
  return nmatch_;
}
inline void TDF_FUTURE_DATA::set_nmatch(double value) {
  
  nmatch_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nmatch)
}

// int32 ivolume = 14;
inline void TDF_FUTURE_DATA::clear_ivolume() {
  ivolume_ = 0;
}
inline ::google::protobuf::int32 TDF_FUTURE_DATA::ivolume() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.ivolume)
  return ivolume_;
}
inline void TDF_FUTURE_DATA::set_ivolume(::google::protobuf::int32 value) {
  
  ivolume_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.ivolume)
}

// double iturnover = 15;
inline void TDF_FUTURE_DATA::clear_iturnover() {
  iturnover_ = 0;
}
inline double TDF_FUTURE_DATA::iturnover() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.iturnover)
  return iturnover_;
}
inline void TDF_FUTURE_DATA::set_iturnover(double value) {
  
  iturnover_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.iturnover)
}

// double iopeninterest = 16;
inline void TDF_FUTURE_DATA::clear_iopeninterest() {
  iopeninterest_ = 0;
}
inline double TDF_FUTURE_DATA::iopeninterest() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.iopeninterest)
  return iopeninterest_;
}
inline void TDF_FUTURE_DATA::set_iopeninterest(double value) {
  
  iopeninterest_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.iopeninterest)
}

// double nclose = 17;
inline void TDF_FUTURE_DATA::clear_nclose() {
  nclose_ = 0;
}
inline double TDF_FUTURE_DATA::nclose() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nclose)
  return nclose_;
}
inline void TDF_FUTURE_DATA::set_nclose(double value) {
  
  nclose_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nclose)
}

// double nsettleprice = 18;
inline void TDF_FUTURE_DATA::clear_nsettleprice() {
  nsettleprice_ = 0;
}
inline double TDF_FUTURE_DATA::nsettleprice() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nsettleprice)
  return nsettleprice_;
}
inline void TDF_FUTURE_DATA::set_nsettleprice(double value) {
  
  nsettleprice_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nsettleprice)
}

// double nhighlimited = 19;
inline void TDF_FUTURE_DATA::clear_nhighlimited() {
  nhighlimited_ = 0;
}
inline double TDF_FUTURE_DATA::nhighlimited() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nhighlimited)
  return nhighlimited_;
}
inline void TDF_FUTURE_DATA::set_nhighlimited(double value) {
  
  nhighlimited_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nhighlimited)
}

// double nlowlimited = 20;
inline void TDF_FUTURE_DATA::clear_nlowlimited() {
  nlowlimited_ = 0;
}
inline double TDF_FUTURE_DATA::nlowlimited() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nlowlimited)
  return nlowlimited_;
}
inline void TDF_FUTURE_DATA::set_nlowlimited(double value) {
  
  nlowlimited_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nlowlimited)
}

// double npredelta = 21;
inline void TDF_FUTURE_DATA::clear_npredelta() {
  npredelta_ = 0;
}
inline double TDF_FUTURE_DATA::npredelta() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.npredelta)
  return npredelta_;
}
inline void TDF_FUTURE_DATA::set_npredelta(double value) {
  
  npredelta_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.npredelta)
}

// double ncurrdelta = 22;
inline void TDF_FUTURE_DATA::clear_ncurrdelta() {
  ncurrdelta_ = 0;
}
inline double TDF_FUTURE_DATA::ncurrdelta() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.ncurrdelta)
  return ncurrdelta_;
}
inline void TDF_FUTURE_DATA::set_ncurrdelta(double value) {
  
  ncurrdelta_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.ncurrdelta)
}

// repeated double naskprice = 23;
inline int TDF_FUTURE_DATA::naskprice_size() const {
  return naskprice_.size();
}
inline void TDF_FUTURE_DATA::clear_naskprice() {
  naskprice_.Clear();
}
inline double TDF_FUTURE_DATA::naskprice(int index) const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.naskprice)
  return naskprice_.Get(index);
}
inline void TDF_FUTURE_DATA::set_naskprice(int index, double value) {
  naskprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.naskprice)
}
inline void TDF_FUTURE_DATA::add_naskprice(double value) {
  naskprice_.Add(value);
  // @@protoc_insertion_point(field_add:ctp.TDF_FUTURE_DATA.naskprice)
}
inline const ::google::protobuf::RepeatedField< double >&
TDF_FUTURE_DATA::naskprice() const {
  // @@protoc_insertion_point(field_list:ctp.TDF_FUTURE_DATA.naskprice)
  return naskprice_;
}
inline ::google::protobuf::RepeatedField< double >*
TDF_FUTURE_DATA::mutable_naskprice() {
  // @@protoc_insertion_point(field_mutable_list:ctp.TDF_FUTURE_DATA.naskprice)
  return &naskprice_;
}

// repeated int32 naskvol = 24;
inline int TDF_FUTURE_DATA::naskvol_size() const {
  return naskvol_.size();
}
inline void TDF_FUTURE_DATA::clear_naskvol() {
  naskvol_.Clear();
}
inline ::google::protobuf::int32 TDF_FUTURE_DATA::naskvol(int index) const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.naskvol)
  return naskvol_.Get(index);
}
inline void TDF_FUTURE_DATA::set_naskvol(int index, ::google::protobuf::int32 value) {
  naskvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.naskvol)
}
inline void TDF_FUTURE_DATA::add_naskvol(::google::protobuf::int32 value) {
  naskvol_.Add(value);
  // @@protoc_insertion_point(field_add:ctp.TDF_FUTURE_DATA.naskvol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TDF_FUTURE_DATA::naskvol() const {
  // @@protoc_insertion_point(field_list:ctp.TDF_FUTURE_DATA.naskvol)
  return naskvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TDF_FUTURE_DATA::mutable_naskvol() {
  // @@protoc_insertion_point(field_mutable_list:ctp.TDF_FUTURE_DATA.naskvol)
  return &naskvol_;
}

// repeated double nbidprice = 25;
inline int TDF_FUTURE_DATA::nbidprice_size() const {
  return nbidprice_.size();
}
inline void TDF_FUTURE_DATA::clear_nbidprice() {
  nbidprice_.Clear();
}
inline double TDF_FUTURE_DATA::nbidprice(int index) const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nbidprice)
  return nbidprice_.Get(index);
}
inline void TDF_FUTURE_DATA::set_nbidprice(int index, double value) {
  nbidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nbidprice)
}
inline void TDF_FUTURE_DATA::add_nbidprice(double value) {
  nbidprice_.Add(value);
  // @@protoc_insertion_point(field_add:ctp.TDF_FUTURE_DATA.nbidprice)
}
inline const ::google::protobuf::RepeatedField< double >&
TDF_FUTURE_DATA::nbidprice() const {
  // @@protoc_insertion_point(field_list:ctp.TDF_FUTURE_DATA.nbidprice)
  return nbidprice_;
}
inline ::google::protobuf::RepeatedField< double >*
TDF_FUTURE_DATA::mutable_nbidprice() {
  // @@protoc_insertion_point(field_mutable_list:ctp.TDF_FUTURE_DATA.nbidprice)
  return &nbidprice_;
}

// repeated int32 nbidvol = 26;
inline int TDF_FUTURE_DATA::nbidvol_size() const {
  return nbidvol_.size();
}
inline void TDF_FUTURE_DATA::clear_nbidvol() {
  nbidvol_.Clear();
}
inline ::google::protobuf::int32 TDF_FUTURE_DATA::nbidvol(int index) const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.nbidvol)
  return nbidvol_.Get(index);
}
inline void TDF_FUTURE_DATA::set_nbidvol(int index, ::google::protobuf::int32 value) {
  nbidvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.nbidvol)
}
inline void TDF_FUTURE_DATA::add_nbidvol(::google::protobuf::int32 value) {
  nbidvol_.Add(value);
  // @@protoc_insertion_point(field_add:ctp.TDF_FUTURE_DATA.nbidvol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TDF_FUTURE_DATA::nbidvol() const {
  // @@protoc_insertion_point(field_list:ctp.TDF_FUTURE_DATA.nbidvol)
  return nbidvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TDF_FUTURE_DATA::mutable_nbidvol() {
  // @@protoc_insertion_point(field_mutable_list:ctp.TDF_FUTURE_DATA.nbidvol)
  return &nbidvol_;
}

// double navgprice = 29;
inline void TDF_FUTURE_DATA::clear_navgprice() {
  navgprice_ = 0;
}
inline double TDF_FUTURE_DATA::navgprice() const {
  // @@protoc_insertion_point(field_get:ctp.TDF_FUTURE_DATA.navgprice)
  return navgprice_;
}
inline void TDF_FUTURE_DATA::set_navgprice(double value) {
  
  navgprice_ = value;
  // @@protoc_insertion_point(field_set:ctp.TDF_FUTURE_DATA.navgprice)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ctp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ctp_2eproto
